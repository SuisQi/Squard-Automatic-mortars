(()=>{"use strict";var e,r,t,n,a={5046:(e,r,t)=>{var n,a,o,s;!function(e){e.creatingSession="REPLICATION_CREATING_SESSION",e.connectionReady="REPLICATION_CONNECTION_READY",e.connectionClosed="REPLICATION_CONNECTION_CLOSED",e.connectionError="REPLICATION_CONNECTION_ERROR",e.receiveMessage="REPLICATION_RECEIVE_MESSAGE",e.sendPing="REPLICATION_SEND_PING",e.noop="REPLICATION_NOOP"}(n||(n={})),function(e){e.create="SESSION_CREATE",e.started="SESSION_STARTED",e.ended="SESSION_ENDED",e.join="SESSION_JOIN",e.leave="SESSION_LEAVE",e.addUser="SESSION_ADD_USER",e.removeUser="SESSION_REMOVE_USER",e.changeUserName="SESSION_CHANGE_USER_NAME",e.userNameChanged="SESSION_USER_NAME_CHANGED",e.sendMessage="REPLICATION_SEND_MESSAGE"}(a||(a={})),function(e){e.action="ACTION",e.joined="JOINED",e.userJoined="USER_JOINED",e.userLeft="USER_LEFT",e.userChangedName="USER_CHANGED_NAME",e.error="ERROR"}(o||(o={})),function(e){e.action="ACTION",e.create="CREATE",e.join="JOIN",e.ping="PING",e.changeName="CHANGE_NAME",e.leave="LEAVE"}(s||(s={}));var i=t(7536),l=t(6511);i.A.interceptors.response.use((e=>0!==e.data.success?(l.Ay.error({message:"警告",description:e.data.message}),Promise.reject(e)):e),(e=>Promise.reject(e)));const c=e=>i.A.get("http://127.0.0.1:8080/set_server_ip?address="+e);let d=null,E=null,p=null,u=!1;onmessage=e=>{let r=e.data;switch(r.func){case"CREATE":return d=f(r.payload.serverAddress,r.payload.serializableState),c(r.payload.serverAddress),null;case"JOIN":return d=g(r.payload.serverAddress,r.payload.sessionId),c(r.payload.serverAddress),null;case"CHANGE_NAME":return d&&E&&((e,r)=>{e.send(JSON.stringify({command:s.changeName,payload:{name:r}}))})(d,r.payload.newName),null;case"TERMINATE":return d&&I(d),null;case"SEND":d&&E&&((e,r)=>{e.send(JSON.stringify(r))})(d,r.payload.message);default:return null}};const S=e=>{postMessage(e)},N=e=>{S({event:"DISPATCH",payload:{action:e}})},O=e=>{let r=new WebSocket(e);return r.onmessage=e=>_(e),r.onclose=e=>v(e),r.onerror=e=>m(e),r},f=(e,r)=>{let t=O(e);return y(t),t.onopen=e=>{((e,r)=>{e.send(JSON.stringify({command:s.create,payload:{state:r}}))})(t,r)},t},g=(e,r)=>{let t=O(e);return y(t),t.onopen=e=>{((e,r)=>{e.send(JSON.stringify({command:s.join,payload:{sessionId:r}}))})(t,r)},t},y=e=>{p=setInterval((()=>{(e=>{e.send(JSON.stringify({command:s.ping}))})(e)}),1e3)},I=e=>{u=!0,E=null,null!==p&&clearInterval(p);try{(e=>{e.send(JSON.stringify({command:s.leave})),e.close()})(e),e.close()}catch(e){console.log(e)}},_=e=>{let r=JSON.parse(e.data);r.command==o.error&&N({type:n.receiveMessage,payload:{message:r,sessionId:""}}),r.command==o.joined&&(E=r.payload.sessionId,S({event:"SESSION_ID",payload:r.payload})),null!==E&&N({type:n.receiveMessage,payload:{message:r,sessionId:E}})},v=e=>{d&&I(d),S({event:"CLOSE"})},m=e=>{d&&I(d),S({event:"ERROR",payload:{msg:""}})}}},o={};function s(e){var r=o[e];if(void 0!==r)return r.exports;var t=o[e]={exports:{}};return a[e](t,t.exports,s),t.exports}s.m=a,s.x=()=>{var e=s.O(void 0,[446],(()=>s(5046)));return s.O(e)},e=[],s.O=(r,t,n,a)=>{if(!t){var o=1/0;for(d=0;d<e.length;d++){for(var[t,n,a]=e[d],i=!0,l=0;l<t.length;l++)(!1&a||o>=a)&&Object.keys(s.O).every((e=>s.O[e](t[l])))?t.splice(l--,1):(i=!1,a<o&&(o=a));if(i){e.splice(d--,1);var c=n();void 0!==c&&(r=c)}}return r}a=a||0;for(var d=e.length;d>0&&e[d-1][2]>a;d--)e[d]=e[d-1];e[d]=[t,n,a]},s.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return s.d(r,{a:r}),r},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,n){if(1&n&&(e=this(e)),8&n)return e;if("object"==typeof e&&e){if(4&n&&e.__esModule)return e;if(16&n&&"function"==typeof e.then)return e}var a=Object.create(null);s.r(a);var o={};r=r||[null,t({}),t([]),t(t)];for(var i=2&n&&e;"object"==typeof i&&!~r.indexOf(i);i=t(i))Object.getOwnPropertyNames(i).forEach((r=>o[r]=()=>e[r]));return o.default=()=>e,s.d(a,o),a},s.d=(e,r)=>{for(var t in r)s.o(r,t)&&!s.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},s.f={},s.e=e=>Promise.all(Object.keys(s.f).reduce(((r,t)=>(s.f[t](e,r),r)),[])),s.u=e=>e+".app.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var r=s.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");if(t.length)for(var n=t.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=t[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),(()=>{var e={46:1};s.f.i=(r,t)=>{e[r]||importScripts(s.p+s.u(r))};var r=self.webpackChunksquadstrat=self.webpackChunksquadstrat||[],t=r.push.bind(r);r.push=r=>{var[n,a,o]=r;for(var i in a)s.o(a,i)&&(s.m[i]=a[i]);for(o&&o(s);n.length;)e[n.pop()]=1;t(r)}})(),n=s.x,s.x=()=>s.e(446).then(n),s.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,