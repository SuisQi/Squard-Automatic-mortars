(()=>{"use strict";var e,n,a,s;!function(e){e.creatingSession="REPLICATION_CREATING_SESSION",e.connectionReady="REPLICATION_CONNECTION_READY",e.connectionClosed="REPLICATION_CONNECTION_CLOSED",e.connectionError="REPLICATION_CONNECTION_ERROR",e.receiveMessage="REPLICATION_RECEIVE_MESSAGE",e.sendPing="REPLICATION_SEND_PING",e.noop="REPLICATION_NOOP"}(e||(e={})),function(e){e.create="SESSION_CREATE",e.started="SESSION_STARTED",e.ended="SESSION_ENDED",e.join="SESSION_JOIN",e.leave="SESSION_LEAVE",e.addUser="SESSION_ADD_USER",e.removeUser="SESSION_REMOVE_USER",e.changeUserName="SESSION_CHANGE_USER_NAME",e.userNameChanged="SESSION_USER_NAME_CHANGED",e.sendMessage="REPLICATION_SEND_MESSAGE"}(n||(n={})),function(e){e.action="ACTION",e.joined="JOINED",e.userJoined="USER_JOINED",e.userLeft="USER_LEFT",e.userChangedName="USER_CHANGED_NAME",e.error="ERROR"}(a||(a={})),function(e){e.action="ACTION",e.create="CREATE",e.join="JOIN",e.ping="PING",e.changeName="CHANGE_NAME",e.leave="LEAVE"}(s||(s={}));let E=null,o=null,N=null,r=!1;onmessage=e=>{let n=e.data;switch(n.func){case"CREATE":return E=d(n.payload.serverAddress,n.payload.serializableState),null;case"JOIN":return E=I(n.payload.serverAddress,n.payload.sessionId),null;case"CHANGE_NAME":return E&&o&&((e,n)=>{e.send(JSON.stringify({command:s.changeName,payload:{name:n}}))})(E,n.payload.newName),null;case"TERMINATE":return E&&O(E),null;case"SEND":E&&o&&((e,n)=>{e.send(JSON.stringify(n))})(E,n.payload.message);default:return null}};const t=e=>{postMessage(e)},S=e=>{t({event:"DISPATCH",payload:{action:e}})},l=e=>{let n=new WebSocket(e);return n.onmessage=e=>i(e),n.onclose=e=>_(e),n.onerror=e=>A(e),n},d=(e,n)=>{let a=l(e);return c(a),a.onopen=e=>{((e,n)=>{e.send(JSON.stringify({command:s.create,payload:{state:n}}))})(a,n)},a},I=(e,n)=>{let a=l(e);return c(a),a.onopen=e=>{((e,n)=>{e.send(JSON.stringify({command:s.join,payload:{sessionId:n}}))})(a,n)},a},c=e=>{N=setInterval((()=>{(e=>{e.send(JSON.stringify({command:s.ping}))})(e)}),1e3)},O=e=>{r=!0,o=null,null!==N&&clearInterval(N);try{(e=>{e.send(JSON.stringify({command:s.leave})),e.close()})(e),e.close()}catch(e){console.log(e)}},i=n=>{let s=JSON.parse(n.data);s.command==a.error&&S({type:e.receiveMessage,payload:{message:s,sessionId:""}}),s.command==a.joined&&(o=s.payload.sessionId,t({event:"SESSION_ID",payload:s.payload})),null!==o&&S({type:e.receiveMessage,payload:{message:s,sessionId:o}})},_=e=>{E&&O(E),t({event:"CLOSE"})},A=e=>{E&&O(E),t({event:"ERROR",payload:{msg:""}})}})();