(()=>{"use strict";var e,n,a,s;!function(e){e.creatingSession="REPLICATION_CREATING_SESSION",e.connectionReady="REPLICATION_CONNECTION_READY",e.connectionClosed="REPLICATION_CONNECTION_CLOSED",e.connectionError="REPLICATION_CONNECTION_ERROR",e.receiveMessage="REPLICATION_RECEIVE_MESSAGE",e.sendPing="REPLICATION_SEND_PING",e.noop="REPLICATION_NOOP"}(e||(e={})),function(e){e.create="SESSION_CREATE",e.started="SESSION_STARTED",e.ended="SESSION_ENDED",e.join="SESSION_JOIN",e.leave="SESSION_LEAVE",e.addUser="SESSION_ADD_USER",e.removeUser="SESSION_REMOVE_USER",e.changeUserName="SESSION_CHANGE_USER_NAME",e.userNameChanged="SESSION_USER_NAME_CHANGED",e.sendMessage="REPLICATION_SEND_MESSAGE"}(n||(n={})),function(e){e.action="ACTION",e.joined="JOINED",e.userJoined="USER_JOINED",e.userLeft="USER_LEFT",e.userChangedName="USER_CHANGED_NAME"}(a||(a={})),function(e){e.action="ACTION",e.create="CREATE",e.join="JOIN",e.ping="PING",e.changeName="CHANGE_NAME",e.leave="LEAVE"}(s||(s={}));let E=null,N=null,o=null,S=!1;onmessage=e=>{let n=e.data;switch(n.func){case"CREATE":return E=l(n.payload.serverAddress,n.payload.serializableState),null;case"JOIN":return E=d(n.payload.serverAddress,n.payload.sessionId),null;case"CHANGE_NAME":return E&&N&&((e,n)=>{e.send(JSON.stringify({command:s.changeName,payload:{name:n}}))})(E,n.payload.newName),null;case"TERMINATE":return E&&O(E),null;case"SEND":E&&N&&((e,n)=>{e.send(JSON.stringify(n))})(E,n.payload.message);default:return null}};const t=e=>{postMessage(e)},r=e=>{let n=new WebSocket(e);return n.onmessage=e=>c(e),n.onclose=e=>i(e),n.onerror=e=>_(e),n},l=(e,n)=>{let a=r(e);return I(a),a.onopen=e=>{((e,n)=>{e.send(JSON.stringify({command:s.create,payload:{state:n}}))})(a,n)},a},d=(e,n)=>{let a=r(e);return I(a),a.onopen=e=>{((e,n)=>{e.send(JSON.stringify({command:s.join,payload:{sessionId:n}}))})(a,n)},a},I=e=>{o=setInterval((()=>{(e=>{e.send(JSON.stringify({command:s.ping}))})(e)}),1e3)},O=e=>{S=!0,N=null,null!==o&&clearInterval(o);try{(e=>{e.send(JSON.stringify({command:s.leave})),e.close()})(e),e.close()}catch(e){}},c=n=>{let s=JSON.parse(n.data);var E;s.command==a.joined&&(N=s.payload.sessionId,t({event:"SESSION_ID",payload:s.payload})),null!==N&&(E={type:e.receiveMessage,payload:{message:s,sessionId:N}},t({event:"DISPATCH",payload:{action:E}}))},i=e=>{E&&O(E),t({event:"CLOSE"})},_=e=>{E&&O(E),t({event:"ERROR"})}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,