/*! For license information please see app.js.LICENSE.txt */
(()=>{var e,t,n={6800:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.server_context"),u=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),d=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),m=Symbol.for("react.lazy");Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.isMemo=function(e){return function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case i:case a:case f:case d:return e;default:switch(e=e&&e.$$typeof){case c:case s:case u:case m:case p:case l:return e;default:return t}}case r:return t}}}(e)===p}},8492:(e,t,n)=>{"use strict";e.exports=n(6800)},4146:(e,t,n)=>{"use strict";var r=n(4363),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var c=Object.defineProperty,u=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var i=u(n);f&&(i=i.concat(f(n)));for(var l=s(t),h=s(n),g=0;g<i.length;++g){var y=i[g];if(!(a[y]||r&&r[y]||h&&h[y]||l&&l[y])){var v=d(n,y);try{c(t,y,v)}catch(e){}}}}return t}},5228:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var a,i,l=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var c in a=Object(arguments[s]))n.call(a,c)&&(l[c]=a[c]);if(t){i=t(a);for(var u=0;u<i.length;u++)r.call(a,i[u])&&(l[i[u]]=a[i[u]])}}return l}},2551:(e,t,n)=>{"use strict";var r=n(6540),o=n(5228),a=n(9982);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));function l(e,t,n,r,o,a,i,l,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var s=!1,c=null,u=!1,f=null,d={onError:function(e){s=!0,c=e}};function p(e,t,n,r,o,a,i,u,f){s=!1,c=null,l.apply(d,arguments)}var m=null,h=null,g=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=g(n),function(e,t,n,r,o,a,l,d,m){if(p.apply(this,arguments),s){if(!s)throw Error(i(198));var h=c;s=!1,c=null,u||(u=!0,f=h)}}(r,t,void 0,e),e.currentTarget=null}var v=null,b={};function x(){if(v)for(var e in b){var t=b[e],n=v.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!S[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in S[n]=t,n=t.eventTypes){var o=void 0,a=n[r],l=t,s=r;if(_.hasOwnProperty(s))throw Error(i(99,s));_[s]=a;var c=a.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&w(c[o],l,s);o=!0}else a.registrationName?(w(a.registrationName,l,s),o=!0):o=!1;if(!o)throw Error(i(98,r,e))}}}}function w(e,t,n){if(E[e])throw Error(i(100,e));E[e]=t,k[e]=t.eventTypes[n].dependencies}var S=[],_={},E={},k={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(i(102,t));b[t]=r,n=!0}}n&&x()}var C=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),O=null,P=null,N=null;function M(e){if(e=h(e)){if("function"!=typeof O)throw Error(i(280));var t=e.stateNode;t&&(t=m(t),O(e.stateNode,e.type,t))}}function I(e){P?N?N.push(e):N=[e]:P=e}function A(){if(P){var e=P,t=N;if(N=P=null,M(e),t)for(e=0;e<t.length;e++)M(t[e])}}function R(e,t){return e(t)}function j(e,t,n,r,o){return e(t,n,r,o)}function z(){}var F=R,L=!1,D=!1;function $(){null===P&&null===N||(z(),A())}function B(e,t,n){if(D)return e(t,n);D=!0;try{return F(e,t,n)}finally{D=!1,$()}}var H=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,U=Object.prototype.hasOwnProperty,W={},V={};function G(e,t,n,r,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){q[e]=new G(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];q[t]=new G(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){q[e]=new G(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){q[e]=new G(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){q[e]=new G(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){q[e]=new G(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){q[e]=new G(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){q[e]=new G(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){q[e]=new G(e,5,!1,e.toLowerCase(),null,!1)}));var K=/[\-:]([a-z])/g;function X(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(K,X);q[t]=new G(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(K,X);q[t]=new G(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(K,X);q[t]=new G(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){q[e]=new G(e,1,!1,e.toLowerCase(),null,!1)})),q.xlinkHref=new G("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){q[e]=new G(e,1,!1,e.toLowerCase(),null,!0)}));var Q=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Y(e,t,n,r){var o=q.hasOwnProperty(t)?q[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!U.call(V,e)||!U.call(W,e)&&(H.test(e)?V[e]=!0:(W[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Q.hasOwnProperty("ReactCurrentDispatcher")||(Q.ReactCurrentDispatcher={current:null}),Q.hasOwnProperty("ReactCurrentBatchConfig")||(Q.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ae=Z?Symbol.for("react.provider"):60109,ie=Z?Symbol.for("react.context"):60110,le=Z?Symbol.for("react.concurrent_mode"):60111,se=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,ue=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,de=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,me="function"==typeof Symbol&&Symbol.iterator;function he(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=me&&e[me]||e["@@iterator"])?e:null}function ge(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case ue:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ie:return"Context.Consumer";case ae:return"Context.Provider";case se:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ge(e.type);case pe:return ge(e.render);case de:if(e=1===e._status?e._result:null)return ge(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,a=ge(e.type);n=null,r&&(n=ge(r.type)),r=a,a="",o?a=" (at "+o.fileName.replace(J,"")+":"+o.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}function ve(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function xe(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Se(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _e(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ve(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ee(e,t){null!=(t=t.checked)&&Y(e,"checked",t,!1)}function ke(e,t){Ee(e,t);var n=ve(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ce(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ce(e,t.type,ve(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ce(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Oe(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Pe(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ve(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Ne(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Me(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ve(n)}}function Ie(e,t){var n=ve(t.value),r=ve(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function Re(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function je(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Re(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,Fe,Le=(Fe=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return Fe(e,t)}))}:Fe);function De(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function $e(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Be={animationend:$e("Animation","AnimationEnd"),animationiteration:$e("Animation","AnimationIteration"),animationstart:$e("Animation","AnimationStart"),transitionend:$e("Transition","TransitionEnd")},He={},Ue={};function We(e){if(He[e])return He[e];if(!Be[e])return e;var t,n=Be[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ue)return He[e]=n[t];return e}C&&(Ue=document.createElement("div").style,"AnimationEvent"in window||(delete Be.animationend.animation,delete Be.animationiteration.animation,delete Be.animationstart.animation),"TransitionEvent"in window||delete Be.transitionend.transition);var Ve=We("animationend"),Ge=We("animationiteration"),qe=We("animationstart"),Ke=We("transitionend"),Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Qe=new("function"==typeof WeakMap?WeakMap:Map);function Ye(e){var t=Qe.get(e);return void 0===t&&(t=new Map,Qe.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ze(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function et(e){if(Je(e)!==e)throw Error(i(188))}function tt(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return et(o),e;if(a===r)return et(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=a;break}if(s===r){l=!0,r=o,n=a;break}s=s.sibling}if(!l){for(s=a.child;s;){if(s===n){l=!0,n=a,r=o;break}if(s===r){l=!0,r=a,n=o;break}s=s.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function nt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function rt(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function it(e){if(null!==e&&(ot=nt(ot,e)),e=ot,ot=null,e){if(rt(e,at),ot)throw Error(i(95));if(u)throw e=f,u=!1,f=null,e}}function lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function st(e){if(!C)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function ut(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function ft(e,t,n,r){if(ct.length){var o=ct.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function dt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Mn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=lt(e.nativeEvent);r=e.topLevelType;var a=e.nativeEvent,i=e.eventSystemFlags;0===n&&(i|=64);for(var l=null,s=0;s<S.length;s++){var c=S[s];c&&(c=c.extractEvents(r,t,a,o,i))&&(l=nt(l,c))}it(l)}}function pt(e,t,n){if(!n.has(e)){switch(e){case"scroll":qt(t,"scroll",!0);break;case"focus":case"blur":qt(t,"focus",!0),qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":st(e)&&qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Xe.indexOf(e)&&Gt(e,t)}n.set(e,null)}}var mt,ht,gt,yt=!1,vt=[],bt=null,xt=null,wt=null,St=new Map,_t=new Map,Et=[],kt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Tt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Ct(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Ot(e,t){switch(e){case"focus":case"blur":bt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":wt=null;break;case"pointerover":case"pointerout":St.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":_t.delete(t.pointerId)}}function Pt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=Ct(t,n,r,o,a),null!==t&&null!==(t=In(t))&&ht(t),e):(e.eventSystemFlags|=r,e)}function Nt(e){var t=Mn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ze(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){gt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;var t=Yt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=In(t);return null!==n&&ht(n),e.blockedOn=t,!1}return!0}function It(e,t,n){Mt(e)&&n.delete(t)}function At(){for(yt=!1;0<vt.length;){var e=vt[0];if(null!==e.blockedOn){null!==(e=In(e.blockedOn))&&mt(e);break}var t=Yt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:vt.shift()}null!==bt&&Mt(bt)&&(bt=null),null!==xt&&Mt(xt)&&(xt=null),null!==wt&&Mt(wt)&&(wt=null),St.forEach(It),_t.forEach(It)}function Rt(e,t){e.blockedOn===t&&(e.blockedOn=null,yt||(yt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,At)))}function jt(e){function t(t){return Rt(t,e)}if(0<vt.length){Rt(vt[0],e);for(var n=1;n<vt.length;n++){var r=vt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==bt&&Rt(bt,e),null!==xt&&Rt(xt,e),null!==wt&&Rt(wt,e),St.forEach(t),_t.forEach(t),n=0;n<Et.length;n++)(r=Et[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Et.length&&null===(n=Et[0]).blockedOn;)Nt(n),null===n.blockedOn&&Et.shift()}var zt={},Ft=new Map,Lt=new Map,Dt=["abort","abort",Ve,"animationEnd",Ge,"animationIteration",qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ke,"transitionEnd","waiting","waiting"];function $t(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],a="on"+(o[0].toUpperCase()+o.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[r],eventPriority:t},Lt.set(r,t),Ft.set(r,a),zt[o]=a}}$t("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),$t("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),$t(Dt,2);for(var Bt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ht=0;Ht<Bt.length;Ht++)Lt.set(Bt[Ht],0);var Ut=a.unstable_UserBlockingPriority,Wt=a.unstable_runWithPriority,Vt=!0;function Gt(e,t){qt(t,e,!1)}function qt(e,t,n){var r=Lt.get(t);switch(void 0===r?2:r){case 0:r=Kt.bind(null,t,1,e);break;case 1:r=Xt.bind(null,t,1,e);break;default:r=Qt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Kt(e,t,n,r){L||z();var o=Qt,a=L;L=!0;try{j(o,e,t,n,r)}finally{(L=a)||$()}}function Xt(e,t,n,r){Wt(Ut,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){if(Vt)if(0<vt.length&&-1<kt.indexOf(e))e=Ct(null,e,t,n,r),vt.push(e);else{var o=Yt(e,t,n,r);if(null===o)Ot(e,r);else if(-1<kt.indexOf(e))e=Ct(o,e,t,n,r),vt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return bt=Pt(bt,e,t,n,r,o),!0;case"dragenter":return xt=Pt(xt,e,t,n,r,o),!0;case"mouseover":return wt=Pt(wt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return St.set(a,Pt(St.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,_t.set(a,Pt(_t.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Ot(e,r),e=ft(e,r,null,t);try{B(dt,e)}finally{ut(e)}}}}function Yt(e,t,n,r){if(null!==(n=Mn(n=lt(r)))){var o=Je(n);if(null===o)n=null;else{var a=o.tag;if(13===a){if(null!==(n=Ze(o)))return n;n=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=ft(e,r,n,t);try{B(dt,e)}finally{ut(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Zt=["Webkit","ms","Moz","O"];function en(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function tn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=en(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Jt).forEach((function(e){Zt.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var nn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function rn(e,t){if(t){if(nn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var an="http://www.w3.org/1999/xhtml";function ln(e,t){var n=Ye(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++)pt(t[r],e,n)}function sn(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function un(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=un(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=un(r)}}function dn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function mn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hn="$",gn="/$",yn="$?",vn="$!",bn=null,xn=null;function wn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Sn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var _n="function"==typeof setTimeout?setTimeout:void 0,En="function"==typeof clearTimeout?clearTimeout:void 0;function kn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Tn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===hn||n===vn||n===yn){if(0===t)return e;t--}else n===gn&&t++}e=e.previousSibling}return null}var Cn=Math.random().toString(36).slice(2),On="__reactInternalInstance$"+Cn,Pn="__reactEventHandlers$"+Cn,Nn="__reactContainere$"+Cn;function Mn(e){var t=e[On];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Nn]||n[On]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Tn(e);null!==e;){if(n=e[On])return n;e=Tn(e)}return t}n=(e=n).parentNode}return null}function In(e){return!(e=e[On]||e[Nn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function An(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function Rn(e){return e[Pn]||null}function jn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function zn(e,t){var n=e.stateNode;if(!n)return null;var r=m(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}function Fn(e,t,n){(t=zn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=nt(n._dispatchListeners,t),n._dispatchInstances=nt(n._dispatchInstances,e))}function Ln(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=jn(t);for(t=n.length;0<t--;)Fn(n[t],"captured",e);for(t=0;t<n.length;t++)Fn(n[t],"bubbled",e)}}function Dn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=zn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=nt(n._dispatchListeners,t),n._dispatchInstances=nt(n._dispatchInstances,e))}function $n(e){e&&e.dispatchConfig.registrationName&&Dn(e._targetInst,null,e)}function Bn(e){rt(e,Ln)}var Hn=null,Un=null,Wn=null;function Vn(){if(Wn)return Wn;var e,t,n=Un,r=n.length,o="value"in Hn?Hn.value:Hn.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Wn=o.slice(e,1<t?1-t:void 0)}function Gn(){return!0}function qn(){return!1}function Kn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Gn:qn,this.isPropagationStopped=qn,this}function Xn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Qn(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Yn(e){e.eventPool=[],e.getPooled=Xn,e.release=Qn}o(Kn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Gn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Gn)},persist:function(){this.isPersistent=Gn},isPersistent:qn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=qn,this._dispatchInstances=this._dispatchListeners=null}}),Kn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Kn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Yn(n),n},Yn(Kn);var Jn=Kn.extend({data:null}),Zn=Kn.extend({data:null}),er=[9,13,27,32],tr=C&&"CompositionEvent"in window,nr=null;C&&"documentMode"in document&&(nr=document.documentMode);var rr=C&&"TextEvent"in window&&!nr,or=C&&(!tr||nr&&8<nr&&11>=nr),ar=String.fromCharCode(32),ir={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},lr=!1;function sr(e,t){switch(e){case"keyup":return-1!==er.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function cr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ur=!1,fr={eventTypes:ir,extractEvents:function(e,t,n,r){var o;if(tr)e:{switch(e){case"compositionstart":var a=ir.compositionStart;break e;case"compositionend":a=ir.compositionEnd;break e;case"compositionupdate":a=ir.compositionUpdate;break e}a=void 0}else ur?sr(e,n)&&(a=ir.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=ir.compositionStart);return a?(or&&"ko"!==n.locale&&(ur||a!==ir.compositionStart?a===ir.compositionEnd&&ur&&(o=Vn()):(Un="value"in(Hn=r)?Hn.value:Hn.textContent,ur=!0)),a=Jn.getPooled(a,t,n,r),(o||null!==(o=cr(n)))&&(a.data=o),Bn(a),o=a):o=null,(e=rr?function(e,t){switch(e){case"compositionend":return cr(t);case"keypress":return 32!==t.which?null:(lr=!0,ar);case"textInput":return(e=t.data)===ar&&lr?null:e;default:return null}}(e,n):function(e,t){if(ur)return"compositionend"===e||!tr&&sr(e,t)?(e=Vn(),Wn=Un=Hn=null,ur=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return or&&"ko"!==t.locale?null:t.data}}(e,n))?((t=Zn.getPooled(ir.beforeInput,t,n,r)).data=e,Bn(t)):t=null,null===o?t:null===t?o:[o,t]}},dr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!dr[e.type]:"textarea"===t}var mr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function hr(e,t,n){return(e=Kn.getPooled(mr.change,e,t,n)).type="change",I(n),Bn(e),e}var gr=null,yr=null;function vr(e){it(e)}function br(e){if(we(An(e)))return e}function xr(e,t){if("change"===e)return t}var wr=!1;function Sr(){gr&&(gr.detachEvent("onpropertychange",_r),yr=gr=null)}function _r(e){if("value"===e.propertyName&&br(yr))if(e=hr(yr,e,lt(e)),L)it(e);else{L=!0;try{R(vr,e)}finally{L=!1,$()}}}function Er(e,t,n){"focus"===e?(Sr(),yr=n,(gr=t).attachEvent("onpropertychange",_r)):"blur"===e&&Sr()}function kr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return br(yr)}function Tr(e,t){if("click"===e)return br(t)}function Cr(e,t){if("input"===e||"change"===e)return br(t)}C&&(wr=st("input")&&(!document.documentMode||9<document.documentMode));var Or={eventTypes:mr,_isInputEventSupported:wr,extractEvents:function(e,t,n,r){var o=t?An(t):window,a=o.nodeName&&o.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===o.type)var i=xr;else if(pr(o))if(wr)i=Cr;else{i=kr;var l=Er}else(a=o.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Tr);if(i&&(i=i(e,t)))return hr(i,n,r);l&&l(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ce(o,"number",o.value)}},Pr=Kn.extend({view:null,detail:null}),Nr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Mr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Nr[e])&&!!t[e]}function Ir(){return Mr}var Ar=0,Rr=0,jr=!1,zr=!1,Fr=Pr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ir,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ar;return Ar=e.screenX,jr?"mousemove"===e.type?e.screenX-t:0:(jr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Rr;return Rr=e.screenY,zr?"mousemove"===e.type?e.screenY-t:0:(zr=!0,0)}}),Lr=Fr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Dr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},$r={eventTypes:Dr,extractEvents:function(e,t,n,r,o){var a="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(a&&0==(32&o)&&(n.relatedTarget||n.fromElement)||!i&&!a)return null;if(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,i?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?Mn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null,i===t)return null;if("mouseout"===e||"mouseover"===e)var l=Fr,s=Dr.mouseLeave,c=Dr.mouseEnter,u="mouse";else"pointerout"!==e&&"pointerover"!==e||(l=Lr,s=Dr.pointerLeave,c=Dr.pointerEnter,u="pointer");if(e=null==i?a:An(i),a=null==t?a:An(t),(s=l.getPooled(s,i,n,r)).type=u+"leave",s.target=e,s.relatedTarget=a,(n=l.getPooled(c,t,n,r)).type=u+"enter",n.target=a,n.relatedTarget=e,u=t,(r=i)&&u)e:{for(c=u,i=0,e=l=r;e;e=jn(e))i++;for(e=0,t=c;t;t=jn(t))e++;for(;0<i-e;)l=jn(l),i--;for(;0<e-i;)c=jn(c),e--;for(;i--;){if(l===c||l===c.alternate)break e;l=jn(l),c=jn(c)}l=null}else l=null;for(c=l,l=[];r&&r!==c&&(null===(i=r.alternate)||i!==c);)l.push(r),r=jn(r);for(r=[];u&&u!==c&&(null===(i=u.alternate)||i!==c);)r.push(u),u=jn(u);for(u=0;u<l.length;u++)Dn(l[u],"bubbled",s);for(u=r.length;0<u--;)Dn(r[u],"captured",n);return 0==(64&o)?[s]:[s,n]}},Br="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Hr=Object.prototype.hasOwnProperty;function Ur(e,t){if(Br(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Hr.call(t,n[r])||!Br(e[n[r]],t[n[r]]))return!1;return!0}var Wr=C&&"documentMode"in document&&11>=document.documentMode,Vr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Gr=null,qr=null,Kr=null,Xr=!1;function Qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Xr||null==Gr||Gr!==cn(n)?null:(n="selectionStart"in(n=Gr)&&mn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Kr&&Ur(Kr,n)?null:(Kr=n,(e=Kn.getPooled(Vr.select,qr,e,t)).type="select",e.target=Gr,Bn(e),e))}var Yr={eventTypes:Vr,extractEvents:function(e,t,n,r,o,a){if(!(a=!(o=a||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Ye(o),a=k.onSelect;for(var i=0;i<a.length;i++)if(!o.has(a[i])){o=!1;break e}o=!0}a=!o}if(a)return null;switch(o=t?An(t):window,e){case"focus":(pr(o)||"true"===o.contentEditable)&&(Gr=o,qr=t,Kr=null);break;case"blur":Kr=qr=Gr=null;break;case"mousedown":Xr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Xr=!1,Qr(n,r);case"selectionchange":if(Wr)break;case"keydown":case"keyup":return Qr(n,r)}return null}},Jr=Kn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Zr=Kn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),eo=Pr.extend({relatedTarget:null});function to(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var no={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ro={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},oo=Pr.extend({key:function(e){if(e.key){var t=no[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=to(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?ro[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ir,charCode:function(e){return"keypress"===e.type?to(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?to(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ao=Fr.extend({dataTransfer:null}),io=Pr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ir}),lo=Kn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),so=Fr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),co={eventTypes:zt,extractEvents:function(e,t,n,r){var o=Ft.get(e);if(!o)return null;switch(e){case"keypress":if(0===to(n))return null;case"keydown":case"keyup":e=oo;break;case"blur":case"focus":e=eo;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Fr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ao;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=io;break;case Ve:case Ge:case qe:e=Jr;break;case Ke:e=lo;break;case"scroll":e=Pr;break;case"wheel":e=so;break;case"copy":case"cut":case"paste":e=Zr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Lr;break;default:e=Kn}return Bn(t=e.getPooled(o,t,n,r)),t}};if(v)throw Error(i(101));v=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x(),m=Rn,h=In,g=An,T({SimpleEventPlugin:co,EnterLeaveEventPlugin:$r,ChangeEventPlugin:Or,SelectEventPlugin:Yr,BeforeInputEventPlugin:fr});var uo=[],fo=-1;function po(e){0>fo||(e.current=uo[fo],uo[fo]=null,fo--)}function mo(e,t){fo++,uo[fo]=e.current,e.current=t}var ho={},go={current:ho},yo={current:!1},vo=ho;function bo(e,t){var n=e.type.contextTypes;if(!n)return ho;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function xo(e){return null!=e.childContextTypes}function wo(){po(yo),po(go)}function So(e,t,n){if(go.current!==ho)throw Error(i(168));mo(go,t),mo(yo,n)}function _o(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,ge(t)||"Unknown",a));return o({},n,{},r)}function Eo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ho,vo=go.current,mo(go,e),mo(yo,yo.current),!0}function ko(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=_o(e,t,vo),r.__reactInternalMemoizedMergedChildContext=e,po(yo),po(go),mo(go,e)):po(yo),mo(yo,n)}var To=a.unstable_runWithPriority,Co=a.unstable_scheduleCallback,Oo=a.unstable_cancelCallback,Po=a.unstable_requestPaint,No=a.unstable_now,Mo=a.unstable_getCurrentPriorityLevel,Io=a.unstable_ImmediatePriority,Ao=a.unstable_UserBlockingPriority,Ro=a.unstable_NormalPriority,jo=a.unstable_LowPriority,zo=a.unstable_IdlePriority,Fo={},Lo=a.unstable_shouldYield,Do=void 0!==Po?Po:function(){},$o=null,Bo=null,Ho=!1,Uo=No(),Wo=1e4>Uo?No:function(){return No()-Uo};function Vo(){switch(Mo()){case Io:return 99;case Ao:return 98;case Ro:return 97;case jo:return 96;case zo:return 95;default:throw Error(i(332))}}function Go(e){switch(e){case 99:return Io;case 98:return Ao;case 97:return Ro;case 96:return jo;case 95:return zo;default:throw Error(i(332))}}function qo(e,t){return e=Go(e),To(e,t)}function Ko(e,t,n){return e=Go(e),Co(e,t,n)}function Xo(e){return null===$o?($o=[e],Bo=Co(Io,Yo)):$o.push(e),Fo}function Qo(){if(null!==Bo){var e=Bo;Bo=null,Oo(e)}Yo()}function Yo(){if(!Ho&&null!==$o){Ho=!0;var e=0;try{var t=$o;qo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),$o=null}catch(t){throw null!==$o&&($o=$o.slice(e+1)),Co(Io,Qo),t}finally{Ho=!1}}}function Jo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Zo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ea={current:null},ta=null,na=null,ra=null;function oa(){ra=na=ta=null}function aa(e){var t=ea.current;po(ea),e.type._context._currentValue=t}function ia(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function la(e,t){ta=e,ra=na=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Ri=!0),e.firstContext=null)}function sa(e,t){if(ra!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ra=e,t=1073741823),t={context:e,observedBits:t,next:null},null===na){if(null===ta)throw Error(i(308));na=t,ta.dependencies={expirationTime:0,firstContext:t,responders:null}}else na=na.next=t;return e._currentValue}var ca=!1;function ua(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function fa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function da(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function pa(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ma(e,t){var n=e.alternate;null!==n&&fa(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function ha(e,t,n,r){var a=e.updateQueue;ca=!1;var i=a.baseQueue,l=a.shared.pending;if(null!==l){if(null!==i){var s=i.next;i.next=l.next,l.next=s}i=l,a.shared.pending=null,null!==(s=e.alternate)&&null!==(s=s.updateQueue)&&(s.baseQueue=l)}if(null!==i){s=i.next;var c=a.baseState,u=0,f=null,d=null,p=null;if(null!==s)for(var m=s;;){if((l=m.expirationTime)<r){var h={expirationTime:m.expirationTime,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null};null===p?(d=p=h,f=c):p=p.next=h,l>u&&(u=l)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:m.suspenseConfig,tag:m.tag,payload:m.payload,callback:m.callback,next:null}),xs(l,m.suspenseConfig);e:{var g=e,y=m;switch(l=t,h=n,y.tag){case 1:if("function"==typeof(g=y.payload)){c=g.call(h,c,l);break e}c=g;break e;case 3:g.effectTag=-4097&g.effectTag|64;case 0:if(null==(l="function"==typeof(g=y.payload)?g.call(h,c,l):g))break e;c=o({},c,l);break e;case 2:ca=!0}}null!==m.callback&&(e.effectTag|=32,null===(l=a.effects)?a.effects=[m]:l.push(m))}if(null===(m=m.next)||m===s){if(null===(l=a.shared.pending))break;m=i.next=l.next,l.next=s,a.baseQueue=i=l,a.shared.pending=null}}null===p?f=c:p.next=d,a.baseState=f,a.baseQueue=p,ws(u),e.expirationTime=u,e.memoizedState=c}}function ga(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(i(191,r));r.call(o)}}}var ya=Q.ReactCurrentBatchConfig,va=(new r.Component).refs;function ba(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var xa={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ls(),o=ya.suspense;(o=da(r=ss(r,e,o),o)).payload=t,null!=n&&(o.callback=n),pa(e,o),cs(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ls(),o=ya.suspense;(o=da(r=ss(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),pa(e,o),cs(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ls(),r=ya.suspense;(r=da(n=ss(n,e,r),r)).tag=2,null!=t&&(r.callback=t),pa(e,r),cs(e,n)}};function wa(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&Ur(n,r)&&Ur(o,a))}function Sa(e,t,n){var r=!1,o=ho,a=t.contextType;return"object"==typeof a&&null!==a?a=sa(a):(o=xo(t)?vo:go.current,a=(r=null!=(r=t.contextTypes))?bo(e,o):ho),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=xa,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function _a(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&xa.enqueueReplaceState(t,t.state,null)}function Ea(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=va,ua(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=sa(a):(a=xo(t)?vo:go.current,o.context=bo(e,a)),ha(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ba(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&xa.enqueueReplaceState(o,o.state,null),ha(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var ka=Array.isArray;function Ta(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===va&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Ca(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Oa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Bs(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function l(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ws(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Ta(e,t,n),r.return=e,r):((r=Hs(n.type,n.key,n.props,null,e.mode,r)).ref=Ta(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Vs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Us(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Ws(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Hs(t.type,t.key,t.props,null,e.mode,n)).ref=Ta(e,null,t),n.return=e,n;case te:return(t=Vs(t,e.mode,n)).return=e,t}if(ka(t)||he(t))return(t=Us(t,e.mode,n,null)).return=e,t;Ca(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case te:return n.key===o?u(e,t,n,r):null}if(ka(n)||he(n))return null!==o?null:f(e,t,n,r,null);Ca(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case te:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ka(r)||he(r))return f(t,e=e.get(n)||null,r,o,null);Ca(t,r)}return null}function h(o,i,l,s){for(var c=null,u=null,f=i,h=i=0,g=null;null!==f&&h<l.length;h++){f.index>h?(g=f,f=null):g=f.sibling;var y=p(o,f,l[h],s);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,h),null===u?c=y:u.sibling=y,u=y,f=g}if(h===l.length)return n(o,f),c;if(null===f){for(;h<l.length;h++)null!==(f=d(o,l[h],s))&&(i=a(f,i,h),null===u?c=f:u.sibling=f,u=f);return c}for(f=r(o,f);h<l.length;h++)null!==(g=m(f,o,h,l[h],s))&&(e&&null!==g.alternate&&f.delete(null===g.key?h:g.key),i=a(g,i,h),null===u?c=g:u.sibling=g,u=g);return e&&f.forEach((function(e){return t(o,e)})),c}function g(o,l,s,c){var u=he(s);if("function"!=typeof u)throw Error(i(150));if(null==(s=u.call(s)))throw Error(i(151));for(var f=u=null,h=l,g=l=0,y=null,v=s.next();null!==h&&!v.done;g++,v=s.next()){h.index>g?(y=h,h=null):y=h.sibling;var b=p(o,h,v.value,c);if(null===b){null===h&&(h=y);break}e&&h&&null===b.alternate&&t(o,h),l=a(b,l,g),null===f?u=b:f.sibling=b,f=b,h=y}if(v.done)return n(o,h),u;if(null===h){for(;!v.done;g++,v=s.next())null!==(v=d(o,v.value,c))&&(l=a(v,l,g),null===f?u=v:f.sibling=v,f=v);return u}for(h=r(o,h);!v.done;g++,v=s.next())null!==(v=m(h,o,g,v.value,c))&&(e&&null!==v.alternate&&h.delete(null===v.key?g:v.key),l=a(v,l,g),null===f?u=v:f.sibling=v,f=v);return e&&h.forEach((function(e){return t(o,e)})),u}return function(e,r,a,s){var c="object"==typeof a&&null!==a&&a.type===ne&&null===a.key;c&&(a=a.props.children);var u="object"==typeof a&&null!==a;if(u)switch(a.$$typeof){case ee:e:{for(u=a.key,c=r;null!==c;){if(c.key===u){if(7===c.tag){if(a.type===ne){n(e,c.sibling),(r=o(c,a.props.children)).return=e,e=r;break e}}else if(c.elementType===a.type){n(e,c.sibling),(r=o(c,a.props)).ref=Ta(e,c,a),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}a.type===ne?((r=Us(a.props.children,e.mode,s,a.key)).return=e,e=r):((s=Hs(a.type,a.key,a.props,null,e.mode,s)).ref=Ta(e,r,a),s.return=e,e=s)}return l(e);case te:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Vs(a,e.mode,s)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Ws(a,e.mode,s)).return=e,e=r),l(e);if(ka(a))return h(e,r,a,s);if(he(a))return g(e,r,a,s);if(u&&Ca(e,a),void 0===a&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Pa=Oa(!0),Na=Oa(!1),Ma={},Ia={current:Ma},Aa={current:Ma},Ra={current:Ma};function ja(e){if(e===Ma)throw Error(i(174));return e}function za(e,t){switch(mo(Ra,t),mo(Aa,e),mo(Ia,Ma),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:je(null,"");break;default:t=je(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}po(Ia),mo(Ia,t)}function Fa(){po(Ia),po(Aa),po(Ra)}function La(e){ja(Ra.current);var t=ja(Ia.current),n=je(t,e.type);t!==n&&(mo(Aa,e),mo(Ia,n))}function Da(e){Aa.current===e&&(po(Ia),po(Aa))}var $a={current:0};function Ba(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===yn||n.data===vn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ha(e,t){return{responder:e,props:t}}var Ua=Q.ReactCurrentDispatcher,Wa=Q.ReactCurrentBatchConfig,Va=0,Ga=null,qa=null,Ka=null,Xa=!1;function Qa(){throw Error(i(321))}function Ya(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Br(e[n],t[n]))return!1;return!0}function Ja(e,t,n,r,o,a){if(Va=a,Ga=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Ua.current=null===e||null===e.memoizedState?wi:Si,e=n(r,o),t.expirationTime===Va){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(i(301));a+=1,Ka=qa=null,t.updateQueue=null,Ua.current=_i,e=n(r,o)}while(t.expirationTime===Va)}if(Ua.current=xi,t=null!==qa&&null!==qa.next,Va=0,Ka=qa=Ga=null,Xa=!1,t)throw Error(i(300));return e}function Za(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ka?Ga.memoizedState=Ka=e:Ka=Ka.next=e,Ka}function ei(){if(null===qa){var e=Ga.alternate;e=null!==e?e.memoizedState:null}else e=qa.next;var t=null===Ka?Ga.memoizedState:Ka.next;if(null!==t)Ka=t,qa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(qa=e).memoizedState,baseState:qa.baseState,baseQueue:qa.baseQueue,queue:qa.queue,next:null},null===Ka?Ga.memoizedState=Ka=e:Ka=Ka.next=e}return Ka}function ti(e,t){return"function"==typeof t?t(e):t}function ni(e){var t=ei(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=qa,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var s=l=a=null,c=o;do{var u=c.expirationTime;if(u<Va){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===s?(l=s=f,a=r):s=s.next=f,u>Ga.expirationTime&&(Ga.expirationTime=u,ws(u))}else null!==s&&(s=s.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),xs(u,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==o);null===s?a=r:s.next=l,Br(r,t.memoizedState)||(Ri=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=s,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ri(e){var t=ei(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);Br(a,t.memoizedState)||(Ri=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function oi(e){var t=Za();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ti,lastRenderedState:e}).dispatch=bi.bind(null,Ga,e),[t.memoizedState,e]}function ai(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ga.updateQueue)?(t={lastEffect:null},Ga.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ii(){return ei().memoizedState}function li(e,t,n,r){var o=Za();Ga.effectTag|=e,o.memoizedState=ai(1|t,n,void 0,void 0===r?null:r)}function si(e,t,n,r){var o=ei();r=void 0===r?null:r;var a=void 0;if(null!==qa){var i=qa.memoizedState;if(a=i.destroy,null!==r&&Ya(r,i.deps))return void ai(t,n,a,r)}Ga.effectTag|=e,o.memoizedState=ai(1|t,n,a,r)}function ci(e,t){return li(516,4,e,t)}function ui(e,t){return si(516,4,e,t)}function fi(e,t){return si(4,2,e,t)}function di(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function pi(e,t,n){return n=null!=n?n.concat([e]):null,si(4,2,di.bind(null,t,e),n)}function mi(){}function hi(e,t){return Za().memoizedState=[e,void 0===t?null:t],e}function gi(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ya(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function yi(e,t){var n=ei();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ya(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function vi(e,t,n){var r=Vo();qo(98>r?98:r,(function(){e(!0)})),qo(97<r?97:r,(function(){var r=Wa.suspense;Wa.suspense=void 0===t?null:t;try{e(!1),n()}finally{Wa.suspense=r}}))}function bi(e,t,n){var r=ls(),o=ya.suspense;o={expirationTime:r=ss(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Ga||null!==a&&a===Ga)Xa=!0,o.expirationTime=Va,Ga.expirationTime=Va;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.eagerReducer=a,o.eagerState=l,Br(l,i))return}catch(e){}cs(e,r)}}var xi={readContext:sa,useCallback:Qa,useContext:Qa,useEffect:Qa,useImperativeHandle:Qa,useLayoutEffect:Qa,useMemo:Qa,useReducer:Qa,useRef:Qa,useState:Qa,useDebugValue:Qa,useResponder:Qa,useDeferredValue:Qa,useTransition:Qa},wi={readContext:sa,useCallback:hi,useContext:sa,useEffect:ci,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,li(4,2,di.bind(null,t,e),n)},useLayoutEffect:function(e,t){return li(4,2,e,t)},useMemo:function(e,t){var n=Za();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Za();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=bi.bind(null,Ga,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Za().memoizedState=e},useState:oi,useDebugValue:mi,useResponder:Ha,useDeferredValue:function(e,t){var n=oi(e),r=n[0],o=n[1];return ci((function(){var n=Wa.suspense;Wa.suspense=void 0===t?null:t;try{o(e)}finally{Wa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=oi(!1),n=t[0];return t=t[1],[hi(vi.bind(null,t,e),[t,e]),n]}},Si={readContext:sa,useCallback:gi,useContext:sa,useEffect:ui,useImperativeHandle:pi,useLayoutEffect:fi,useMemo:yi,useReducer:ni,useRef:ii,useState:function(){return ni(ti)},useDebugValue:mi,useResponder:Ha,useDeferredValue:function(e,t){var n=ni(ti),r=n[0],o=n[1];return ui((function(){var n=Wa.suspense;Wa.suspense=void 0===t?null:t;try{o(e)}finally{Wa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ni(ti),n=t[0];return t=t[1],[gi(vi.bind(null,t,e),[t,e]),n]}},_i={readContext:sa,useCallback:gi,useContext:sa,useEffect:ui,useImperativeHandle:pi,useLayoutEffect:fi,useMemo:yi,useReducer:ri,useRef:ii,useState:function(){return ri(ti)},useDebugValue:mi,useResponder:Ha,useDeferredValue:function(e,t){var n=ri(ti),r=n[0],o=n[1];return ui((function(){var n=Wa.suspense;Wa.suspense=void 0===t?null:t;try{o(e)}finally{Wa.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ri(ti),n=t[0];return t=t[1],[gi(vi.bind(null,t,e),[t,e]),n]}},Ei=null,ki=null,Ti=!1;function Ci(e,t){var n=Ds(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Oi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Pi(e){if(Ti){var t=ki;if(t){var n=t;if(!Oi(e,t)){if(!(t=kn(n.nextSibling))||!Oi(e,t))return e.effectTag=-1025&e.effectTag|2,Ti=!1,void(Ei=e);Ci(Ei,n)}Ei=e,ki=kn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ti=!1,Ei=e}}function Ni(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ei=e}function Mi(e){if(e!==Ei)return!1;if(!Ti)return Ni(e),Ti=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Sn(t,e.memoizedProps))for(t=ki;t;)Ci(e,t),t=kn(t.nextSibling);if(Ni(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===gn){if(0===t){ki=kn(e.nextSibling);break e}t--}else n!==hn&&n!==vn&&n!==yn||t++}e=e.nextSibling}ki=null}}else ki=Ei?kn(e.stateNode.nextSibling):null;return!0}function Ii(){ki=Ei=null,Ti=!1}var Ai=Q.ReactCurrentOwner,Ri=!1;function ji(e,t,n,r){t.child=null===e?Na(t,null,n,r):Pa(t,e.child,n,r)}function zi(e,t,n,r,o){n=n.render;var a=t.ref;return la(t,o),r=Ja(e,t,n,r,a,o),null===e||Ri?(t.effectTag|=1,ji(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Zi(e,t,o))}function Fi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||$s(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Hs(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Li(e,t,i,r,o,a))}return i=e.child,o<a&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:Ur)(o,r)&&e.ref===t.ref)?Zi(e,t,a):(t.effectTag|=1,(e=Bs(i,r)).ref=t.ref,e.return=t,t.child=e)}function Li(e,t,n,r,o,a){return null!==e&&Ur(e.memoizedProps,r)&&e.ref===t.ref&&(Ri=!1,o<a)?(t.expirationTime=e.expirationTime,Zi(e,t,a)):$i(e,t,n,r,a)}function Di(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function $i(e,t,n,r,o){var a=xo(n)?vo:go.current;return a=bo(t,a),la(t,o),n=Ja(e,t,n,r,a,o),null===e||Ri?(t.effectTag|=1,ji(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Zi(e,t,o))}function Bi(e,t,n,r,o){if(xo(n)){var a=!0;Eo(t)}else a=!1;if(la(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Sa(t,n,r),Ea(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,c=n.contextType;c="object"==typeof c&&null!==c?sa(c):bo(t,c=xo(n)?vo:go.current);var u=n.getDerivedStateFromProps,f="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==c)&&_a(t,i,r,c),ca=!1;var d=t.memoizedState;i.state=d,ha(t,r,i,o),s=t.memoizedState,l!==r||d!==s||yo.current||ca?("function"==typeof u&&(ba(t,n,u,r),s=t.memoizedState),(l=ca||wa(t,n,l,r,d,s,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,fa(e,t),l=t.memoizedProps,i.props=t.type===t.elementType?l:Zo(t.type,l),s=i.context,c="object"==typeof(c=n.contextType)&&null!==c?sa(c):bo(t,c=xo(n)?vo:go.current),(f="function"==typeof(u=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==c)&&_a(t,i,r,c),ca=!1,s=t.memoizedState,i.state=s,ha(t,r,i,o),d=t.memoizedState,l!==r||s!==d||yo.current||ca?("function"==typeof u&&(ba(t,n,u,r),d=t.memoizedState),(u=ca||wa(t,n,l,r,s,d,c))?(f||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,d,c),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),i.props=r,i.state=d,i.context=c,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&s===e.memoizedState||(t.effectTag|=256),r=!1);return Hi(e,t,n,r,a,o)}function Hi(e,t,n,r,o,a){Di(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&ko(t,n,!1),Zi(e,t,a);r=t.stateNode,Ai.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=Pa(t,e.child,null,a),t.child=Pa(t,null,l,a)):ji(e,t,l,a),t.memoizedState=r.state,o&&ko(t,n,!0),t.child}function Ui(e){var t=e.stateNode;t.pendingContext?So(0,t.pendingContext,t.pendingContext!==t.context):t.context&&So(0,t.context,!1),za(e,t.containerInfo)}var Wi,Vi,Gi,qi,Ki={dehydrated:null,retryTime:0};function Xi(e,t,n){var r,o=t.mode,a=t.pendingProps,i=$a.current,l=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(l=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),mo($a,1&i),null===e){if(void 0!==a.fallback&&Pi(t),l){if(l=a.fallback,(a=Us(null,o,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Us(l,o,n,null)).return=t,a.sibling=n,t.memoizedState=Ki,t.child=a,n}return o=a.children,t.memoizedState=null,t.child=Na(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,l){if(a=a.fallback,(n=Bs(e,e.pendingProps)).return=t,0==(2&t.mode)&&(l=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=l;null!==l;)l.return=n,l=l.sibling;return(o=Bs(o,a)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Ki,t.child=n,o}return n=Pa(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,l){if(l=a.fallback,(a=Us(null,o,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Us(l,o,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=Ki,t.child=a,n}return t.memoizedState=null,t.child=Pa(t,e,a.children,n)}function Qi(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ia(e.return,t)}function Yi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=o,i.lastEffect=a)}function Ji(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(ji(e,t,r.children,n),0!=(2&(r=$a.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Qi(e,n);else if(19===e.tag)Qi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(mo($a,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ba(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Yi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ba(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Yi(t,!0,n,null,a,t.lastEffect);break;case"together":Yi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Zi(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ws(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Bs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function el(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return xo(t.type)&&wo(),null;case 3:return Fa(),po(yo),po(go),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Mi(t)||(t.effectTag|=4),Vi(t),null;case 5:Da(t),n=ja(Ra.current);var a=t.type;if(null!==e&&null!=t.stateNode)Gi(e,t,a,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=ja(Ia.current),Mi(t)){r=t.stateNode,a=t.type;var l=t.memoizedProps;switch(r[On]=t,r[Pn]=l,a){case"iframe":case"object":case"embed":Gt("load",r);break;case"video":case"audio":for(e=0;e<Xe.length;e++)Gt(Xe[e],r);break;case"source":Gt("error",r);break;case"img":case"image":case"link":Gt("error",r),Gt("load",r);break;case"form":Gt("reset",r),Gt("submit",r);break;case"details":Gt("toggle",r);break;case"input":_e(r,l),Gt("invalid",r),ln(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Gt("invalid",r),ln(n,"onChange");break;case"textarea":Me(r,l),Gt("invalid",r),ln(n,"onChange")}for(var s in rn(a,l),e=null,l)if(l.hasOwnProperty(s)){var c=l[s];"children"===s?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):E.hasOwnProperty(s)&&null!=c&&ln(n,s)}switch(a){case"input":xe(r),Te(r,l,!0);break;case"textarea":xe(r),Ae(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=sn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(s=9===n.nodeType?n:n.ownerDocument,e===an&&(e=Re(a)),e===an?"script"===a?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(a,{is:r.is}):(e=s.createElement(a),"select"===a&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,a),e[On]=t,e[Pn]=r,Wi(e,t,!1,!1),t.stateNode=e,s=on(a,r),a){case"iframe":case"object":case"embed":Gt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Xe.length;c++)Gt(Xe[c],e);c=r;break;case"source":Gt("error",e),c=r;break;case"img":case"image":case"link":Gt("error",e),Gt("load",e),c=r;break;case"form":Gt("reset",e),Gt("submit",e),c=r;break;case"details":Gt("toggle",e),c=r;break;case"input":_e(e,r),c=Se(e,r),Gt("invalid",e),ln(n,"onChange");break;case"option":c=Oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=o({},r,{value:void 0}),Gt("invalid",e),ln(n,"onChange");break;case"textarea":Me(e,r),c=Ne(e,r),Gt("invalid",e),ln(n,"onChange");break;default:c=r}rn(a,c);var u=c;for(l in u)if(u.hasOwnProperty(l)){var f=u[l];"style"===l?tn(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&Le(e,f):"children"===l?"string"==typeof f?("textarea"!==a||""!==f)&&De(e,f):"number"==typeof f&&De(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?null!=f&&ln(n,l):null!=f&&Y(e,l,f,s))}switch(a){case"input":xe(e),Te(e,r,!1);break;case"textarea":xe(e),Ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ve(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Pe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Pe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=sn)}wn(a,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)qi(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=ja(Ra.current),ja(Ia.current),Mi(t)?(n=t.stateNode,r=t.memoizedProps,n[On]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[On]=t,t.stateNode=n)}return null;case 13:return po($a),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Mi(t):(r=null!==(a=e.memoizedState),n||null===a||null!==(a=e.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=a,a.nextEffect=l):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&$a.current)?Bl===Ml&&(Bl=Rl):(Bl!==Ml&&Bl!==Rl||(Bl=jl),0!==Gl&&null!==Ll&&(Ks(Ll,$l),Xs(Ll,Gl)))),(n||r)&&(t.effectTag|=4),null);case 4:return Fa(),Vi(t),null;case 10:return aa(t),null;case 19:if(po($a),null===(r=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(l=r.rendering)){if(a)el(r,!1);else if(Bl!==Ml||null!==e&&0!=(64&e.effectTag))for(l=t.child;null!==l;){if(null!==(e=Ba(l))){for(t.effectTag|=64,el(r,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)l=n,(a=r).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=l,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,l=e.dependencies,a.dependencies=null===l?null:{expirationTime:l.expirationTime,firstContext:l.firstContext,responders:l.responders}),r=r.sibling;return mo($a,1&$a.current|2),t.child}l=l.sibling}}else{if(!a)if(null!==(e=Ba(l))){if(t.effectTag|=64,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wo()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,a=!0,el(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Wo()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wo(),n.sibling=null,t=$a.current,mo($a,a?1&t|2:1&t),n):null}throw Error(i(156,t.tag))}function nl(e){switch(e.tag){case 1:xo(e.type)&&wo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Fa(),po(yo),po(go),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Da(e),null;case 13:return po($a),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return po($a),null;case 4:return Fa(),null;case 10:return aa(e),null;default:return null}}function rl(e,t){return{value:e,source:t,stack:ye(t)}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Vi=function(){},Gi=function(e,t,n,r,a){var i=e.memoizedProps;if(i!==r){var l,s,c=t.stateNode;switch(ja(Ia.current),e=null,n){case"input":i=Se(c,i),r=Se(c,r),e=[];break;case"option":i=Oe(c,i),r=Oe(c,r),e=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":i=Ne(c,i),r=Ne(c,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(c.onclick=sn)}for(l in rn(n,r),n=null,i)if(!r.hasOwnProperty(l)&&i.hasOwnProperty(l)&&null!=i[l])if("style"===l)for(s in c=i[l])c.hasOwnProperty(s)&&(n||(n={}),n[s]="");else"dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?e||(e=[]):(e=e||[]).push(l,null));for(l in r){var u=r[l];if(c=null!=i?i[l]:void 0,r.hasOwnProperty(l)&&u!==c&&(null!=u||null!=c))if("style"===l)if(c){for(s in c)!c.hasOwnProperty(s)||u&&u.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in u)u.hasOwnProperty(s)&&c[s]!==u[s]&&(n||(n={}),n[s]=u[s])}else n||(e||(e=[]),e.push(l,n)),n=u;else"dangerouslySetInnerHTML"===l?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(e=e||[]).push(l,u)):"children"===l?c===u||"string"!=typeof u&&"number"!=typeof u||(e=e||[]).push(l,""+u):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(E.hasOwnProperty(l)?(null!=u&&ln(a,l),e||c===u||(e=[])):(e=e||[]).push(l,u))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},qi=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var ol="function"==typeof WeakSet?WeakSet:Set;function al(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&ge(n.type),t=t.value,null!==e&&1===e.tag&&ge(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function il(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){As(e,t)}else t.current=null}function ll(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 3:case 5:case 6:case 4:case 17:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Zo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return}throw Error(i(163))}function sl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function cl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ul(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void cl(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Zo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&ga(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}ga(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&wn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&jt(n)))))}throw Error(i(163))}function fl(e,t,n){switch("function"==typeof Fs&&Fs(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;qo(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){As(o,e)}}e=e.next}while(e!==r)}))}break;case 1:il(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){As(e,t)}}(t,n);break;case 5:il(t);break;case 4:yl(e,t,n)}}function dl(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&dl(t)}function pl(e){return 5===e.tag||3===e.tag||4===e.tag}function ml(e){e:{for(var t=e.return;null!==t;){if(pl(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(De(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||pl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?hl(e,n,t):gl(e,n,t)}function hl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=sn));else if(4!==r&&null!==(e=e.child))for(hl(e,t,n),e=e.sibling;null!==e;)hl(e,t,n),e=e.sibling}function gl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function yl(e,t,n){for(var r,o,a=t,l=!1;;){if(!l){l=a.return;e:for(;;){if(null===l)throw Error(i(160));switch(r=l.stateNode,l.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}l=l.return}l=!0}if(5===a.tag||6===a.tag){e:for(var s=e,c=a,u=n,f=c;;)if(fl(s,f,u),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(s=r,c=a.stateNode,8===s.nodeType?s.parentNode.removeChild(c):s.removeChild(c)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,o=!0,a.child.return=a,a=a.child;continue}}else if(fl(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(l=!1)}a.sibling.return=a.return,a=a.sibling}}function vl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void sl(3,t);case 1:case 12:case 17:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Pn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ee(n,r),on(e,o),t=on(e,r),o=0;o<a.length;o+=2){var l=a[o],s=a[o+1];"style"===l?tn(n,s):"dangerouslySetInnerHTML"===l?Le(n,s):"children"===l?De(n,s):Y(n,l,s,t)}switch(e){case"input":ke(n,r);break;case"textarea":Ie(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Pe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Pe(n,!!r.multiple,r.defaultValue,!0):Pe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,jt(t.containerInfo)));case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Kl=Wo()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,a.style.display=en("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void bl(t);case 19:return void bl(t)}throw Error(i(163))}function bl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ol),t.forEach((function(t){var r=js.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var xl="function"==typeof WeakMap?WeakMap:Map;function wl(e,t,n){(n=da(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Yl||(Yl=!0,Jl=r),al(e,t)},n}function Sl(e,t,n){(n=da(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return al(e,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Zl?Zl=new Set([this]):Zl.add(this),al(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var _l,El=Math.ceil,kl=Q.ReactCurrentDispatcher,Tl=Q.ReactCurrentOwner,Cl=0,Ol=8,Pl=16,Nl=32,Ml=0,Il=1,Al=2,Rl=3,jl=4,zl=5,Fl=Cl,Ll=null,Dl=null,$l=0,Bl=Ml,Hl=null,Ul=1073741823,Wl=1073741823,Vl=null,Gl=0,ql=!1,Kl=0,Xl=500,Ql=null,Yl=!1,Jl=null,Zl=null,es=!1,ts=null,ns=90,rs=null,os=0,as=null,is=0;function ls(){return(Fl&(Pl|Nl))!==Cl?1073741821-(Wo()/10|0):0!==is?is:is=1073741821-(Wo()/10|0)}function ss(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Vo();if(0==(4&t))return 99===r?1073741823:1073741822;if((Fl&Pl)!==Cl)return $l;if(null!==n)e=Jo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Jo(e,150,100);break;case 97:case 96:e=Jo(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Ll&&e===$l&&--e,e}function cs(e,t){if(50<os)throw os=0,as=null,Error(i(185));if(null!==(e=us(e,t))){var n=Vo();1073741823===t?(Fl&Ol)!==Cl&&(Fl&(Pl|Nl))===Cl?ms(e):(ds(e),Fl===Cl&&Qo()):ds(e),(4&Fl)===Cl||98!==n&&99!==n||(null===rs?rs=new Map([[e,t]]):(void 0===(n=rs.get(e))||n>t)&&rs.set(e,t))}}function us(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Ll===o&&(ws(t),Bl===jl&&Ks(o,$l)),Xs(o,t)),o}function fs(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!qs(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function ds(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Xo(ms.bind(null,e));else{var t=fs(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=ls();if(r=1073741823===t?99:1===t||2===t?95:0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Fo&&Oo(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Xo(ms.bind(null,e)):Ko(r,ps.bind(null,e),{timeout:10*(1073741821-t)-Wo()}),e.callbackNode=t}}}function ps(e,t){if(is=0,t)return Qs(e,t=ls()),ds(e),null;var n=fs(e);if(0!==n){if(t=e.callbackNode,(Fl&(Pl|Nl))!==Cl)throw Error(i(327));if(Ns(),e===Ll&&n===$l||ys(e,n),null!==Dl){var r=Fl;Fl|=Pl;for(var o=bs();;)try{_s();break}catch(t){vs(e,t)}if(oa(),Fl=r,kl.current=o,Bl===Il)throw t=Hl,ys(e,n),Ks(e,n),ds(e),t;if(null===Dl)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Bl,Ll=null,r){case Ml:case Il:throw Error(i(345));case Al:Qs(e,2<n?2:n);break;case Rl:if(Ks(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Ts(o)),1073741823===Ul&&10<(o=Kl+Xl-Wo())){if(ql){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,ys(e,n);break}}if(0!==(a=fs(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=_n(Cs.bind(null,e),o);break}Cs(e);break;case jl:if(Ks(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Ts(o)),ql&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,ys(e,n);break}if(0!==(o=fs(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Wl?r=10*(1073741821-Wl)-Wo():1073741823===Ul?r=0:(r=10*(1073741821-Ul)-5e3,0>(r=(o=Wo())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*El(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=_n(Cs.bind(null,e),r);break}Cs(e);break;case zl:if(1073741823!==Ul&&null!==Vl){a=Ul;var l=Vl;if(0>=(r=0|l.busyMinDurationMs)?r=0:(o=0|l.busyDelayMs,r=(a=Wo()-(10*(1073741821-a)-(0|l.timeoutMs||5e3)))<=o?0:o+r-a),10<r){Ks(e,n),e.timeoutHandle=_n(Cs.bind(null,e),r);break}}Cs(e);break;default:throw Error(i(329))}if(ds(e),e.callbackNode===t)return ps.bind(null,e)}}return null}function ms(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,(Fl&(Pl|Nl))!==Cl)throw Error(i(327));if(Ns(),e===Ll&&t===$l||ys(e,t),null!==Dl){var n=Fl;Fl|=Pl;for(var r=bs();;)try{Ss();break}catch(t){vs(e,t)}if(oa(),Fl=n,kl.current=r,Bl===Il)throw n=Hl,ys(e,t),Ks(e,t),ds(e),n;if(null!==Dl)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Ll=null,Cs(e),ds(e)}return null}function hs(e,t){var n=Fl;Fl|=1;try{return e(t)}finally{(Fl=n)===Cl&&Qo()}}function gs(e,t){var n=Fl;Fl&=-2,Fl|=Ol;try{return e(t)}finally{(Fl=n)===Cl&&Qo()}}function ys(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,En(n)),null!==Dl)for(n=Dl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&wo();break;case 3:Fa(),po(yo),po(go);break;case 5:Da(r);break;case 4:Fa();break;case 13:case 19:po($a);break;case 10:aa(r)}n=n.return}Ll=e,Dl=Bs(e.current,null),$l=t,Bl=Ml,Hl=null,Wl=Ul=1073741823,Vl=null,Gl=0,ql=!1}function vs(e,t){for(;;){try{if(oa(),Ua.current=xi,Xa)for(var n=Ga.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Va=0,Ka=qa=Ga=null,Xa=!1,null===Dl||null===Dl.return)return Bl=Il,Hl=t,Dl=null;e:{var o=e,a=Dl.return,i=Dl,l=t;if(t=$l,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var s=l;if(0==(2&i.mode)){var c=i.alternate;c?(i.updateQueue=c.updateQueue,i.memoizedState=c.memoizedState,i.expirationTime=c.expirationTime):(i.updateQueue=null,i.memoizedState=null)}var u=0!=(1&$a.current),f=a;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var m=f.memoizedProps;d=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!u)}}if(d){var h=f.updateQueue;if(null===h){var g=new Set;g.add(s),f.updateQueue=g}else h.add(s);if(0==(2&f.mode)){if(f.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var y=da(1073741823,null);y.tag=2,pa(i,y)}i.expirationTime=1073741823;break e}l=void 0,i=t;var v=o.pingCache;if(null===v?(v=o.pingCache=new xl,l=new Set,v.set(s,l)):void 0===(l=v.get(s))&&(l=new Set,v.set(s,l)),!l.has(i)){l.add(i);var b=Rs.bind(null,o,s,i);s.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);l=Error((ge(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(i))}Bl!==zl&&(Bl=Al),l=rl(l,i),f=a;do{switch(f.tag){case 3:s=l,f.effectTag|=4096,f.expirationTime=t,ma(f,wl(f,s,t));break e;case 1:s=l;var x=f.type,w=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof x.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Zl||!Zl.has(w)))){f.effectTag|=4096,f.expirationTime=t,ma(f,Sl(f,s,t));break e}}f=f.return}while(null!==f)}Dl=ks(Dl)}catch(e){t=e;continue}break}}function bs(){var e=kl.current;return kl.current=xi,null===e?xi:e}function xs(e,t){e<Ul&&2<e&&(Ul=e),null!==t&&e<Wl&&2<e&&(Wl=e,Vl=t)}function ws(e){e>Gl&&(Gl=e)}function Ss(){for(;null!==Dl;)Dl=Es(Dl)}function _s(){for(;null!==Dl&&!Lo();)Dl=Es(Dl)}function Es(e){var t=_l(e.alternate,e,$l);return e.memoizedProps=e.pendingProps,null===t&&(t=ks(e)),Tl.current=null,t}function ks(e){Dl=e;do{var t=Dl.alternate;if(e=Dl.return,0==(2048&Dl.effectTag)){if(t=tl(t,Dl,$l),1===$l||1!==Dl.childExpirationTime){for(var n=0,r=Dl.child;null!==r;){var o=r.expirationTime,a=r.childExpirationTime;o>n&&(n=o),a>n&&(n=a),r=r.sibling}Dl.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Dl.firstEffect),null!==Dl.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Dl.firstEffect),e.lastEffect=Dl.lastEffect),1<Dl.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Dl:e.firstEffect=Dl,e.lastEffect=Dl))}else{if(null!==(t=nl(Dl)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Dl.sibling))return t;Dl=e}while(null!==Dl);return Bl===Ml&&(Bl=zl),null}function Ts(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function Cs(e){var t=Vo();return qo(99,Os.bind(null,e,t)),null}function Os(e,t){do{Ns()}while(null!==ts);if((Fl&(Pl|Nl))!==Cl)throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=Ts(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Ll&&(Dl=Ll=null,$l=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var a=Fl;Fl|=Nl,Tl.current=null,bn=Vt;var l=pn();if(mn(l)){if("selectionStart"in l)var s={start:l.selectionStart,end:l.selectionEnd};else e:{var c=(s=(s=l.ownerDocument)&&s.defaultView||window).getSelection&&s.getSelection();if(c&&0!==c.rangeCount){s=c.anchorNode;var u=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{s.nodeType,f.nodeType}catch(e){s=null;break e}var d=0,p=-1,m=-1,h=0,g=0,y=l,v=null;t:for(;;){for(var b;y!==s||0!==u&&3!==y.nodeType||(p=d+u),y!==f||0!==c&&3!==y.nodeType||(m=d+c),3===y.nodeType&&(d+=y.nodeValue.length),null!==(b=y.firstChild);)v=y,y=b;for(;;){if(y===l)break t;if(v===s&&++h===u&&(p=d),v===f&&++g===c&&(m=d),null!==(b=y.nextSibling))break;v=(y=v).parentNode}y=b}s=-1===p||-1===m?null:{start:p,end:m}}else s=null}s=s||{start:0,end:0}}else s=null;xn={activeElementDetached:null,focusedElem:l,selectionRange:s},Vt=!1,Ql=o;do{try{Ps()}catch(e){if(null===Ql)throw Error(i(330));As(Ql,e),Ql=Ql.nextEffect}}while(null!==Ql);Ql=o;do{try{for(l=e,s=t;null!==Ql;){var x=Ql.effectTag;if(16&x&&De(Ql.stateNode,""),128&x){var w=Ql.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&x){case 2:ml(Ql),Ql.effectTag&=-3;break;case 6:ml(Ql),Ql.effectTag&=-3,vl(Ql.alternate,Ql);break;case 1024:Ql.effectTag&=-1025;break;case 1028:Ql.effectTag&=-1025,vl(Ql.alternate,Ql);break;case 4:vl(Ql.alternate,Ql);break;case 8:yl(l,u=Ql,s),dl(u)}Ql=Ql.nextEffect}}catch(e){if(null===Ql)throw Error(i(330));As(Ql,e),Ql=Ql.nextEffect}}while(null!==Ql);if(S=xn,w=pn(),x=S.focusedElem,s=S.selectionRange,w!==x&&x&&x.ownerDocument&&dn(x.ownerDocument.documentElement,x)){null!==s&&mn(x)&&(w=s.start,void 0===(S=s.end)&&(S=w),"selectionStart"in x?(x.selectionStart=w,x.selectionEnd=Math.min(S,x.value.length)):(S=(w=x.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),u=x.textContent.length,l=Math.min(s.start,u),s=void 0===s.end?l:Math.min(s.end,u),!S.extend&&l>s&&(u=s,s=l,l=u),u=fn(x,l),f=fn(x,s),u&&f&&(1!==S.rangeCount||S.anchorNode!==u.node||S.anchorOffset!==u.offset||S.focusNode!==f.node||S.focusOffset!==f.offset)&&((w=w.createRange()).setStart(u.node,u.offset),S.removeAllRanges(),l>s?(S.addRange(w),S.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),S.addRange(w))))),w=[];for(S=x;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof x.focus&&x.focus(),x=0;x<w.length;x++)(S=w[x]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Vt=!!bn,xn=bn=null,e.current=n,Ql=o;do{try{for(x=e;null!==Ql;){var _=Ql.effectTag;if(36&_&&ul(x,Ql.alternate,Ql),128&_){w=void 0;var E=Ql.ref;if(null!==E){var k=Ql.stateNode;Ql.tag,w=k,"function"==typeof E?E(w):E.current=w}}Ql=Ql.nextEffect}}catch(e){if(null===Ql)throw Error(i(330));As(Ql,e),Ql=Ql.nextEffect}}while(null!==Ql);Ql=null,Do(),Fl=a}else e.current=n;if(es)es=!1,ts=e,ns=t;else for(Ql=o;null!==Ql;)t=Ql.nextEffect,Ql.nextEffect=null,Ql=t;if(0===(t=e.firstPendingTime)&&(Zl=null),1073741823===t?e===as?os++:(os=0,as=e):os=0,"function"==typeof zs&&zs(n.stateNode,r),ds(e),Yl)throw Yl=!1,e=Jl,Jl=null,e;return(Fl&Ol)!==Cl||Qo(),null}function Ps(){for(;null!==Ql;){var e=Ql.effectTag;0!=(256&e)&&ll(Ql.alternate,Ql),0==(512&e)||es||(es=!0,Ko(97,(function(){return Ns(),null}))),Ql=Ql.nextEffect}}function Ns(){if(90!==ns){var e=97<ns?97:ns;return ns=90,qo(e,Ms)}}function Ms(){if(null===ts)return!1;var e=ts;if(ts=null,(Fl&(Pl|Nl))!==Cl)throw Error(i(331));var t=Fl;for(Fl|=Nl,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:sl(5,n),cl(5,n)}}catch(t){if(null===e)throw Error(i(330));As(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Fl=t,Qo(),!0}function Is(e,t,n){pa(e,t=wl(e,t=rl(n,t),1073741823)),null!==(e=us(e,1073741823))&&ds(e)}function As(e,t){if(3===e.tag)Is(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Is(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Zl||!Zl.has(r))){pa(n,e=Sl(n,e=rl(t,e),1073741823)),null!==(n=us(n,1073741823))&&ds(n);break}}n=n.return}}function Rs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Ll===e&&$l===n?Bl===jl||Bl===Rl&&1073741823===Ul&&Wo()-Kl<Xl?ys(e,$l):ql=!0:qs(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,ds(e)))}function js(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(t=ss(t=ls(),e,null)),null!==(e=us(e,t))&&ds(e)}_l=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||yo.current)Ri=!0;else{if(r<n){switch(Ri=!1,t.tag){case 3:Ui(t),Ii();break;case 5:if(La(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:xo(t.type)&&Eo(t);break;case 4:za(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,mo(ea,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Xi(e,t,n):(mo($a,1&$a.current),null!==(t=Zi(e,t,n))?t.sibling:null);mo($a,1&$a.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Ji(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),mo($a,$a.current),!r)return null}return Zi(e,t,n)}Ri=!1}}else Ri=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=bo(t,go.current),la(t,n),o=Ja(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,xo(r)){var a=!0;Eo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ua(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&ba(t,r,l,e),o.updater=xa,t.stateNode=o,o._reactInternalFiber=t,Ea(t,r,e,n),t=Hi(null,t,r,!0,a,n)}else t.tag=0,ji(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return $s(e)?1:0;if(null!=e){if((e=e.$$typeof)===se)return 11;if(e===fe)return 14}return 2}(o),e=Zo(o,e),a){case 0:t=$i(null,t,o,e,n);break e;case 1:t=Bi(null,t,o,e,n);break e;case 11:t=zi(null,t,o,e,n);break e;case 14:t=Fi(null,t,o,Zo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,$i(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Bi(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 3:if(Ui(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,fa(e,t),ha(t,r,null,n),(r=t.memoizedState.element)===o)Ii(),t=Zi(e,t,n);else{if((o=t.stateNode.hydrate)&&(ki=kn(t.stateNode.containerInfo.firstChild),Ei=t,o=Ti=!0),o)for(n=Na(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else ji(e,t,r,n),Ii();t=t.child}return t;case 5:return La(t),null===e&&Pi(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,Sn(r,o)?l=null:null!==a&&Sn(r,a)&&(t.effectTag|=16),Di(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ji(e,t,l,n),t=t.child),t;case 6:return null===e&&Pi(t),null;case 13:return Xi(e,t,n);case 4:return za(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Pa(t,null,r,n):ji(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,zi(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 7:return ji(e,t,t.pendingProps,n),t.child;case 8:case 12:return ji(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var s=t.type._context;if(mo(ea,s._currentValue),s._currentValue=a,null!==l)if(s=l.value,0==(a=Br(s,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(s,a):1073741823))){if(l.children===o.children&&!yo.current){t=Zi(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){var c=s.dependencies;if(null!==c){l=s.child;for(var u=c.firstContext;null!==u;){if(u.context===r&&0!=(u.observedBits&a)){1===s.tag&&((u=da(n,null)).tag=2,pa(s,u)),s.expirationTime<n&&(s.expirationTime=n),null!==(u=s.alternate)&&u.expirationTime<n&&(u.expirationTime=n),ia(s.return,n),c.expirationTime<n&&(c.expirationTime=n);break}u=u.next}}else l=10===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}ji(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,la(t,n),r=r(o=sa(o,a.unstable_observedBits)),t.effectTag|=1,ji(e,t,r,n),t.child;case 14:return a=Zo(o=t.type,t.pendingProps),Fi(e,t,o,a=Zo(o.type,a),r,n);case 15:return Li(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Zo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,xo(r)?(e=!0,Eo(t)):e=!1,la(t,n),Sa(t,r,o),Ea(t,r,o,n),Hi(null,t,r,!0,e,n);case 19:return Ji(e,t,n)}throw Error(i(156,t.tag))};var zs=null,Fs=null;function Ls(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Ds(e,t,n,r){return new Ls(e,t,n,r)}function $s(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bs(e,t){var n=e.alternate;return null===n?((n=Ds(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Hs(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)$s(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case ne:return Us(n.children,o,a,t);case le:l=8,o|=7;break;case re:l=8,o|=1;break;case oe:return(e=Ds(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=a,e;case ce:return(e=Ds(13,n,t,o)).type=ce,e.elementType=ce,e.expirationTime=a,e;case ue:return(e=Ds(19,n,t,o)).elementType=ue,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ae:l=10;break e;case ie:l=9;break e;case se:l=11;break e;case fe:l=14;break e;case de:l=16,r=null;break e;case pe:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ds(l,n,t,o)).elementType=e,t.type=r,t.expirationTime=a,t}function Us(e,t,n,r){return(e=Ds(7,e,r,t)).expirationTime=n,e}function Ws(e,t,n){return(e=Ds(6,e,null,t)).expirationTime=n,e}function Vs(e,t,n){return(t=Ds(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Gs(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function qs(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Ks(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Xs(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Qs(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Ys(e,t,n,r){var o=t.current,a=ls(),l=ya.suspense;a=ss(a,o,l);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var s=n;do{switch(s.tag){case 3:s=s.stateNode.context;break t;case 1:if(xo(s.type)){s=s.stateNode.__reactInternalMemoizedMergedChildContext;break t}}s=s.return}while(null!==s);throw Error(i(171))}if(1===n.tag){var c=n.type;if(xo(c)){n=_o(n,c,s);break e}}n=s}else n=ho;return null===t.context?t.context=n:t.pendingContext=n,(t=da(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),pa(o,t),cs(o,a),a}function Js(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Zs(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function ec(e,t){Zs(e,t),(e=e.alternate)&&Zs(e,t)}function tc(e,t,n){var r=new Gs(e,t,n=null!=n&&!0===n.hydrate),o=Ds(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,ua(o),e[Nn]=r.current,n&&0!==t&&function(e,t){var n=Ye(t);kt.forEach((function(e){pt(e,t,n)})),Tt.forEach((function(e){pt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function nc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rc(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Js(i);l.call(e)}}Ys(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tc(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var s=o;o=function(){var e=Js(i);s.call(e)}}gs((function(){Ys(t,i,e,o)}))}return Js(i)}function oc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nc(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}tc.prototype.render=function(e){Ys(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ys(null,e,null,(function(){t[Nn]=null}))},mt=function(e){if(13===e.tag){var t=Jo(ls(),150,100);cs(e,t),ec(e,t)}},ht=function(e){13===e.tag&&(cs(e,3),ec(e,3))},gt=function(e){if(13===e.tag){var t=ls();cs(e,t=ss(t,e,null)),ec(e,t)}},O=function(e,t,n){switch(t){case"input":if(ke(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Rn(r);if(!o)throw Error(i(90));we(r),ke(r,o)}}}break;case"textarea":Ie(e,n);break;case"select":null!=(t=n.value)&&Pe(e,!!n.multiple,t,!1)}},R=hs,j=function(e,t,n,r,o){var a=Fl;Fl|=4;try{return qo(98,e.bind(null,t,n,r,o))}finally{(Fl=a)===Cl&&Qo()}},z=function(){(Fl&(1|Pl|Nl))===Cl&&(function(){if(null!==rs){var e=rs;rs=null,e.forEach((function(e,t){Qs(t,e),ds(t)})),Qo()}}(),Ns())},F=function(e,t){var n=Fl;Fl|=2;try{return e(t)}finally{(Fl=n)===Cl&&Qo()}};var ac={Events:[In,An,Rn,T,_,Bn,function(e){rt(e,$n)},I,A,Qt,it,Ns,{current:!1}]};!function(e){var t=e.findFiberByHostInstance;!function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);zs=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Fs=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},e,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Q.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=tt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:Mn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ac,t.createPortal=oc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=tt(t))?null:e.stateNode},t.flushSync=function(e,t){if((Fl&(Pl|Nl))!==Cl)throw Error(i(187));var n=Fl;Fl|=1;try{return qo(99,e.bind(null,t))}finally{Fl=n,Qo()}},t.hydrate=function(e,t,n){if(!nc(t))throw Error(i(200));return rc(null,e,t,!0,n)},t.render=function(e,t,n){if(!nc(t))throw Error(i(200));return rc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nc(e))throw Error(i(40));return!!e._reactRootContainer&&(gs((function(){rc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Nn]=null}))})),!0)},t.unstable_batchedUpdates=hs,t.unstable_createPortal=function(e,t){return oc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nc(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return rc(e,t,n,!1,r)},t.version="16.13.1"},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},2799:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,v=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,x=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case f:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case c:case d:case g:case h:case s:return e;default:return t}}case o:return t}}}function S(e){return w(e)===f}t.AsyncMode=u,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=s,t.Element=r,t.ForwardRef=d,t.Fragment=a,t.Lazy=g,t.Memo=h,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||w(e)===u},t.isConcurrentMode=S,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===d},t.isFragment=function(e){return w(e)===a},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===h},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===i},t.isSuspense=function(e){return w(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===f||e===l||e===i||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===s||e.$$typeof===c||e.$$typeof===d||e.$$typeof===v||e.$$typeof===b||e.$$typeof===x||e.$$typeof===y)},t.typeOf=w},4363:(e,t,n)=>{"use strict";e.exports=n(2799)},5287:(e,t,n)=>{"use strict";var r=n(5228),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,u=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,p=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,h=o?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function x(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||v}function w(){}function S(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||v}x.prototype.isReactComponent={},x.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=x.prototype;var _=S.prototype=new w;_.constructor=S,r(_,x.prototype),_.isPureReactComponent=!0;var E={current:null},k=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)k.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:E.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var P=/\/+/g,N=[];function M(e,t,n,r){if(N.length){var o=N.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function A(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var l=!1;if(null===e)l=!0;else switch(o){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case a:case i:l=!0}}if(l)return n(r,e,""===t?"."+j(e,0):t),1;if(l=0,t=""===t?".":t+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=t+j(o=e[s],s);l+=A(o,c,n,r)}else if("function"==typeof(c=null===e||"object"!=typeof e?null:"function"==typeof(c=g&&e[g]||e["@@iterator"])?c:null))for(e=c.call(e),s=0;!(o=e.next()).done;)l+=A(o=o.value,c=t+j(o,s++),n,r);else if("object"===o)throw n=""+e,Error(y(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return l}function R(e,t,n){return null==e?0:A(e,"",t,n)}function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function z(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(O(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(P,"$&/")+"/"),R(e,F,t=M(t,a,r,o)),I(t)}var D={current:null};function $(){var e=D.current;if(null===e)throw Error(y(321));return e}var B={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:E,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,z,t=M(null,null,t,n)),I(t)},count:function(e){return R(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!O(e))throw Error(y(143));return e}},t.Component=x,t.Fragment=l,t.Profiler=c,t.PureComponent=S,t.StrictMode=s,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var o=r({},e.props),i=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=E.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)k.call(t,u)&&!T.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){c=Array(u);for(var f=0;f<u;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return $().useCallback(e,t)},t.useContext=function(e,t){return $().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return $().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return $().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return $().useLayoutEffect(e,t)},t.useMemo=function(e,t){return $().useMemo(e,t)},t.useReducer=function(e,t,n){return $().useReducer(e,t,n)},t.useRef=function(e){return $().useRef(e)},t.useState=function(e){return $().useState(e)},t.version="16.13.1"},6540:(e,t,n)=>{"use strict";e.exports=n(5287)},7463:(e,t)=>{"use strict";var n,r,o,a,i;if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,s=null,c=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(c,0),e}},u=Date.now();t.unstable_now=function(){return Date.now()-u},n=function(e){null!==l?setTimeout(n,0,e):(l=e,setTimeout(c,0))},r=function(e,t){s=setTimeout(e,t)},o=function(){clearTimeout(s)},a=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,d=window.Date,p=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var g=d.now();t.unstable_now=function(){return d.now()-g}}var y=!1,v=null,b=-1,x=5,w=0;a=function(){return t.unstable_now()>=w},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,_=S.port2;S.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();w=e+x;try{v(!0,e)?_.postMessage(null):(y=!1,v=null)}catch(e){throw _.postMessage(null),e}}else y=!1},n=function(e){v=e,y||(y=!0,_.postMessage(null))},r=function(e,n){b=p((function(){e(t.unstable_now())}),n)},o=function(){m(b),b=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,s=e[l];if(void 0!==i&&0>C(i,n))void 0!==s&&0>C(s,i)?(e[r]=s,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==s&&0>C(s,n)))break e;e[r]=s,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],P=[],N=1,M=null,I=3,A=!1,R=!1,j=!1;function z(e){for(var t=k(P);null!==t;){if(null===t.callback)T(P);else{if(!(t.startTime<=e))break;T(P),t.sortIndex=t.expirationTime,E(O,t)}t=k(P)}}function F(e){if(j=!1,z(e),!R)if(null!==k(O))R=!0,n(L);else{var t=k(P);null!==t&&r(F,t.startTime-e)}}function L(e,n){R=!1,j&&(j=!1,o()),A=!0;var i=I;try{for(z(n),M=k(O);null!==M&&(!(M.expirationTime>n)||e&&!a());){var l=M.callback;if(null!==l){M.callback=null,I=M.priorityLevel;var s=l(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?M.callback=s:M===k(O)&&T(O),z(n)}else T(O);M=k(O)}if(null!==M)var c=!0;else{var u=k(P);null!==u&&r(F,u.startTime-n),c=!1}return c}finally{M=null,I=i,A=!1}}function D(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var $=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){R||A||(R=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return I},t.unstable_getFirstCallbackNode=function(){return k(O)},t.unstable_next=function(e){switch(I){case 1:case 2:case 3:var t=3;break;default:t=I}var n=I;I=t;try{return e()}finally{I=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=$,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=I;I=e;try{return t()}finally{I=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();if("object"==typeof i&&null!==i){var s=i.delay;s="number"==typeof s&&0<s?l+s:l,i="number"==typeof i.timeout?i.timeout:D(e)}else i=D(e),s=l;return e={id:N++,callback:a,priorityLevel:e,startTime:s,expirationTime:i=s+i,sortIndex:-1},s>l?(e.sortIndex=s,E(P,e),null===k(O)&&e===k(P)&&(j?o():j=!0,r(F,s-l))):(e.sortIndex=i,E(O,e),R||A||(R=!0,n(L))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();z(e);var n=k(O);return n!==M&&null!==M&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<M.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=I;return function(){var n=I;I=t;try{return e.apply(this,arguments)}finally{I=n}}}},9982:(e,t,n)=>{"use strict";e.exports=n(7463)},9423:(e,t,n)=>{"use strict";n.d(t,{A:()=>r}),e=n.hmd(e);const r=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)},6942:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e="",t=0;t<arguments.length;t++){var n=arguments[t];n&&(e=i(e,a(n)))}return e}function a(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return o.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var n in e)r.call(e,n)&&e[n]&&(t=i(t,n));return t}function i(e,t){return t?e?e+" "+t:e+t:e}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={id:e,loaded:!1,exports:{}};return n[e](a,a.exports,o),a.loaded=!0,a.exports}o.m=n,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var a=Object.create(null);o.r(a);var i={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>i[e]=()=>n[e]));return i.default=()=>n,o.d(a,i),a},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.u=e=>e+".app.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),o.b=document.baseURI||self.location.href,(()=>{"use strict";var e={};o.r(e),o.d(e,{hasBrowserEnv:()=>nn,hasStandardBrowserEnv:()=>rn,hasStandardBrowserWebWorkerEnv:()=>an});var t,n,r,a,i=o(9423),l=function(){return Math.random().toString(36).substring(7).split("").join(".")},s={INIT:"@@redux/INIT"+l(),REPLACE:"@@redux/REPLACE"+l(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+l()}};function c(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(c)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var o=e,a=t,l=[],u=l,f=!1;function d(){u===l&&(u=l.slice())}function p(){if(f)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function m(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(f)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return d(),u.push(e),function(){if(t){if(f)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,d();var n=u.indexOf(e);u.splice(n,1),l=null}}}function h(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(f)throw new Error("Reducers may not dispatch actions.");try{f=!0,a=o(a,e)}finally{f=!1}for(var t=l=u,n=0;n<t.length;n++)(0,t[n])();return e}return h({type:s.INIT}),(r={dispatch:h,subscribe:m,getState:p,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,h({type:s.REPLACE})}})[i.A]=function(){var e,t=m;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(p())}return n(),{unsubscribe:t(n)}}})[i.A]=function(){return this},e},r}function u(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function f(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var a,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:s.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:s.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+s.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,o={},l=0;l<i.length;l++){var s=i[l],c=n[s],f=e[s],d=c(f,t);if(void 0===d){var p=u(s,t);throw new Error(p)}o[s]=d,r=r||d!==f}return(r=r||i.length!==Object.keys(e).length)?o:e}}function d(e,t){return function(){return t(e.apply(this,arguments))}}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function g(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function y(e){return!!e&&!!e[ne]}function v(e){var t;return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===oe}(e)||Array.isArray(e)||!!e[te]||!!(null===(t=e.constructor)||void 0===t?void 0:t[te])||_(e)||E(e))}function b(e,t,n){void 0===n&&(n=!1),0===x(e)?(n?Object.keys:ae)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function x(e){var t=e[ne];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:_(e)?2:E(e)?3:0}function w(e,t){return 2===x(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function S(e,t,n){var r=x(e);2===r?e.set(t,n):3===r?e.add(n):e[t]=n}function _(e){return Y&&e instanceof Map}function E(e){return J&&e instanceof Set}function k(e){return e.o||e.t}function T(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=ie(e);delete t[ne];for(var n=ae(t),r=0;r<n.length;r++){var o=n[r],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function C(e,t){return void 0===t&&(t=!1),P(e)||y(e)||!v(e)||(x(e)>1&&(e.set=e.add=e.clear=e.delete=O),Object.freeze(e),t&&b(e,(function(e,t){return C(t,!0)}),!0)),e}function O(){g(2)}function P(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function N(e){var t=le[e];return t||g(18,e),t}function M(){return X}function I(e,t){t&&(N("Patches"),e.u=[],e.s=[],e.v=t)}function A(e){R(e),e.p.forEach(z),e.p=null}function R(e){e===X&&(X=e.l)}function j(e){return X={p:[],l:X,h:e,m:!0,_:0}}function z(e){var t=e[ne];0===t.i||1===t.i?t.j():t.g=!0}function F(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.O||N("ES5").S(t,e,r),r?(n[ne].P&&(A(t),g(4)),v(e)&&(e=L(t,e),t.l||$(t,e)),t.u&&N("Patches").M(n[ne].t,e,t.u,t.s)):e=L(t,n,[]),A(t),t.u&&t.v(t.u,t.s),e!==ee?e:void 0}function L(e,t,n){if(P(t))return t;var r=t[ne];if(!r)return b(t,(function(o,a){return D(e,r,t,o,a,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return $(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=T(r.k):r.o,a=o,i=!1;3===r.i&&(a=new Set(o),o.clear(),i=!0),b(a,(function(t,a){return D(e,r,o,t,a,n,i)})),$(e,o,!1),n&&e.u&&N("Patches").N(r,n,e.u,e.s)}return r.o}function D(e,t,n,r,o,a,i){if(y(o)){var l=L(e,o,a&&t&&3!==t.i&&!w(t.R,r)?a.concat(r):void 0);if(S(n,r,l),!y(l))return;e.m=!1}else i&&n.add(o);if(v(o)&&!P(o)){if(!e.h.D&&e._<1)return;L(e,o),t&&t.A.l||$(e,o)}}function $(e,t,n){void 0===n&&(n=!1),!e.l&&e.h.D&&e.m&&C(t,n)}function B(e,t){var n=e[ne];return(n?k(n):e)[t]}function H(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function U(e){e.P||(e.P=!0,e.l&&U(e.l))}function W(e){e.o||(e.o=T(e.t))}function V(e,t,n){var r=_(t)?N("MapSet").F(t,n):E(t)?N("MapSet").T(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:M(),P:!1,I:!1,R:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,a=se;n&&(o=[r],a=ce);var i=Proxy.revocable(o,a),l=i.revoke,s=i.proxy;return r.k=s,r.j=l,s}(t,n):N("ES5").J(t,n);return(n?n.A:M()).p.push(r),r}function G(e){return y(e)||g(22,e),function e(t){if(!v(t))return t;var n,r=t[ne],o=x(t);if(r){if(!r.P&&(r.i<4||!N("ES5").K(r)))return r.t;r.I=!0,n=q(t,o),r.I=!1}else n=q(t,o);return b(n,(function(t,o){r&&function(e,t){return 2===x(e)?e.get(t):e[t]}(r.t,t)===o||S(n,t,e(o))})),3===o?new Set(n):n}(e)}function q(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return T(e)}(function(e){e.removeAllTargets="USER_REMOVE_ALL_TARGETS"})(t||(t={})),function(e){e.write="USER_SETTINGS_WRITE"}(n||(n={})),function(e){e.write="ICON_SET"}(r||(r={})),function(e){e.write="UI_STATE_WRITE",e.updateTouch="UI_STATE_UPDATE_TOUCH",e.removeTouch="UI_STATE_REMOVE_TOUCH"}(a||(a={}));var K,X,Q="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Y="undefined"!=typeof Map,J="undefined"!=typeof Set,Z="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,ee=Q?Symbol.for("immer-nothing"):((K={})["immer-nothing"]=!0,K),te=Q?Symbol.for("immer-draftable"):"__$immer_draftable",ne=Q?Symbol.for("immer-state"):"__$immer_state",re="undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator",oe=""+Object.prototype.constructor,ae="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,ie=Object.getOwnPropertyDescriptors||function(e){var t={};return ae(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},le={},se={get:function(e,t){if(t===ne)return e;var n=k(e);if(!w(n,t))return function(e,t,n){var r,o=H(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!v(r)?r:r===B(e.t,t)?(W(e),e.o[t]=V(e.A.h,r,e)):r},has:function(e,t){return t in k(e)},ownKeys:function(e){return Reflect.ownKeys(k(e))},set:function(e,t,n){var r=H(k(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=B(k(e),t),a=null==o?void 0:o[ne];if(a&&a.t===n)return e.o[t]=n,e.R[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(n,o)&&(void 0!==n||w(e.t,t)))return!0;W(e),U(e)}return e.o[t]===n&&(void 0!==n||t in e.o)||Number.isNaN(n)&&Number.isNaN(e.o[t])||(e.o[t]=n,e.R[t]=!0),!0},deleteProperty:function(e,t){return void 0!==B(e.t,t)||t in e.t?(e.R[t]=!1,W(e),U(e)):delete e.R[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=k(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){g(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){g(12)}},ce={};b(se,(function(e,t){ce[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),ce.deleteProperty=function(e,t){return ce.set.call(this,e,t,void 0)},ce.set=function(e,t,n){return se.set.call(this,e[0],t,n,e[0])};var ue=function(){function e(e){var t=this;this.O=Z,this.D=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var a=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,i=Array(r>1?r-1:0),l=1;l<r;l++)i[l-1]=arguments[l];return a.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(i))}))}}var i;if("function"!=typeof n&&g(6),void 0!==r&&"function"!=typeof r&&g(7),v(e)){var l=j(t),s=V(t,e,void 0),c=!0;try{i=n(s),c=!1}finally{c?A(l):R(l)}return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return I(l,r),F(e,l)}),(function(e){throw A(l),e})):(I(l,r),F(i,l))}if(!e||"object"!=typeof e){if(void 0===(i=n(e))&&(i=e),i===ee&&(i=void 0),t.D&&C(i,!0),r){var u=[],f=[];N("Patches").M(e,i,u,f),r(u,f)}return i}g(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var r,o,a=t.produce(e,n,(function(e,t){r=e,o=t}));return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return[e,r,o]})):[a,r,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){v(e)||g(8),y(e)&&(e=G(e));var t=j(this),n=V(this,e,void 0);return n[ne].C=!0,R(t),n},t.finishDraft=function(e,t){var n=(e&&e[ne]).A;return I(n,t),F(void 0,n)},t.setAutoFreeze=function(e){this.D=e},t.setUseProxies=function(e){e&&!Z&&g(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var o=N("Patches").$;return y(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),fe=new ue,de=fe.produce;fe.produceWithPatches.bind(fe),fe.setAutoFreeze.bind(fe),fe.setUseProxies.bind(fe),fe.applyPatches.bind(fe),fe.createDraft.bind(fe),fe.finishDraft.bind(fe);const pe=de,me=(e,t,n)=>(r,o)=>void 0===r?t():o.type!==e?r:n(r,o.payload),he=(e,t)=>{const{key:n,value:r}=t;return pe(e,(e=>{void 0!==e[n]?e[n]=r:console.warn("trying to update nonexistent key in reducer")}))};var ge="undefined"!=typeof Float32Array?Float32Array:Array;function ye(){var e=new ge(3);return ge!=Float32Array&&(e[0]=0,e[1]=0,e[2]=0),e}function ve(e,t,n){var r=new ge(3);return r[0]=e,r[1]=t,r[2]=n,r}function be(e,t,n){return e[0]=t[0]-n[0],e[1]=t[1]-n[1],e[2]=t[2]-n[2],e}function xe(e,t,n){return e[0]=t[0]/n[0],e[1]=t[1]/n[1],e[2]=t[2]/n[2],e}function we(e,t,n){return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e}function Se(e,t){var n=t[0]-e[0],r=t[1]-e[1],o=t[2]-e[2];return Math.hypot(n,r,o)}function _e(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function Ee(e,t,n){var r=t[0],o=t[1],a=t[2],i=n[3]*r+n[7]*o+n[11]*a+n[15];return i=i||1,e[0]=(n[0]*r+n[4]*o+n[8]*a+n[12])/i,e[1]=(n[1]*r+n[5]*o+n[9]*a+n[13])/i,e[2]=(n[2]*r+n[6]*o+n[10]*a+n[14])/i,e}Math.random,Math.PI,Math.hypot||(Math.hypot=function(){for(var e=0,t=arguments.length;t--;)e+=arguments[t]*arguments[t];return Math.sqrt(e)});var ke=be,Te=xe;ye();const Ce={right:[{name:"步兵",src:"./icon/步兵/步兵.png",size:{w:20,h:20},list:[{name:"机枪兵",src:"./icon/步兵/机枪兵.png"},{name:"精确射手",src:"./icon/步兵/精确射手.png"},{name:"轻型反坦克兵",src:"./icon/步兵/轻型反坦克兵.png"},{name:"重型反坦克兵",src:"./icon/步兵/重型反坦克兵.png"}]},{name:"载具",src:"./icon/载具/载具.png",size:{w:20,h:20},list:[{name:"轻型载具",src:"./icon/载具/轻型载具.png"},{name:"轻型反装甲载具",src:"./icon/载具/轻型反装甲载具.png"},{name:"运输载具",src:"./icon/载具/运输载具.png"},{name:"卡车",src:"./icon/载具/卡车.png"},{name:"补给卡车",src:"./icon/载具/补给卡车.png"},{name:"摩托车",src:"./icon/载具/摩托车.png"}]}]},Oe=me(n.write,(()=>({mapId:"albasrah",mapGrid:!0,contourmap:!1,weaponType:"standardMortar",weaponPlacementHelper:!1,weaponPlacementLabel:!1,fontSize:16,targetSpread:!0,targetSplash:!1,targetGrid:!1,targetDistance:!1,targetPlacementHelper:!0,targetPlacementLabel:!0,extraButtonsAlwaysShown:!1,deleteMode:!1,targetCompactMode:!1,leftPanelCollapsed:!1})),he),Pe=(e,t)=>void 0===e?{dragEntityId:null,dragStartPosition:ve(0,0,0),mousePosition:ve(0,0,0),mouseDown:!1,touches:new Map,weaponCreationMode:!1}:((e,t)=>{switch(t.type){case a.write:return he(e,t.payload);case a.updateTouch:return pe(e,(e=>{e.touches.set(t.payload.identifier,t.payload)}));case a.removeTouch:return pe(e,(e=>{e.touches.delete(t.payload.identifier)}));default:return e}})(e,t),Ne=me(r.write,(()=>({display:!1,x:0,y:0,c_name:"",location:ve(0,0,0)})),he);function Me(){var e=new ge(16);return ge!=Float32Array&&(e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0),e[0]=1,e[5]=1,e[10]=1,e[15]=1,e}function Ie(e){var t=new ge(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function Ae(e,t){var n=t[0],r=t[1],o=t[2],a=t[3],i=t[4],l=t[5],s=t[6],c=t[7],u=t[8],f=t[9],d=t[10],p=t[11],m=t[12],h=t[13],g=t[14],y=t[15],v=n*l-r*i,b=n*s-o*i,x=n*c-a*i,w=r*s-o*l,S=r*c-a*l,_=o*c-a*s,E=u*h-f*m,k=u*g-d*m,T=u*y-p*m,C=f*g-d*h,O=f*y-p*h,P=d*y-p*g,N=v*P-b*O+x*C+w*T-S*k+_*E;return N?(N=1/N,e[0]=(l*P-s*O+c*C)*N,e[1]=(o*O-r*P-a*C)*N,e[2]=(h*_-g*S+y*w)*N,e[3]=(d*S-f*_-p*w)*N,e[4]=(s*T-i*P-c*k)*N,e[5]=(n*P-o*T+a*k)*N,e[6]=(g*x-m*_-y*b)*N,e[7]=(u*_-d*x+p*b)*N,e[8]=(i*O-l*T+c*E)*N,e[9]=(r*T-n*O-a*E)*N,e[10]=(m*S-h*x+y*v)*N,e[11]=(f*x-u*S-p*v)*N,e[12]=(l*k-i*C-s*E)*N,e[13]=(n*C-r*k+o*E)*N,e[14]=(h*b-m*w-g*v)*N,e[15]=(u*w-f*b+d*v)*N,e):null}function Re(e,t,n){var r,o,a,i,l,s,c,u,f,d,p,m,h=n[0],g=n[1],y=n[2];return t===e?(e[12]=t[0]*h+t[4]*g+t[8]*y+t[12],e[13]=t[1]*h+t[5]*g+t[9]*y+t[13],e[14]=t[2]*h+t[6]*g+t[10]*y+t[14],e[15]=t[3]*h+t[7]*g+t[11]*y+t[15]):(r=t[0],o=t[1],a=t[2],i=t[3],l=t[4],s=t[5],c=t[6],u=t[7],f=t[8],d=t[9],p=t[10],m=t[11],e[0]=r,e[1]=o,e[2]=a,e[3]=i,e[4]=l,e[5]=s,e[6]=c,e[7]=u,e[8]=f,e[9]=d,e[10]=p,e[11]=m,e[12]=r*h+l*g+f*y+t[12],e[13]=o*h+s*g+d*y+t[13],e[14]=a*h+c*g+p*y+t[14],e[15]=i*h+u*g+m*y+t[15]),e}function je(e,t,n){var r=n[0],o=n[1],a=n[2];return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*o,e[5]=t[5]*o,e[6]=t[6]*o,e[7]=t[7]*o,e[8]=t[8]*a,e[9]=t[9]*a,e[10]=t[10]*a,e[11]=t[11]*a,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function ze(e,t,n){var r=Math.sin(n),o=Math.cos(n),a=t[0],i=t[1],l=t[2],s=t[3],c=t[4],u=t[5],f=t[6],d=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=a*o+c*r,e[1]=i*o+u*r,e[2]=l*o+f*r,e[3]=s*o+d*r,e[4]=c*o-a*r,e[5]=u*o-i*r,e[6]=f*o-l*r,e[7]=d*o-s*r,e}function Fe(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e}function Le(e,t){return e[0]=t[0],e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=t[1],e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=t[2],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function De(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function $e(e,t){var n=t[0],r=t[1],o=t[2],a=t[4],i=t[5],l=t[6],s=t[8],c=t[9],u=t[10];return e[0]=Math.hypot(n,r,o),e[1]=Math.hypot(a,i,l),e[2]=Math.hypot(s,c,u),e}var Be,He,Ue,We,Ve;(Ve=Be||(Be={})).add="ENTITY_ADD",Ve.selectAdd="SELECT_ADD",Ve.selectRemove="SELECT_REMOVE",Ve.selectUpdate="SELECT_UPDATE",Ve.set="ENTITY_SET",Ve.setAll="ENTITY_SET_ALL",Ve.remove="ENTITY_REMOVE",Ve.removeAllTargets="ENTITY_REMOVE_ALL_TARGETS",(We=He||(He={})).moveTo="TRANSFORM_MOVE_TO",We.moveBy="TRANSFORM_MOVE_BY",function(e){e.setActive="WEAPON_SET_ACTIVE",e.toggleActive="WEAPON_TOGGLE_ACTIVE",e.pickActive="WEAPON_PICK_ACTIVE",e.setHeightOverGround="WEAPON_SET_HEIGHT_OVER_GROUND",e.setWeaponType="WEAPON_SET_TYPE"}(Ue||(Ue={}));const Ge=e=>t=>Re(Me(),t,e),qe=(e,t,n)=>Fe(Me(),ve(e,t,n)),Ke=e=>De(ye(),e),Xe=(e,t)=>{const n=[0,1,4,5,12,13].map((e=>t[e]));e.transform(...n)},Qe=e=>{const t=e.target.getBoundingClientRect();return ve(e.clientX-t.left,e.clientY-t.top,0)},Ye=(e,t)=>{const n=Ae(Me(),e.transform);return Ee(ye(),t,n)},Je=(e,t)=>{const n=$e(ye(),e.transform);return xe(n,t,n)},Ze=(e,t)=>{const n=tt(e,t);return n[0]<0||n[0]>23||n[1]<0?["--","-","-"]:[`${String.fromCharCode(65+n[0])}${1+n[1]}`,n[2].toString(),n[3].toString()]},et=e=>`${e[0]}-${e[1]}-${e[2]}`,tt=(e,t)=>{const n=De(ye(),e.transform),r=t[0]-n[0],o=t[1]-n[1],a=Math.floor(r/3e4),i=Math.floor(o/3e4),l=7+Math.floor(r%3e4/1e4)-3*Math.floor(o%3e4/1e4),s=7+Math.floor(r%1e4/3334)-3*Math.floor(o%1e4/3334);return a<0||a>23||i<0?[-1,-1,-1,-1]:[a,i,l,s]},nt=e=>({transform:Fe(Me(),e)});function rt(e,t){return function(){return e.apply(t,arguments)}}const{toString:ot}=Object.prototype,{getPrototypeOf:at}=Object,it=(lt=Object.create(null),e=>{const t=ot.call(e);return lt[t]||(lt[t]=t.slice(8,-1).toLowerCase())});var lt;const st=e=>(e=e.toLowerCase(),t=>it(t)===e),ct=e=>t=>typeof t===e,{isArray:ut}=Array,ft=ct("undefined"),dt=st("ArrayBuffer"),pt=ct("string"),mt=ct("function"),ht=ct("number"),gt=e=>null!==e&&"object"==typeof e,yt=e=>{if("object"!==it(e))return!1;const t=at(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},vt=st("Date"),bt=st("File"),xt=st("Blob"),wt=st("FileList"),St=st("URLSearchParams");function _t(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),ut(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),a=o.length;let i;for(r=0;r<a;r++)i=o[r],t.call(null,e[i],i,e)}}function Et(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const kt="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,Tt=e=>!ft(e)&&e!==kt,Ct=(Ot="undefined"!=typeof Uint8Array&&at(Uint8Array),e=>Ot&&e instanceof Ot);var Ot;const Pt=st("HTMLFormElement"),Nt=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),Mt=st("RegExp"),It=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};_t(n,((n,o)=>{let a;!1!==(a=t(n,o,e))&&(r[o]=a||n)})),Object.defineProperties(e,r)},At="abcdefghijklmnopqrstuvwxyz",Rt="0123456789",jt={DIGIT:Rt,ALPHA:At,ALPHA_DIGIT:At+At.toUpperCase()+Rt},zt=st("AsyncFunction"),Ft={isArray:ut,isArrayBuffer:dt,isBuffer:function(e){return null!==e&&!ft(e)&&null!==e.constructor&&!ft(e.constructor)&&mt(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||mt(e.append)&&("formdata"===(t=it(e))||"object"===t&&mt(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&dt(e.buffer),t},isString:pt,isNumber:ht,isBoolean:e=>!0===e||!1===e,isObject:gt,isPlainObject:yt,isUndefined:ft,isDate:vt,isFile:bt,isBlob:xt,isRegExp:Mt,isFunction:mt,isStream:e=>gt(e)&&mt(e.pipe),isURLSearchParams:St,isTypedArray:Ct,isFileList:wt,forEach:_t,merge:function e(){const{caseless:t}=Tt(this)&&this||{},n={},r=(r,o)=>{const a=t&&Et(n,o)||o;yt(n[a])&&yt(r)?n[a]=e(n[a],r):yt(r)?n[a]=e({},r):ut(r)?n[a]=r.slice():n[a]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&_t(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(_t(t,((t,r)=>{n&&mt(t)?e[r]=rt(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,a,i;const l={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),a=o.length;a-- >0;)i=o[a],r&&!r(i,e,t)||l[i]||(t[i]=e[i],l[i]=!0);e=!1!==n&&at(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:it,kindOfTest:st,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(ut(e))return e;let t=e.length;if(!ht(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:Pt,hasOwnProperty:Nt,hasOwnProp:Nt,reduceDescriptors:It,freezeMethods:e=>{It(e,((t,n)=>{if(mt(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];mt(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return ut(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:Et,global:kt,isContextDefined:Tt,ALPHABET:jt,generateString:(e=16,t=jt.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&mt(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(gt(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=ut(e)?[]:{};return _t(e,((e,t)=>{const a=n(e,r+1);!ft(a)&&(o[t]=a)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:zt,isThenable:e=>e&&(gt(e)||mt(e))&&mt(e.then)&&mt(e.catch)};function Lt(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}Ft.inherits(Lt,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Ft.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Dt=Lt.prototype,$t={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{$t[e]={value:e}})),Object.defineProperties(Lt,$t),Object.defineProperty(Dt,"isAxiosError",{value:!0}),Lt.from=(e,t,n,r,o,a)=>{const i=Object.create(Dt);return Ft.toFlatObject(e,i,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),Lt.call(i,e.message,t,n,r,o),i.cause=e,i.name=e.name,a&&Object.assign(i,a),i};const Bt=Lt;function Ht(e){return Ft.isPlainObject(e)||Ft.isArray(e)}function Ut(e){return Ft.endsWith(e,"[]")?e.slice(0,-2):e}function Wt(e,t,n){return e?e.concat(t).map((function(e,t){return e=Ut(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const Vt=Ft.toFlatObject(Ft,{},null,(function(e){return/^is[A-Z]/.test(e)})),Gt=function(e,t,n){if(!Ft.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=Ft.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!Ft.isUndefined(t[e])}))).metaTokens,o=n.visitor||c,a=n.dots,i=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&Ft.isSpecCompliantForm(t);if(!Ft.isFunction(o))throw new TypeError("visitor must be a function");function s(e){if(null===e)return"";if(Ft.isDate(e))return e.toISOString();if(!l&&Ft.isBlob(e))throw new Bt("Blob is not supported. Use a Buffer instead.");return Ft.isArrayBuffer(e)||Ft.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function c(e,n,o){let l=e;if(e&&!o&&"object"==typeof e)if(Ft.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(Ft.isArray(e)&&function(e){return Ft.isArray(e)&&!e.some(Ht)}(e)||(Ft.isFileList(e)||Ft.endsWith(n,"[]"))&&(l=Ft.toArray(e)))return n=Ut(n),l.forEach((function(e,r){!Ft.isUndefined(e)&&null!==e&&t.append(!0===i?Wt([n],r,a):null===i?n:n+"[]",s(e))})),!1;return!!Ht(e)||(t.append(Wt(o,n,a),s(e)),!1)}const u=[],f=Object.assign(Vt,{defaultVisitor:c,convertValue:s,isVisitable:Ht});if(!Ft.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!Ft.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),Ft.forEach(n,(function(n,a){!0===(!(Ft.isUndefined(n)||null===n)&&o.call(t,n,Ft.isString(a)?a.trim():a,r,f))&&e(n,r?r.concat(a):[a])})),u.pop()}}(e),t};function qt(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function Kt(e,t){this._pairs=[],e&&Gt(e,this,t)}const Xt=Kt.prototype;Xt.append=function(e,t){this._pairs.push([e,t])},Xt.toString=function(e){const t=e?function(t){return e.call(this,t,qt)}:qt;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const Qt=Kt;function Yt(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Jt(e,t,n){if(!t)return e;const r=n&&n.encode||Yt,o=n&&n.serialize;let a;if(a=o?o(t,n):Ft.isURLSearchParams(t)?t.toString():new Qt(t,n).toString(r),a){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}const Zt=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){Ft.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},en={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},tn={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Qt,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},nn="undefined"!=typeof window&&"undefined"!=typeof document,rn=(on="undefined"!=typeof navigator&&navigator.product,nn&&["ReactNative","NativeScript","NS"].indexOf(on)<0);var on;const an="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,ln={...e,...tn},sn=function(e){function t(e,n,r,o){let a=e[o++];if("__proto__"===a)return!0;const i=Number.isFinite(+a),l=o>=e.length;return a=!a&&Ft.isArray(r)?r.length:a,l?(Ft.hasOwnProp(r,a)?r[a]=[r[a],n]:r[a]=n,!i):(r[a]&&Ft.isObject(r[a])||(r[a]=[]),t(e,n,r[a],o)&&Ft.isArray(r[a])&&(r[a]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let a;for(r=0;r<o;r++)a=n[r],t[a]=e[a];return t}(r[a])),!i)}if(Ft.isFormData(e)&&Ft.isFunction(e.entries)){const n={};return Ft.forEachEntry(e,((e,r)=>{t(function(e){return Ft.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},cn={transitional:en,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=Ft.isObject(e);if(o&&Ft.isHTMLForm(e)&&(e=new FormData(e)),Ft.isFormData(e))return r?JSON.stringify(sn(e)):e;if(Ft.isArrayBuffer(e)||Ft.isBuffer(e)||Ft.isStream(e)||Ft.isFile(e)||Ft.isBlob(e))return e;if(Ft.isArrayBufferView(e))return e.buffer;if(Ft.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let a;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return Gt(e,new ln.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return ln.isNode&&Ft.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((a=Ft.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return Gt(a?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(Ft.isString(e))try{return(0,JSON.parse)(e),Ft.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||cn.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&Ft.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw Bt.from(e,Bt.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ln.classes.FormData,Blob:ln.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Ft.forEach(["delete","get","head","post","put","patch"],(e=>{cn.headers[e]={}}));const un=cn,fn=Ft.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),dn=Symbol("internals");function pn(e){return e&&String(e).trim().toLowerCase()}function mn(e){return!1===e||null==e?e:Ft.isArray(e)?e.map(mn):String(e)}function hn(e,t,n,r,o){return Ft.isFunction(r)?r.call(this,t,n):(o&&(t=n),Ft.isString(t)?Ft.isString(r)?-1!==t.indexOf(r):Ft.isRegExp(r)?r.test(t):void 0:void 0)}class gn{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=pn(t);if(!o)throw new Error("header name must be a non-empty string");const a=Ft.findKey(r,o);(!a||void 0===r[a]||!0===n||void 0===n&&!1!==r[a])&&(r[a||t]=mn(e))}const a=(e,t)=>Ft.forEach(e,((e,n)=>o(e,n,t)));return Ft.isPlainObject(e)||e instanceof this.constructor?a(e,t):Ft.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?a((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&fn[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=pn(e)){const n=Ft.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(Ft.isFunction(t))return t.call(this,e,n);if(Ft.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=pn(e)){const n=Ft.findKey(this,e);return!(!n||void 0===this[n]||t&&!hn(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=pn(e)){const o=Ft.findKey(n,e);!o||t&&!hn(0,n[o],o,t)||(delete n[o],r=!0)}}return Ft.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!hn(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return Ft.forEach(this,((r,o)=>{const a=Ft.findKey(n,o);if(a)return t[a]=mn(r),void delete t[o];const i=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();i!==o&&delete t[o],t[i]=mn(r),n[i]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return Ft.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&Ft.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[dn]=this[dn]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=pn(e);t[r]||(function(e,t){const n=Ft.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return Ft.isArray(e)?e.forEach(r):r(e),this}}gn.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Ft.reduceDescriptors(gn.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),Ft.freezeMethods(gn);const yn=gn;function vn(e,t){const n=this||un,r=t||n,o=yn.from(r.headers);let a=r.data;return Ft.forEach(e,(function(e){a=e.call(n,a,o.normalize(),t?t.status:void 0)})),o.normalize(),a}function bn(e){return!(!e||!e.__CANCEL__)}function xn(e,t,n){Bt.call(this,null==e?"canceled":e,Bt.ERR_CANCELED,t,n),this.name="CanceledError"}Ft.inherits(xn,Bt,{__CANCEL__:!0});const wn=xn,Sn=ln.hasStandardBrowserEnv?{write(e,t,n,r,o,a){const i=[e+"="+encodeURIComponent(t)];Ft.isNumber(n)&&i.push("expires="+new Date(n).toGMTString()),Ft.isString(r)&&i.push("path="+r),Ft.isString(o)&&i.push("domain="+o),!0===a&&i.push("secure"),document.cookie=i.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function _n(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/?\/$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const En=ln.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=Ft.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function kn(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,a=0,i=0;return t=void 0!==t?t:1e3,function(l){const s=Date.now(),c=r[i];o||(o=s),n[a]=l,r[a]=s;let u=i,f=0;for(;u!==a;)f+=n[u++],u%=e;if(a=(a+1)%e,a===i&&(i=(i+1)%e),s-o<t)return;const d=c&&s-c;return d?Math.round(1e3*f/d):void 0}}(50,250);return o=>{const a=o.loaded,i=o.lengthComputable?o.total:void 0,l=a-n,s=r(l);n=a;const c={loaded:a,total:i,progress:i?a/i:void 0,bytes:l,rate:s||void 0,estimated:s&&i&&a<=i?(i-a)/s:void 0,event:o};c[t?"download":"upload"]=!0,e(c)}}const Tn="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=yn.from(e.headers).normalize();let a,i,{responseType:l,withXSRFToken:s}=e;function c(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}if(Ft.isFormData(r))if(ln.hasStandardBrowserEnv||ln.hasStandardBrowserWebWorkerEnv)o.setContentType(!1);else if(!1!==(i=o.getContentType())){const[e,...t]=i?i.split(";").map((e=>e.trim())).filter(Boolean):[];o.setContentType([e||"multipart/form-data",...t].join("; "))}let u=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const f=_n(e.baseURL,e.url);function d(){if(!u)return;const r=yn.from("getAllResponseHeaders"in u&&u.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new Bt("Request failed with status code "+n.status,[Bt.ERR_BAD_REQUEST,Bt.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),c()}),(function(e){n(e),c()}),{data:l&&"text"!==l&&"json"!==l?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:r,config:e,request:u}),u=null}if(u.open(e.method.toUpperCase(),Jt(f,e.params,e.paramsSerializer),!0),u.timeout=e.timeout,"onloadend"in u?u.onloadend=d:u.onreadystatechange=function(){u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))&&setTimeout(d)},u.onabort=function(){u&&(n(new Bt("Request aborted",Bt.ECONNABORTED,e,u)),u=null)},u.onerror=function(){n(new Bt("Network Error",Bt.ERR_NETWORK,e,u)),u=null},u.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||en;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new Bt(t,r.clarifyTimeoutError?Bt.ETIMEDOUT:Bt.ECONNABORTED,e,u)),u=null},ln.hasStandardBrowserEnv&&(s&&Ft.isFunction(s)&&(s=s(e)),s||!1!==s&&En(f))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&Sn.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in u&&Ft.forEach(o.toJSON(),(function(e,t){u.setRequestHeader(t,e)})),Ft.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),l&&"json"!==l&&(u.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&u.addEventListener("progress",kn(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",kn(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{u&&(n(!t||t.type?new wn(null,e,u):t),u.abort(),u=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const p=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(f);p&&-1===ln.protocols.indexOf(p)?n(new Bt("Unsupported protocol "+p+":",Bt.ERR_BAD_REQUEST,e)):u.send(r||null)}))},Cn={http:null,xhr:Tn};Ft.forEach(Cn,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const On=e=>`- ${e}`,Pn=e=>Ft.isFunction(e)||null===e||!1===e,Nn=e=>{e=Ft.isArray(e)?e:[e];const{length:t}=e;let n,r;const o={};for(let a=0;a<t;a++){let t;if(n=e[a],r=n,!Pn(n)&&(r=Cn[(t=String(n)).toLowerCase()],void 0===r))throw new Bt(`Unknown adapter '${t}'`);if(r)break;o[t||"#"+a]=r}if(!r){const e=Object.entries(o).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(On).join("\n"):" "+On(e[0]):"as no adapter specified";throw new Bt("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return r};function Mn(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new wn(null,e)}function In(e){return Mn(e),e.headers=yn.from(e.headers),e.data=vn.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Nn(e.adapter||un.adapter)(e).then((function(t){return Mn(e),t.data=vn.call(e,e.transformResponse,t),t.headers=yn.from(t.headers),t}),(function(t){return bn(t)||(Mn(e),t&&t.response&&(t.response.data=vn.call(e,e.transformResponse,t.response),t.response.headers=yn.from(t.response.headers))),Promise.reject(t)}))}const An=e=>e instanceof yn?e.toJSON():e;function Rn(e,t){t=t||{};const n={};function r(e,t,n){return Ft.isPlainObject(e)&&Ft.isPlainObject(t)?Ft.merge.call({caseless:n},e,t):Ft.isPlainObject(t)?Ft.merge({},t):Ft.isArray(t)?t.slice():t}function o(e,t,n){return Ft.isUndefined(t)?Ft.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function a(e,t){if(!Ft.isUndefined(t))return r(void 0,t)}function i(e,t){return Ft.isUndefined(t)?Ft.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,a){return a in t?r(n,o):a in e?r(void 0,n):void 0}const s={url:a,method:a,data:a,baseURL:i,transformRequest:i,transformResponse:i,paramsSerializer:i,timeout:i,timeoutMessage:i,withCredentials:i,withXSRFToken:i,adapter:i,responseType:i,xsrfCookieName:i,xsrfHeaderName:i,onUploadProgress:i,onDownloadProgress:i,decompress:i,maxContentLength:i,maxBodyLength:i,beforeRedirect:i,transport:i,httpAgent:i,httpsAgent:i,cancelToken:i,socketPath:i,responseEncoding:i,validateStatus:l,headers:(e,t)=>o(An(e),An(t),!0)};return Ft.forEach(Object.keys(Object.assign({},e,t)),(function(r){const a=s[r]||o,i=a(e[r],t[r],r);Ft.isUndefined(i)&&a!==l||(n[r]=i)})),n}const jn={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{jn[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const zn={};jn.transitional=function(e,t,n){function r(e,t){return"[Axios v1.6.7] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,a)=>{if(!1===e)throw new Bt(r(o," has been removed"+(t?" in "+t:"")),Bt.ERR_DEPRECATED);return t&&!zn[o]&&(zn[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,a)}};const Fn={assertOptions:function(e,t,n){if("object"!=typeof e)throw new Bt("options must be an object",Bt.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const a=r[o],i=t[a];if(i){const t=e[a],n=void 0===t||i(t,a,e);if(!0!==n)throw new Bt("option "+a+" must be "+n,Bt.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new Bt("Unknown option "+a,Bt.ERR_BAD_OPTION)}},validators:jn},Ln=Fn.validators;class Dn{constructor(e){this.defaults=e,this.interceptors={request:new Zt,response:new Zt}}async request(e,t){try{return await this._request(e,t)}catch(e){if(e instanceof Error){let t;Error.captureStackTrace?Error.captureStackTrace(t={}):t=new Error;const n=t.stack?t.stack.replace(/^.+\n/,""):"";e.stack?n&&!String(e.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(e.stack+="\n"+n):e.stack=n}throw e}}_request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=Rn(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;void 0!==n&&Fn.assertOptions(n,{silentJSONParsing:Ln.transitional(Ln.boolean),forcedJSONParsing:Ln.transitional(Ln.boolean),clarifyTimeoutError:Ln.transitional(Ln.boolean)},!1),null!=r&&(Ft.isFunction(r)?t.paramsSerializer={serialize:r}:Fn.assertOptions(r,{encode:Ln.function,serialize:Ln.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let a=o&&Ft.merge(o.common,o[t.method]);o&&Ft.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=yn.concat(a,o);const i=[];let l=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(l=l&&e.synchronous,i.unshift(e.fulfilled,e.rejected))}));const s=[];let c;this.interceptors.response.forEach((function(e){s.push(e.fulfilled,e.rejected)}));let u,f=0;if(!l){const e=[In.bind(this),void 0];for(e.unshift.apply(e,i),e.push.apply(e,s),u=e.length,c=Promise.resolve(t);f<u;)c=c.then(e[f++],e[f++]);return c}u=i.length;let d=t;for(f=0;f<u;){const e=i[f++],t=i[f++];try{d=e(d)}catch(e){t.call(this,e);break}}try{c=In.call(this,d)}catch(e){return Promise.reject(e)}for(f=0,u=s.length;f<u;)c=c.then(s[f++],s[f++]);return c}getUri(e){return Jt(_n((e=Rn(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}Ft.forEach(["delete","get","head","options"],(function(e){Dn.prototype[e]=function(t,n){return this.request(Rn(n||{},{method:e,url:t,data:(n||{}).data}))}})),Ft.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(Rn(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Dn.prototype[e]=t(),Dn.prototype[e+"Form"]=t(!0)}));const $n=Dn;class Bn{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new wn(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;const t=new Bn((function(t){e=t}));return{token:t,cancel:e}}}const Hn=Bn,Un={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Un).forEach((([e,t])=>{Un[t]=e}));const Wn=Un,Vn=function e(t){const n=new $n(t),r=rt($n.prototype.request,n);return Ft.extend(r,$n.prototype,n,{allOwnKeys:!0}),Ft.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(Rn(t,n))},r}(un);Vn.Axios=$n,Vn.CanceledError=wn,Vn.CancelToken=Hn,Vn.isCancel=bn,Vn.VERSION="1.6.7",Vn.toFormData=Gt,Vn.AxiosError=Bt,Vn.Cancel=Vn.CanceledError,Vn.all=function(e){return Promise.all(e)},Vn.spread=function(e){return function(t){return e.apply(null,t)}},Vn.isAxiosError=function(e){return Ft.isObject(e)&&!0===e.isAxiosError},Vn.mergeConfig=Rn,Vn.AxiosHeaders=yn,Vn.formToJSON=e=>sn(Ft.isHTMLForm(e)?new FormData(e):e),Vn.getAdapter=Nn,Vn.HttpStatusCode=Wn,Vn.default=Vn;const Gn=Vn;var qn=o(6540),Kn=o.t(qn,2);function Xn(e){return Xn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xn(e)}function Qn(e){var t=function(e,t){if("object"!=Xn(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=Xn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Xn(t)?t:String(t)}function Yn(e,t,n){return(t=Qn(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Jn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Zn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Jn(Object(n),!0).forEach((function(t){Yn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Jn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var er,tr=o(961),nr=Zn({},o.t(tr,2)),rr=nr.version,or=nr.render;nr.unmountComponentAtNode;try{Number((rr||"").split(".")[0])>=18&&(er=nr.createRoot)}catch(e){}function ar(e){var t=nr.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;t&&"object"===Xn(t)&&(t.usingClientEntryPoint=e)}var ir="__rc_react_root__";const lr=qn.createContext({}),sr="anticon",cr=qn.createContext({getPrefixCls:(e,t)=>t||(e?`ant-${e}`:"ant"),iconPrefixCls:sr}),{Consumer:ur}=cr;function fr(e){if(Array.isArray(e))return e}function dr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function pr(e,t){if(e){if("string"==typeof e)return dr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?dr(e,t):void 0}}function mr(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function hr(e,t){return fr(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){c=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||pr(e,t)||mr()}function gr(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function yr(e){return function(e){if(Array.isArray(e))return dr(e)}(e)||gr(e)||pr(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}const vr=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)};function br(){return!("undefined"==typeof window||!window.document||!window.document.createElement)}var xr="data-rc-order",wr="data-rc-priority",Sr="rc-util-key",_r=new Map;function Er(){var e=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).mark;return e?e.startsWith("data-")?e:"data-".concat(e):Sr}function kr(e){return e.attachTo?e.attachTo:document.querySelector("head")||document.body}function Tr(e){return Array.from((_r.get(e)||e).children).filter((function(e){return"STYLE"===e.tagName}))}function Cr(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!br())return null;var n=t.csp,r=t.prepend,o=t.priority,a=void 0===o?0:o,i=function(e){return"queue"===e?"prependQueue":e?"prepend":"append"}(r),l="prependQueue"===i,s=document.createElement("style");s.setAttribute(xr,i),l&&a&&s.setAttribute(wr,"".concat(a)),null!=n&&n.nonce&&(s.nonce=null==n?void 0:n.nonce),s.innerHTML=e;var c=kr(t),u=c.firstChild;if(r){if(l){var f=Tr(c).filter((function(e){if(!["prepend","prependQueue"].includes(e.getAttribute(xr)))return!1;var t=Number(e.getAttribute(wr)||0);return a>=t}));if(f.length)return c.insertBefore(s,f[f.length-1].nextSibling),s}c.insertBefore(s,u)}else c.appendChild(s);return s}function Or(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Tr(kr(t)).find((function(n){return n.getAttribute(Er(t))===e}))}function Pr(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Or(e,t);n&&kr(t).removeChild(n)}function Nr(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!function(e,t){var n=_r.get(e);if(!n||!function(e,t){if(!e)return!1;if(e.contains)return e.contains(t);for(var n=t;n;){if(n===e)return!0;n=n.parentNode}return!1}(document,n)){var r=Cr("",t),o=r.parentNode;_r.set(e,o),e.removeChild(r)}}(kr(n),n);var r,o,a,i=Or(t,n);if(i)return null!==(r=n.csp)&&void 0!==r&&r.nonce&&i.nonce!==(null===(o=n.csp)||void 0===o?void 0:o.nonce)&&(i.nonce=null===(a=n.csp)||void 0===a?void 0:a.nonce),i.innerHTML!==e&&(i.innerHTML=e),i;var l=Cr(e,n);return l.setAttribute(Er(n),t),l}function Mr(e,t,n){var r=qn.useRef({});return"value"in r.current&&!n(r.current.condition,t)||(r.current.value=e(),r.current.condition=t),r.current.value}var Ir={},Ar=[];function Rr(e,t){}function jr(e,t){}function zr(e,t,n){t||Ir[n]||(e(!1,n),Ir[n]=!0)}function Fr(e,t){zr(Rr,e,t)}Fr.preMessage=function(e){Ar.push(e)},Fr.resetWarned=function(){Ir={}},Fr.noteOnce=function(e,t){zr(jr,e,t)};const Lr=Fr;function Dr(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function $r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Qn(r.key),r)}}function Br(e,t,n){return t&&$r(e.prototype,t),n&&$r(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var Hr="%";function Ur(e){return e.join(Hr)}var Wr=function(){function e(t){Dr(this,e),Yn(this,"instanceId",void 0),Yn(this,"cache",new Map),this.instanceId=t}return Br(e,[{key:"get",value:function(e){return this.opGet(Ur(e))}},{key:"opGet",value:function(e){return this.cache.get(e)||null}},{key:"update",value:function(e,t){return this.opUpdate(Ur(e),t)}},{key:"opUpdate",value:function(e,t){var n=t(this.cache.get(e));null===n?this.cache.delete(e):this.cache.set(e,n)}}]),e}();const Vr=Wr;var Gr="data-token-hash",qr="data-css-hash",Kr="__cssinjs_instance__";var Xr=qn.createContext({hashPriority:"low",cache:function(){var e=Math.random().toString(12).slice(2);if("undefined"!=typeof document&&document.head&&document.body){var t=document.body.querySelectorAll("style[".concat(qr,"]"))||[],n=document.head.firstChild;Array.from(t).forEach((function(t){t[Kr]=t[Kr]||e,t[Kr]===e&&document.head.insertBefore(t,n)}));var r={};Array.from(document.querySelectorAll("style[".concat(qr,"]"))).forEach((function(t){var n,o=t.getAttribute(qr);r[o]?t[Kr]===e&&(null===(n=t.parentNode)||void 0===n||n.removeChild(t)):r[o]=!0}))}return new Vr(e)}(),defaultCache:!0});const Qr=Xr;var Yr=function(){function e(){Dr(this,e),Yn(this,"cache",void 0),Yn(this,"keys",void 0),Yn(this,"cacheCallTimes",void 0),this.cache=new Map,this.keys=[],this.cacheCallTimes=0}return Br(e,[{key:"size",value:function(){return this.keys.length}},{key:"internalGet",value:function(e){var t,n,r=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o={map:this.cache};return e.forEach((function(e){var t;o=o?null===(t=o)||void 0===t||null===(t=t.map)||void 0===t?void 0:t.get(e):void 0})),null!==(t=o)&&void 0!==t&&t.value&&r&&(o.value[1]=this.cacheCallTimes++),null===(n=o)||void 0===n?void 0:n.value}},{key:"get",value:function(e){var t;return null===(t=this.internalGet(e,!0))||void 0===t?void 0:t[0]}},{key:"has",value:function(e){return!!this.internalGet(e)}},{key:"set",value:function(t,n){var r=this;if(!this.has(t)){if(this.size()+1>e.MAX_CACHE_SIZE+e.MAX_CACHE_OFFSET){var o=this.keys.reduce((function(e,t){var n=hr(e,2)[1];return r.internalGet(t)[1]<n?[t,r.internalGet(t)[1]]:e}),[this.keys[0],this.cacheCallTimes]),a=hr(o,1)[0];this.delete(a)}this.keys.push(t)}var i=this.cache;t.forEach((function(e,o){if(o===t.length-1)i.set(e,{value:[n,r.cacheCallTimes++]});else{var a=i.get(e);a?a.map||(a.map=new Map):i.set(e,{map:new Map}),i=i.get(e).map}}))}},{key:"deleteByPath",value:function(e,t){var n,r=e.get(t[0]);if(1===t.length)return r.map?e.set(t[0],{map:r.map}):e.delete(t[0]),null===(n=r.value)||void 0===n?void 0:n[0];var o=this.deleteByPath(r.map,t.slice(1));return r.map&&0!==r.map.size||r.value||e.delete(t[0]),o}},{key:"delete",value:function(e){if(this.has(e))return this.keys=this.keys.filter((function(t){return!function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}(t,e)})),this.deleteByPath(this.cache,e)}}]),e}();Yn(Yr,"MAX_CACHE_SIZE",20),Yn(Yr,"MAX_CACHE_OFFSET",5);var Jr=0,Zr=function(){function e(t){Dr(this,e),Yn(this,"derivatives",void 0),Yn(this,"id",void 0),this.derivatives=Array.isArray(t)?t:[t],this.id=Jr,0===t.length&&t.length,Jr+=1}return Br(e,[{key:"getDerivativeToken",value:function(e){return this.derivatives.reduce((function(t,n){return n(e,t)}),void 0)}}]),e}(),eo=new Yr;function to(e){var t=Array.isArray(e)?e:[e];return eo.has(t)||eo.set(t,new Zr(t)),eo.get(t)}var no=new WeakMap,ro={},oo=new WeakMap;function ao(e){var t=oo.get(e)||"";return t||(Object.keys(e).forEach((function(n){var r=e[n];t+=n,r instanceof Zr?t+=r.id:r&&"object"===Xn(r)?t+=ao(r):t+=r})),oo.set(e,t)),t}function io(e,t){return vr("".concat(t,"_").concat(ao(e)))}var lo="random-".concat(Date.now(),"-").concat(Math.random()).replace(/\./g,""),so="_bAmBoO_";var co=void 0,uo=br();function fo(e){return"number"==typeof e?"".concat(e,"px"):e}function po(e,t,n){var r;if(arguments.length>4&&void 0!==arguments[4]&&arguments[4])return e;var o=Zn(Zn({},arguments.length>3&&void 0!==arguments[3]?arguments[3]:{}),{},(Yn(r={},Gr,t),Yn(r,qr,n),r)),a=Object.keys(o).map((function(e){var t=o[e];return t?"".concat(e,'="').concat(t,'"'):null})).filter((function(e){return e})).join(" ");return"<style ".concat(a,">").concat(e,"</style>")}var mo=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"--".concat(t?"".concat(t,"-"):"").concat(e).replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/([A-Z]+)([A-Z][a-z0-9]+)/g,"$1-$2").replace(/([a-z])([A-Z0-9])/g,"$1-$2").toLowerCase()},ho=function(e,t,n){return Object.keys(e).length?".".concat(t).concat(null!=n&&n.scope?".".concat(n.scope):"","{").concat(Object.entries(e).map((function(e){var t=hr(e,2),n=t[0],r=t[1];return"".concat(n,":").concat(r,";")})).join(""),"}"):""},go=function(e,t,n){var r={},o={};return Object.entries(e).forEach((function(e){var t,a,i=hr(e,2),l=i[0],s=i[1];if(null!=n&&null!==(t=n.preserve)&&void 0!==t&&t[l])o[l]=s;else if(!("string"!=typeof s&&"number"!=typeof s||null!=n&&null!==(a=n.ignore)&&void 0!==a&&a[l])){var c,u=mo(l,null==n?void 0:n.prefix);r[u]="number"!=typeof s||null!=n&&null!==(c=n.unitless)&&void 0!==c&&c[l]?String(s):"".concat(s,"px"),o[l]="var(".concat(u,")")}})),[o,ho(r,t,{scope:null==n?void 0:n.scope})]},yo=br()?qn.useLayoutEffect:qn.useEffect;const vo=function(e,t){var n=qn.useRef(!0);yo((function(){return e(n.current)}),t),yo((function(){return n.current=!1,function(){n.current=!0}}),[])};var bo=Zn({},Kn).useInsertionEffect;const xo=bo?function(e,t,n){return bo((function(){return e(),t()}),n)}:function(e,t,n){qn.useMemo(e,n),vo((function(){return t(!0)}),n)};var wo=void 0!==Zn({},Kn).useInsertionEffect?function(e){var t=[],n=!1;return qn.useEffect((function(){return n=!1,function(){n=!0,t.length&&t.forEach((function(e){return e()}))}}),e),function(e){n||t.push(e)}}:function(){return function(e){e()}};const So=wo,_o=function(){return!1};function Eo(e,t,n,r,o){var a=qn.useContext(Qr).cache,i=Ur([e].concat(yr(t))),l=So([i]),s=(_o(),function(e){a.opUpdate(i,(function(t){var r=hr(t||[void 0,void 0],2),o=r[0],a=[void 0===o?0:o,r[1]||n()];return e?e(a):a}))});qn.useMemo((function(){s()}),[i]);var c=a.opGet(i)[1];return xo((function(){null==o||o(c)}),(function(e){return s((function(t){var n=hr(t,2),r=n[0],a=n[1];return e&&0===r&&(null==o||o(c)),[r+1,a]})),function(){a.opUpdate(i,(function(t){var n=hr(t||[],2),o=n[0],s=void 0===o?0:o,c=n[1];return 0==s-1?(l((function(){!e&&a.opGet(i)||null==r||r(c,!1)})),null):[s-1,c]}))}}),[i]),c}var ko={},To="css",Co=new Map,Oo=0;var Po=function(e,t,n,r){var o=Zn(Zn({},n.getDerivativeToken(e)),t);return r&&(o=r(o)),o},No="token";function Mo(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=(0,qn.useContext)(Qr),o=r.cache.instanceId,a=r.container,i=n.salt,l=void 0===i?"":i,s=n.override,c=void 0===s?ko:s,u=n.formatToken,f=n.getComputedToken,d=n.cssVar,p=function(e,n){for(var r=no,o=0;o<n.length;o+=1){var a=n[o];r.has(a)||r.set(a,new WeakMap),r=r.get(a)}return r.has(ro)||r.set(ro,Object.assign.apply(Object,[{}].concat(yr(t)))),r.get(ro)}(0,t),m=ao(p),h=ao(c),g=d?ao(d):"",y=Eo(No,[l,e.id,m,h,g],(function(){var t,n=f?f(p,c,e):Po(p,c,e,u),r=Zn({},n),o="";if(d){var a=hr(go(n,d.key,{prefix:d.prefix,ignore:d.ignore,unitless:d.unitless,preserve:d.preserve}),2);n=a[0],o=a[1]}var i=io(n,l);n._tokenKey=i,r._tokenKey=io(r,l);var s=null!==(t=null==d?void 0:d.key)&&void 0!==t?t:i;n._themeKey=s,function(e){Co.set(e,(Co.get(e)||0)+1)}(s);var m="".concat(To,"-").concat(vr(i));return n._hashId=m,[n,m,r,o,(null==d?void 0:d.key)||""]}),(function(e){!function(e,t){Co.set(e,(Co.get(e)||0)-1);var n=Array.from(Co.keys()),r=n.filter((function(e){return(Co.get(e)||0)<=0}));n.length-r.length>Oo&&r.forEach((function(e){!function(e,t){"undefined"!=typeof document&&document.querySelectorAll("style[".concat(Gr,'="').concat(e,'"]')).forEach((function(e){var n;e[Kr]===t&&(null===(n=e.parentNode)||void 0===n||n.removeChild(e))}))}(e,t),Co.delete(e)}))}(e[0]._themeKey,o)}),(function(e){var t=hr(e,4),n=t[0],r=t[3];if(d&&r){var i=Nr(r,vr("css-variables-".concat(n._themeKey)),{mark:qr,prepend:"queue",attachTo:a,priority:-999});i[Kr]=o,i.setAttribute(Gr,n._themeKey)}}));return y}function Io(){return Io=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Io.apply(this,arguments)}const Ao={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Ro="comm",jo="rule",zo="decl",Fo="@import",Lo="@keyframes",Do="@layer",$o=Math.abs,Bo=String.fromCharCode;function Ho(e){return e.trim()}function Uo(e,t,n){return e.replace(t,n)}function Wo(e,t,n){return e.indexOf(t,n)}function Vo(e,t){return 0|e.charCodeAt(t)}function Go(e,t,n){return e.slice(t,n)}function qo(e){return e.length}function Ko(e,t){return t.push(e),e}function Xo(e,t){for(var n="",r=0;r<e.length;r++)n+=t(e[r],r,e,t)||"";return n}function Qo(e,t,n,r){switch(e.type){case Do:if(e.children.length)break;case Fo:case zo:return e.return=e.return||e.value;case Ro:return"";case Lo:return e.return=e.value+"{"+Xo(e.children,r)+"}";case jo:if(!qo(e.value=e.props.join(",")))return""}return qo(n=Xo(e.children,r))?e.return=e.value+"{"+n+"}":""}Object.assign;var Yo=1,Jo=1,Zo=0,ea=0,ta=0,na="";function ra(e,t,n,r,o,a,i,l){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:Yo,column:Jo,length:i,return:"",siblings:l}}function oa(){return ta=ea>0?Vo(na,--ea):0,Jo--,10===ta&&(Jo=1,Yo--),ta}function aa(){return ta=ea<Zo?Vo(na,ea++):0,Jo++,10===ta&&(Jo=1,Yo++),ta}function ia(){return Vo(na,ea)}function la(){return ea}function sa(e,t){return Go(na,e,t)}function ca(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function ua(e){return Ho(sa(ea-1,pa(91===e?e+2:40===e?e+1:e)))}function fa(e){for(;(ta=ia())&&ta<33;)aa();return ca(e)>2||ca(ta)>3?"":" "}function da(e,t){for(;--t&&aa()&&!(ta<48||ta>102||ta>57&&ta<65||ta>70&&ta<97););return sa(e,la()+(t<6&&32==ia()&&32==aa()))}function pa(e){for(;aa();)switch(ta){case e:return ea;case 34:case 39:34!==e&&39!==e&&pa(ta);break;case 40:41===e&&pa(e);break;case 92:aa()}return ea}function ma(e,t){for(;aa()&&e+ta!==57&&(e+ta!==84||47!==ia()););return"/*"+sa(t,ea-1)+"*"+Bo(47===e?e:aa())}function ha(e){for(;!ca(ia());)aa();return sa(e,ea)}function ga(e){return function(e){return na="",e}(ya("",null,null,null,[""],e=function(e){return Yo=Jo=1,Zo=qo(na=e),ea=0,[]}(e),0,[0],e))}function ya(e,t,n,r,o,a,i,l,s){for(var c=0,u=0,f=i,d=0,p=0,m=0,h=1,g=1,y=1,v=0,b="",x=o,w=a,S=r,_=b;g;)switch(m=v,v=aa()){case 40:if(108!=m&&58==Vo(_,f-1)){-1!=Wo(_+=Uo(ua(v),"&","&\f"),"&\f",$o(c?l[c-1]:0))&&(y=-1);break}case 34:case 39:case 91:_+=ua(v);break;case 9:case 10:case 13:case 32:_+=fa(m);break;case 92:_+=da(la()-1,7);continue;case 47:switch(ia()){case 42:case 47:Ko(ba(ma(aa(),la()),t,n,s),s);break;default:_+="/"}break;case 123*h:l[c++]=qo(_)*y;case 125*h:case 59:case 0:switch(v){case 0:case 125:g=0;case 59+u:-1==y&&(_=Uo(_,/\f/g,"")),p>0&&qo(_)-f&&Ko(p>32?xa(_+";",r,n,f-1,s):xa(Uo(_," ","")+";",r,n,f-2,s),s);break;case 59:_+=";";default:if(Ko(S=va(_,t,n,c,u,o,l,b,x=[],w=[],f,a),a),123===v)if(0===u)ya(_,t,S,S,x,a,f,l,w);else switch(99===d&&110===Vo(_,3)?100:d){case 100:case 108:case 109:case 115:ya(e,S,S,r&&Ko(va(e,S,S,0,0,o,l,b,o,x=[],f,w),w),o,w,f,l,r?x:w);break;default:ya(_,S,S,S,[""],w,0,l,w)}}c=u=p=0,h=y=1,b=_="",f=i;break;case 58:f=1+qo(_),p=m;default:if(h<1)if(123==v)--h;else if(125==v&&0==h++&&125==oa())continue;switch(_+=Bo(v),v*h){case 38:y=u>0?1:(_+="\f",-1);break;case 44:l[c++]=(qo(_)-1)*y,y=1;break;case 64:45===ia()&&(_+=ua(aa())),d=ia(),u=f=qo(b=_+=ha(la())),v++;break;case 45:45===m&&2==qo(_)&&(h=0)}}return a}function va(e,t,n,r,o,a,i,l,s,c,u,f){for(var d=o-1,p=0===o?a:[""],m=function(e){return e.length}(p),h=0,g=0,y=0;h<r;++h)for(var v=0,b=Go(e,d+1,d=$o(g=i[h])),x=e;v<m;++v)(x=Ho(g>0?p[v]+" "+b:Uo(b,/&\f/g,p[v])))&&(s[y++]=x);return ra(e,t,n,0===o?jo:l,s,c,u,f)}function ba(e,t,n,r){return ra(e,t,n,Ro,Bo(ta),Go(e,2,-2),0,r)}function xa(e,t,n,r,o){return ra(e,t,n,zo,Go(e,0,r),Go(e,r+1,-1),r,o)}var wa,Sa="data-ant-cssinjs-cache-path",_a="_FILE_STYLE__",Ea=!0;var ka="_multi_value_";function Ta(e){return Xo(ga(e),Qo).replace(/\{%%%\:[^;];}/g,";")}var Ca=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{root:!0,parentSelectors:[]},o=r.root,a=r.injectHash,i=r.parentSelectors,l=n.hashId,s=n.layer,c=(n.path,n.hashPriority),u=n.transformers,f=void 0===u?[]:u,d=(n.linters,""),p={};function m(t){var r=t.getName(l);if(!p[r]){var o=hr(e(t.style,n,{root:!1,parentSelectors:i}),1)[0];p[r]="@keyframes ".concat(t.getName(l)).concat(o)}}var h=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return t.forEach((function(t){Array.isArray(t)?e(t,n):t&&n.push(t)})),n}(Array.isArray(t)?t:[t]);if(h.forEach((function(t){var r="string"!=typeof t||o?t:{};if("string"==typeof r)d+="".concat(r,"\n");else if(r._keyframe)m(r);else{var s=f.reduce((function(e,t){var n;return(null==t||null===(n=t.visit)||void 0===n?void 0:n.call(t,e))||e}),r);Object.keys(s).forEach((function(t){var r=s[t];if("object"!==Xn(r)||!r||"animationName"===t&&r._keyframe||function(e){return"object"===Xn(e)&&e&&("_skip_check_"in e||ka in e)}(r)){var u;function w(e,t){var n=e.replace(/[A-Z]/g,(function(e){return"-".concat(e.toLowerCase())})),r=t;Ao[e]||"number"!=typeof r||0===r||(r="".concat(r,"px")),"animationName"===e&&null!=t&&t._keyframe&&(m(t),r=t.getName(l)),d+="".concat(n,":").concat(r,";")}var f=null!==(u=null==r?void 0:r.value)&&void 0!==u?u:r;"object"===Xn(r)&&null!=r&&r[ka]&&Array.isArray(f)?f.forEach((function(e){w(t,e)})):w(t,f)}else{var h=!1,g=t.trim(),y=!1;(o||a)&&l?g.startsWith("@")?h=!0:g=function(e,t,n){if(!t)return e;var r=".".concat(t),o="low"===n?":where(".concat(r,")"):r,a=e.split(",").map((function(e){var t,n=e.trim().split(/\s+/),r=n[0]||"",a=(null===(t=r.match(/^\w+/))||void 0===t?void 0:t[0])||"";return[r="".concat(a).concat(o).concat(r.slice(a.length))].concat(yr(n.slice(1))).join(" ")}));return a.join(",")}(t,l,c):!o||l||"&"!==g&&""!==g||(g="",y=!0);var v=hr(e(r,n,{root:y,injectHash:h,parentSelectors:[].concat(yr(i),[g])}),2),b=v[0],x=v[1];p=Zn(Zn({},p),x),d+="".concat(g).concat(b)}}))}})),o){if(s&&(void 0===co&&(co=function(e,t,n){if(br()){var r,o;Nr(e,lo);var a=document.createElement("div");a.style.position="fixed",a.style.left="0",a.style.top="0",null==t||t(a),document.body.appendChild(a);var i=n?n(a):null===(r=getComputedStyle(a).content)||void 0===r?void 0:r.includes(so);return null===(o=a.parentNode)||void 0===o||o.removeChild(a),Pr(lo),i}return!1}("@layer ".concat(lo," { .").concat(lo,' { content: "').concat(so,'"!important; } }'),(function(e){e.className=lo}))),co)){var g=s.split(","),y=g[g.length-1].trim();d="@layer ".concat(y," {").concat(d,"}"),g.length>1&&(d="@layer ".concat(s,"{%%%:%}").concat(d))}}else d="{".concat(d,"}");return[d,p]};function Oa(e,t){return vr("".concat(e.join("%")).concat(t))}function Pa(){return null}var Na="style";function Ma(e,t){var n=e.token,r=e.path,o=e.hashId,a=e.layer,i=e.nonce,l=e.clientOnly,s=e.order,c=void 0===s?0:s,u=qn.useContext(Qr),f=u.autoClear,d=(u.mock,u.defaultCache),p=u.hashPriority,m=u.container,h=u.ssrInline,g=u.transformers,y=u.linters,v=u.cache,b=n._tokenKey,x=[b].concat(yr(r)),w=uo,S=Eo(Na,x,(function(){var e=x.join("|");if(function(e){return function(){if(!wa&&(wa={},br())){var e=document.createElement("div");e.className=Sa,e.style.position="fixed",e.style.visibility="hidden",e.style.top="-9999px",document.body.appendChild(e);var t=getComputedStyle(e).content||"";(t=t.replace(/^"/,"").replace(/"$/,"")).split(";").forEach((function(e){var t=hr(e.split(":"),2),n=t[0],r=t[1];wa[n]=r}));var n,r=document.querySelector("style[".concat(Sa,"]"));r&&(Ea=!1,null===(n=r.parentNode)||void 0===n||n.removeChild(r)),document.body.removeChild(e)}}(),!!wa[e]}(e)){var n=function(e){var t=wa[e],n=null;if(t&&br())if(Ea)n=_a;else{var r=document.querySelector("style[".concat(qr,'="').concat(wa[e],'"]'));r?n=r.innerHTML:delete wa[e]}return[n,t]}(e),i=hr(n,2),s=i[0],u=i[1];if(s)return[s,b,u,{},l,c]}var f=t(),d=hr(Ca(f,{hashId:o,hashPriority:p,layer:a,path:r.join("-"),transformers:g,linters:y}),2),m=d[0],h=d[1],v=Ta(m),w=Oa(x,v);return[v,b,w,h,l,c]}),(function(e,t){var n=hr(e,3)[2];(t||f)&&uo&&Pr(n,{mark:qr})}),(function(e){var t=hr(e,4),n=t[0],r=(t[1],t[2]),o=t[3];if(w&&n!==_a){var a={mark:qr,prepend:"queue",attachTo:m,priority:c},l="function"==typeof i?i():i;l&&(a.csp={nonce:l});var s=Nr(n,r,a);s[Kr]=v.instanceId,s.setAttribute(Gr,b),Object.keys(o).forEach((function(e){Nr(Ta(o[e]),"_effect-".concat(e),a)}))}})),_=hr(S,3),E=_[0],k=_[1],T=_[2];return function(e){var t,n;return t=h&&!w&&d?qn.createElement("style",Io({},(Yn(n={},Gr,k),Yn(n,qr,T),n),{dangerouslySetInnerHTML:{__html:E}})):qn.createElement(Pa,null),qn.createElement(qn.Fragment,null,t,e)}}var Ia="cssVar";var Aa;Yn(Aa={},Na,(function(e,t,n){var r=hr(e,6),o=r[0],a=r[1],i=r[2],l=r[3],s=r[4],c=r[5],u=(n||{}).plain;if(s)return null;var f=o,d={"data-rc-order":"prependQueue","data-rc-priority":"".concat(c)};return f=po(o,a,i,d,u),l&&Object.keys(l).forEach((function(e){if(!t[e]){t[e]=!0;var n=Ta(l[e]);f+=po(n,a,"_effect-".concat(e),d,u)}})),[c,i,f]})),Yn(Aa,No,(function(e,t,n){var r=hr(e,5),o=r[2],a=r[3],i=r[4],l=(n||{}).plain;if(!a)return null;var s=o._tokenKey;return[-999,s,po(a,i,s,{"data-rc-order":"prependQueue","data-rc-priority":"".concat(-999)},l)]})),Yn(Aa,Ia,(function(e,t,n){var r=hr(e,4),o=r[1],a=r[2],i=r[3],l=(n||{}).plain;return o?[-999,a,po(o,i,a,{"data-rc-order":"prependQueue","data-rc-priority":"".concat(-999)},l)]:null}));var Ra=function(){function e(t,n){Dr(this,e),Yn(this,"name",void 0),Yn(this,"style",void 0),Yn(this,"_keyframe",!0),this.name=t,this.style=n}return Br(e,[{key:"getName",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return e?"".concat(e,"-").concat(this.name):this.name}}]),e}();const ja=Ra;function za(e){return e.notSplit=!0,e}za(["borderTop","borderBottom"]),za(["borderTop"]),za(["borderBottom"]),za(["borderLeft","borderRight"]),za(["borderLeft"]),za(["borderRight"]);const Fa=(0,qn.createContext)({});function La(e,t){for(var n=e,r=0;r<t.length;r+=1){if(null==n)return;n=n[t[r]]}return n}function Da(e,t,n,r){if(!t.length)return n;var o,a,i=fr(o=t)||gr(o)||pr(o)||mr(),l=i[0],s=i.slice(1);return a=e||"number"!=typeof l?Array.isArray(e)?yr(e):Zn({},e):[],r&&void 0===n&&1===s.length?delete a[l][s[0]]:a[l]=Da(a[l],s,n,r),a}function $a(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return t.length&&r&&void 0===n&&!La(e,t.slice(0,-1))?e:Da(e,t,n,r)}function Ba(e){return Array.isArray(e)?[]:{}}var Ha="undefined"==typeof Reflect?Object.keys:Reflect.ownKeys;function Ua(){}const Wa=qn.createContext({}),Va=()=>{const e=()=>{};return e.deprecated=Ua,e},Ga=(0,qn.createContext)(void 0),qa={placeholder:"Select time",rangePlaceholder:["Start time","End time"]},Ka={lang:Object.assign({placeholder:"Select date",yearPlaceholder:"Select year",quarterPlaceholder:"Select quarter",monthPlaceholder:"Select month",weekPlaceholder:"Select week",rangePlaceholder:["Start date","End date"],rangeYearPlaceholder:["Start year","End year"],rangeQuarterPlaceholder:["Start quarter","End quarter"],rangeMonthPlaceholder:["Start month","End month"],rangeWeekPlaceholder:["Start week","End week"]},{locale:"en_US",today:"Today",now:"Now",backToToday:"Back to today",ok:"OK",clear:"Clear",month:"Month",year:"Year",timeSelect:"select time",dateSelect:"select date",weekSelect:"Choose a week",monthSelect:"Choose a month",yearSelect:"Choose a year",decadeSelect:"Choose a decade",yearFormat:"YYYY",dateFormat:"M/D/YYYY",dayFormat:"D",dateTimeFormat:"M/D/YYYY HH:mm:ss",monthBeforeYear:!0,previousMonth:"Previous month (PageUp)",nextMonth:"Next month (PageDown)",previousYear:"Last year (Control + left)",nextYear:"Next year (Control + right)",previousDecade:"Last decade",nextDecade:"Next decade",previousCentury:"Last century",nextCentury:"Next century"}),timePickerLocale:Object.assign({},qa)},Xa="${label} is not a valid ${type}",Qa={locale:"en",Pagination:{items_per_page:"/ page",jump_to:"Go to",jump_to_confirm:"confirm",page:"Page",prev_page:"Previous Page",next_page:"Next Page",prev_5:"Previous 5 Pages",next_5:"Next 5 Pages",prev_3:"Previous 3 Pages",next_3:"Next 3 Pages",page_size:"Page Size"},DatePicker:Ka,TimePicker:qa,Calendar:Ka,global:{placeholder:"Please select"},Table:{filterTitle:"Filter menu",filterConfirm:"OK",filterReset:"Reset",filterEmptyText:"No filters",filterCheckall:"Select all items",filterSearchPlaceholder:"Search in filters",emptyText:"No data",selectAll:"Select current page",selectInvert:"Invert current page",selectNone:"Clear all data",selectionAll:"Select all data",sortTitle:"Sort",expand:"Expand row",collapse:"Collapse row",triggerDesc:"Click to sort descending",triggerAsc:"Click to sort ascending",cancelSort:"Click to cancel sorting"},Tour:{Next:"Next",Previous:"Previous",Finish:"Finish"},Modal:{okText:"OK",cancelText:"Cancel",justOkText:"OK"},Popconfirm:{okText:"OK",cancelText:"Cancel"},Transfer:{titles:["",""],searchPlaceholder:"Search here",itemUnit:"item",itemsUnit:"items",remove:"Remove",selectCurrent:"Select current page",removeCurrent:"Remove current page",selectAll:"Select all data",removeAll:"Remove all data",selectInvert:"Invert current page"},Upload:{uploading:"Uploading...",removeFile:"Remove file",uploadError:"Upload error",previewFile:"Preview file",downloadFile:"Download file"},Empty:{description:"No data"},Icon:{icon:"icon"},Text:{edit:"Edit",copy:"Copy",copied:"Copied",expand:"Expand"},Form:{optional:"(optional)",defaultValidateMessages:{default:"Field validation error for ${label}",required:"Please enter ${label}",enum:"${label} must be one of [${enum}]",whitespace:"${label} cannot be a blank character",date:{format:"${label} date format is invalid",parse:"${label} cannot be converted to a date",invalid:"${label} is an invalid date"},types:{string:Xa,method:Xa,array:Xa,object:Xa,number:Xa,date:Xa,boolean:Xa,integer:Xa,float:Xa,regexp:Xa,email:Xa,url:Xa,hex:Xa},string:{len:"${label} must be ${len} characters",min:"${label} must be at least ${min} characters",max:"${label} must be up to ${max} characters",range:"${label} must be between ${min}-${max} characters"},number:{len:"${label} must be equal to ${len}",min:"${label} must be minimum ${min}",max:"${label} must be maximum ${max}",range:"${label} must be between ${min}-${max}"},array:{len:"Must be ${len} ${label}",min:"At least ${min} ${label}",max:"At most ${max} ${label}",range:"The amount of ${label} must be between ${min}-${max}"},pattern:{mismatch:"${label} does not match the pattern ${pattern}"}}},Image:{preview:"Preview"},QRCode:{expired:"QR code expired",refresh:"Refresh",scanned:"Scanned"},ColorPicker:{presetEmpty:"Empty"}};let Ya=Object.assign({},Qa.Modal),Ja=[];const Za=()=>Ja.reduce(((e,t)=>Object.assign(Object.assign({},e),t)),Qa.Modal),ei=(0,qn.createContext)(void 0),ti=e=>{const{locale:t={},children:n,_ANT_MARK__:r}=e;qn.useEffect((()=>{const e=function(e){if(e){const t=Object.assign({},e);return Ja.push(t),Ya=Za(),()=>{Ja=Ja.filter((e=>e!==t)),Ya=Za()}}Ya=Object.assign({},Qa.Modal)}(t&&t.Modal);return e}),[t]);const o=qn.useMemo((()=>Object.assign(Object.assign({},t),{exist:!0})),[t]);return qn.createElement(ei.Provider,{value:o},n)};function ni(e,t){(function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&1===parseFloat(e)})(e)&&(e="100%");var n=function(e){return"string"==typeof e&&-1!==e.indexOf("%")}(e);return e=360===t?e:Math.min(t,Math.max(0,parseFloat(e))),n&&(e=parseInt(String(e*t),10)/100),Math.abs(e-t)<1e-6?1:e=360===t?(e<0?e%t+t:e%t)/parseFloat(String(t)):e%t/parseFloat(String(t))}function ri(e){return Math.min(1,Math.max(0,e))}function oi(e){return e=parseFloat(e),(isNaN(e)||e<0||e>1)&&(e=1),e}function ai(e){return e<=1?"".concat(100*Number(e),"%"):e}function ii(e){return 1===e.length?"0"+e:String(e)}function li(e,t,n){e=ni(e,255),t=ni(t,255),n=ni(n,255);var r=Math.max(e,t,n),o=Math.min(e,t,n),a=0,i=0,l=(r+o)/2;if(r===o)i=0,a=0;else{var s=r-o;switch(i=l>.5?s/(2-r-o):s/(r+o),r){case e:a=(t-n)/s+(t<n?6:0);break;case t:a=(n-e)/s+2;break;case n:a=(e-t)/s+4}a/=6}return{h:a,s:i,l}}function si(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*n*(t-e):n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function ci(e,t,n){e=ni(e,255),t=ni(t,255),n=ni(n,255);var r=Math.max(e,t,n),o=Math.min(e,t,n),a=0,i=r,l=r-o,s=0===r?0:l/r;if(r===o)a=0;else{switch(r){case e:a=(t-n)/l+(t<n?6:0);break;case t:a=(n-e)/l+2;break;case n:a=(e-t)/l+4}a/=6}return{h:a,s,v:i}}function ui(e,t,n,r){var o=[ii(Math.round(e).toString(16)),ii(Math.round(t).toString(16)),ii(Math.round(n).toString(16))];return r&&o[0].startsWith(o[0].charAt(1))&&o[1].startsWith(o[1].charAt(1))&&o[2].startsWith(o[2].charAt(1))?o[0].charAt(0)+o[1].charAt(0)+o[2].charAt(0):o.join("")}function fi(e){return Math.round(255*parseFloat(e)).toString(16)}function di(e){return pi(e)/255}function pi(e){return parseInt(e,16)}var mi={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",goldenrod:"#daa520",gold:"#ffd700",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavenderblush:"#fff0f5",lavender:"#e6e6fa",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function hi(e){var t={r:0,g:0,b:0},n=1,r=null,o=null,a=null,i=!1,l=!1;return"string"==typeof e&&(e=function(e){if(0===(e=e.trim().toLowerCase()).length)return!1;var t=!1;if(mi[e])e=mi[e],t=!0;else if("transparent"===e)return{r:0,g:0,b:0,a:0,format:"name"};var n=bi.rgb.exec(e);return n?{r:n[1],g:n[2],b:n[3]}:(n=bi.rgba.exec(e))?{r:n[1],g:n[2],b:n[3],a:n[4]}:(n=bi.hsl.exec(e))?{h:n[1],s:n[2],l:n[3]}:(n=bi.hsla.exec(e))?{h:n[1],s:n[2],l:n[3],a:n[4]}:(n=bi.hsv.exec(e))?{h:n[1],s:n[2],v:n[3]}:(n=bi.hsva.exec(e))?{h:n[1],s:n[2],v:n[3],a:n[4]}:(n=bi.hex8.exec(e))?{r:pi(n[1]),g:pi(n[2]),b:pi(n[3]),a:di(n[4]),format:t?"name":"hex8"}:(n=bi.hex6.exec(e))?{r:pi(n[1]),g:pi(n[2]),b:pi(n[3]),format:t?"name":"hex"}:(n=bi.hex4.exec(e))?{r:pi(n[1]+n[1]),g:pi(n[2]+n[2]),b:pi(n[3]+n[3]),a:di(n[4]+n[4]),format:t?"name":"hex8"}:!!(n=bi.hex3.exec(e))&&{r:pi(n[1]+n[1]),g:pi(n[2]+n[2]),b:pi(n[3]+n[3]),format:t?"name":"hex"}}(e)),"object"==typeof e&&(xi(e.r)&&xi(e.g)&&xi(e.b)?(t=function(e,t,n){return{r:255*ni(e,255),g:255*ni(t,255),b:255*ni(n,255)}}(e.r,e.g,e.b),i=!0,l="%"===String(e.r).substr(-1)?"prgb":"rgb"):xi(e.h)&&xi(e.s)&&xi(e.v)?(r=ai(e.s),o=ai(e.v),t=function(e,t,n){e=6*ni(e,360),t=ni(t,100),n=ni(n,100);var r=Math.floor(e),o=e-r,a=n*(1-t),i=n*(1-o*t),l=n*(1-(1-o)*t),s=r%6;return{r:255*[n,i,a,a,l,n][s],g:255*[l,n,n,i,a,a][s],b:255*[a,a,l,n,n,i][s]}}(e.h,r,o),i=!0,l="hsv"):xi(e.h)&&xi(e.s)&&xi(e.l)&&(r=ai(e.s),a=ai(e.l),t=function(e,t,n){var r,o,a;if(e=ni(e,360),t=ni(t,100),n=ni(n,100),0===t)o=n,a=n,r=n;else{var i=n<.5?n*(1+t):n+t-n*t,l=2*n-i;r=si(l,i,e+1/3),o=si(l,i,e),a=si(l,i,e-1/3)}return{r:255*r,g:255*o,b:255*a}}(e.h,r,a),i=!0,l="hsl"),Object.prototype.hasOwnProperty.call(e,"a")&&(n=e.a)),n=oi(n),{ok:i,format:e.format||l,r:Math.min(255,Math.max(t.r,0)),g:Math.min(255,Math.max(t.g,0)),b:Math.min(255,Math.max(t.b,0)),a:n}}var gi="(?:".concat("[-\\+]?\\d*\\.\\d+%?",")|(?:").concat("[-\\+]?\\d+%?",")"),yi="[\\s|\\(]+(".concat(gi,")[,|\\s]+(").concat(gi,")[,|\\s]+(").concat(gi,")\\s*\\)?"),vi="[\\s|\\(]+(".concat(gi,")[,|\\s]+(").concat(gi,")[,|\\s]+(").concat(gi,")[,|\\s]+(").concat(gi,")\\s*\\)?"),bi={CSS_UNIT:new RegExp(gi),rgb:new RegExp("rgb"+yi),rgba:new RegExp("rgba"+vi),hsl:new RegExp("hsl"+yi),hsla:new RegExp("hsla"+vi),hsv:new RegExp("hsv"+yi),hsva:new RegExp("hsva"+vi),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/};function xi(e){return Boolean(bi.CSS_UNIT.exec(String(e)))}var wi=2,Si=.16,_i=.05,Ei=.05,ki=.15,Ti=5,Ci=4,Oi=[{index:7,opacity:.15},{index:6,opacity:.25},{index:5,opacity:.3},{index:5,opacity:.45},{index:5,opacity:.65},{index:5,opacity:.85},{index:4,opacity:.9},{index:3,opacity:.95},{index:2,opacity:.97},{index:1,opacity:.98}];function Pi(e){var t=ci(e.r,e.g,e.b);return{h:360*t.h,s:t.s,v:t.v}}function Ni(e){var t=e.r,n=e.g,r=e.b;return"#".concat(ui(t,n,r,!1))}function Mi(e,t,n){var r;return(r=Math.round(e.h)>=60&&Math.round(e.h)<=240?n?Math.round(e.h)-wi*t:Math.round(e.h)+wi*t:n?Math.round(e.h)+wi*t:Math.round(e.h)-wi*t)<0?r+=360:r>=360&&(r-=360),r}function Ii(e,t,n){return 0===e.h&&0===e.s?e.s:((r=n?e.s-Si*t:t===Ci?e.s+Si:e.s+_i*t)>1&&(r=1),n&&t===Ti&&r>.1&&(r=.1),r<.06&&(r=.06),Number(r.toFixed(2)));var r}function Ai(e,t,n){var r;return(r=n?e.v+Ei*t:e.v-ki*t)>1&&(r=1),Number(r.toFixed(2))}function Ri(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=[],r=hi(e),o=Ti;o>0;o-=1){var a=Pi(r),i=Ni(hi({h:Mi(a,o,!0),s:Ii(a,o,!0),v:Ai(a,o,!0)}));n.push(i)}n.push(Ni(r));for(var l=1;l<=Ci;l+=1){var s=Pi(r),c=Ni(hi({h:Mi(s,l),s:Ii(s,l),v:Ai(s,l)}));n.push(c)}return"dark"===t.theme?Oi.map((function(e){var r=e.index,o=e.opacity,a=Ni(function(e,t,n){var r=n/100;return{r:(t.r-e.r)*r+e.r,g:(t.g-e.g)*r+e.g,b:(t.b-e.b)*r+e.b}}(hi(t.backgroundColor||"#141414"),hi(n[r]),100*o));return a})):n}var ji={red:"#F5222D",volcano:"#FA541C",orange:"#FA8C16",gold:"#FAAD14",yellow:"#FADB14",lime:"#A0D911",green:"#52C41A",cyan:"#13C2C2",blue:"#1677FF",geekblue:"#2F54EB",purple:"#722ED1",magenta:"#EB2F96",grey:"#666666"},zi={},Fi={};Object.keys(ji).forEach((function(e){zi[e]=Ri(ji[e]),zi[e].primary=zi[e][5],Fi[e]=Ri(ji[e],{theme:"dark",backgroundColor:"#141414"}),Fi[e].primary=Fi[e][5]})),zi.red,zi.volcano,zi.gold,zi.orange,zi.yellow,zi.lime,zi.green,zi.cyan;var Li=zi.blue;zi.geekblue,zi.purple,zi.magenta,zi.grey,zi.grey;const Di={blue:"#1677ff",purple:"#722ED1",cyan:"#13C2C2",green:"#52C41A",magenta:"#EB2F96",pink:"#eb2f96",red:"#F5222D",orange:"#FA8C16",yellow:"#FADB14",volcano:"#FA541C",geekblue:"#2F54EB",gold:"#FAAD14",lime:"#A0D911"},$i=Object.assign(Object.assign({},Di),{colorPrimary:"#1677ff",colorSuccess:"#52c41a",colorWarning:"#faad14",colorError:"#ff4d4f",colorInfo:"#1677ff",colorLink:"",colorTextBase:"",colorBgBase:"",fontFamily:"-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',\n'Noto Color Emoji'",fontFamilyCode:"'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace",fontSize:14,lineWidth:1,lineType:"solid",motionUnit:.1,motionBase:0,motionEaseOutCirc:"cubic-bezier(0.08, 0.82, 0.17, 1)",motionEaseInOutCirc:"cubic-bezier(0.78, 0.14, 0.15, 0.86)",motionEaseOut:"cubic-bezier(0.215, 0.61, 0.355, 1)",motionEaseInOut:"cubic-bezier(0.645, 0.045, 0.355, 1)",motionEaseOutBack:"cubic-bezier(0.12, 0.4, 0.29, 1.46)",motionEaseInBack:"cubic-bezier(0.71, -0.46, 0.88, 0.6)",motionEaseInQuint:"cubic-bezier(0.755, 0.05, 0.855, 0.06)",motionEaseOutQuint:"cubic-bezier(0.23, 1, 0.32, 1)",borderRadius:6,sizeUnit:4,sizeStep:4,sizePopupArrow:16,controlHeight:32,zIndexBase:0,zIndexPopupBase:1e3,opacityImage:1,wireframe:!1,motion:!0});var Bi=function(){function e(t,n){var r;if(void 0===t&&(t=""),void 0===n&&(n={}),t instanceof e)return t;"number"==typeof t&&(t=function(e){return{r:e>>16,g:(65280&e)>>8,b:255&e}}(t)),this.originalInput=t;var o=hi(t);this.originalInput=t,this.r=o.r,this.g=o.g,this.b=o.b,this.a=o.a,this.roundA=Math.round(100*this.a)/100,this.format=null!==(r=n.format)&&void 0!==r?r:o.format,this.gradientType=n.gradientType,this.r<1&&(this.r=Math.round(this.r)),this.g<1&&(this.g=Math.round(this.g)),this.b<1&&(this.b=Math.round(this.b)),this.isValid=o.ok}return e.prototype.isDark=function(){return this.getBrightness()<128},e.prototype.isLight=function(){return!this.isDark()},e.prototype.getBrightness=function(){var e=this.toRgb();return(299*e.r+587*e.g+114*e.b)/1e3},e.prototype.getLuminance=function(){var e=this.toRgb(),t=e.r/255,n=e.g/255,r=e.b/255;return.2126*(t<=.03928?t/12.92:Math.pow((t+.055)/1.055,2.4))+.7152*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))+.0722*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))},e.prototype.getAlpha=function(){return this.a},e.prototype.setAlpha=function(e){return this.a=oi(e),this.roundA=Math.round(100*this.a)/100,this},e.prototype.isMonochrome=function(){return 0===this.toHsl().s},e.prototype.toHsv=function(){var e=ci(this.r,this.g,this.b);return{h:360*e.h,s:e.s,v:e.v,a:this.a}},e.prototype.toHsvString=function(){var e=ci(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.v);return 1===this.a?"hsv(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsva(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHsl=function(){var e=li(this.r,this.g,this.b);return{h:360*e.h,s:e.s,l:e.l,a:this.a}},e.prototype.toHslString=function(){var e=li(this.r,this.g,this.b),t=Math.round(360*e.h),n=Math.round(100*e.s),r=Math.round(100*e.l);return 1===this.a?"hsl(".concat(t,", ").concat(n,"%, ").concat(r,"%)"):"hsla(".concat(t,", ").concat(n,"%, ").concat(r,"%, ").concat(this.roundA,")")},e.prototype.toHex=function(e){return void 0===e&&(e=!1),ui(this.r,this.g,this.b,e)},e.prototype.toHexString=function(e){return void 0===e&&(e=!1),"#"+this.toHex(e)},e.prototype.toHex8=function(e){return void 0===e&&(e=!1),function(e,t,n,r,o){var a=[ii(Math.round(e).toString(16)),ii(Math.round(t).toString(16)),ii(Math.round(n).toString(16)),ii(fi(r))];return o&&a[0].startsWith(a[0].charAt(1))&&a[1].startsWith(a[1].charAt(1))&&a[2].startsWith(a[2].charAt(1))&&a[3].startsWith(a[3].charAt(1))?a[0].charAt(0)+a[1].charAt(0)+a[2].charAt(0)+a[3].charAt(0):a.join("")}(this.r,this.g,this.b,this.a,e)},e.prototype.toHex8String=function(e){return void 0===e&&(e=!1),"#"+this.toHex8(e)},e.prototype.toHexShortString=function(e){return void 0===e&&(e=!1),1===this.a?this.toHexString(e):this.toHex8String(e)},e.prototype.toRgb=function(){return{r:Math.round(this.r),g:Math.round(this.g),b:Math.round(this.b),a:this.a}},e.prototype.toRgbString=function(){var e=Math.round(this.r),t=Math.round(this.g),n=Math.round(this.b);return 1===this.a?"rgb(".concat(e,", ").concat(t,", ").concat(n,")"):"rgba(".concat(e,", ").concat(t,", ").concat(n,", ").concat(this.roundA,")")},e.prototype.toPercentageRgb=function(){var e=function(e){return"".concat(Math.round(100*ni(e,255)),"%")};return{r:e(this.r),g:e(this.g),b:e(this.b),a:this.a}},e.prototype.toPercentageRgbString=function(){var e=function(e){return Math.round(100*ni(e,255))};return 1===this.a?"rgb(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%)"):"rgba(".concat(e(this.r),"%, ").concat(e(this.g),"%, ").concat(e(this.b),"%, ").concat(this.roundA,")")},e.prototype.toName=function(){if(0===this.a)return"transparent";if(this.a<1)return!1;for(var e="#"+ui(this.r,this.g,this.b,!1),t=0,n=Object.entries(mi);t<n.length;t++){var r=n[t],o=r[0];if(e===r[1])return o}return!1},e.prototype.toString=function(e){var t=Boolean(e);e=null!=e?e:this.format;var n=!1,r=this.a<1&&this.a>=0;return t||!r||!e.startsWith("hex")&&"name"!==e?("rgb"===e&&(n=this.toRgbString()),"prgb"===e&&(n=this.toPercentageRgbString()),"hex"!==e&&"hex6"!==e||(n=this.toHexString()),"hex3"===e&&(n=this.toHexString(!0)),"hex4"===e&&(n=this.toHex8String(!0)),"hex8"===e&&(n=this.toHex8String()),"name"===e&&(n=this.toName()),"hsl"===e&&(n=this.toHslString()),"hsv"===e&&(n=this.toHsvString()),n||this.toHexString()):"name"===e&&0===this.a?this.toName():this.toRgbString()},e.prototype.toNumber=function(){return(Math.round(this.r)<<16)+(Math.round(this.g)<<8)+Math.round(this.b)},e.prototype.clone=function(){return new e(this.toString())},e.prototype.lighten=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l+=t/100,n.l=ri(n.l),new e(n)},e.prototype.brighten=function(t){void 0===t&&(t=10);var n=this.toRgb();return n.r=Math.max(0,Math.min(255,n.r-Math.round(-t/100*255))),n.g=Math.max(0,Math.min(255,n.g-Math.round(-t/100*255))),n.b=Math.max(0,Math.min(255,n.b-Math.round(-t/100*255))),new e(n)},e.prototype.darken=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.l-=t/100,n.l=ri(n.l),new e(n)},e.prototype.tint=function(e){return void 0===e&&(e=10),this.mix("white",e)},e.prototype.shade=function(e){return void 0===e&&(e=10),this.mix("black",e)},e.prototype.desaturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s-=t/100,n.s=ri(n.s),new e(n)},e.prototype.saturate=function(t){void 0===t&&(t=10);var n=this.toHsl();return n.s+=t/100,n.s=ri(n.s),new e(n)},e.prototype.greyscale=function(){return this.desaturate(100)},e.prototype.spin=function(t){var n=this.toHsl(),r=(n.h+t)%360;return n.h=r<0?360+r:r,new e(n)},e.prototype.mix=function(t,n){void 0===n&&(n=50);var r=this.toRgb(),o=new e(t).toRgb(),a=n/100;return new e({r:(o.r-r.r)*a+r.r,g:(o.g-r.g)*a+r.g,b:(o.b-r.b)*a+r.b,a:(o.a-r.a)*a+r.a})},e.prototype.analogous=function(t,n){void 0===t&&(t=6),void 0===n&&(n=30);var r=this.toHsl(),o=360/n,a=[this];for(r.h=(r.h-(o*t>>1)+720)%360;--t;)r.h=(r.h+o)%360,a.push(new e(r));return a},e.prototype.complement=function(){var t=this.toHsl();return t.h=(t.h+180)%360,new e(t)},e.prototype.monochromatic=function(t){void 0===t&&(t=6);for(var n=this.toHsv(),r=n.h,o=n.s,a=n.v,i=[],l=1/t;t--;)i.push(new e({h:r,s:o,v:a})),a=(a+l)%1;return i},e.prototype.splitcomplement=function(){var t=this.toHsl(),n=t.h;return[this,new e({h:(n+72)%360,s:t.s,l:t.l}),new e({h:(n+216)%360,s:t.s,l:t.l})]},e.prototype.onBackground=function(t){var n=this.toRgb(),r=new e(t).toRgb(),o=n.a+r.a*(1-n.a);return new e({r:(n.r*n.a+r.r*r.a*(1-n.a))/o,g:(n.g*n.a+r.g*r.a*(1-n.a))/o,b:(n.b*n.a+r.b*r.a*(1-n.a))/o,a:o})},e.prototype.triad=function(){return this.polyad(3)},e.prototype.tetrad=function(){return this.polyad(4)},e.prototype.polyad=function(t){for(var n=this.toHsl(),r=n.h,o=[this],a=360/t,i=1;i<t;i++)o.push(new e({h:(r+i*a)%360,s:n.s,l:n.l}));return o},e.prototype.equals=function(t){return this.toRgbString()===new e(t).toRgbString()},e}();const Hi=(e,t)=>new Bi(e).setAlpha(t).toRgbString(),Ui=(e,t)=>new Bi(e).darken(t).toHexString(),Wi=e=>{const t=Ri(e);return{1:t[0],2:t[1],3:t[2],4:t[3],5:t[4],6:t[5],7:t[6],8:t[4],9:t[5],10:t[6]}},Vi=(e,t)=>{const n=e||"#fff",r=t||"#000";return{colorBgBase:n,colorTextBase:r,colorText:Hi(r,.88),colorTextSecondary:Hi(r,.65),colorTextTertiary:Hi(r,.45),colorTextQuaternary:Hi(r,.25),colorFill:Hi(r,.15),colorFillSecondary:Hi(r,.06),colorFillTertiary:Hi(r,.04),colorFillQuaternary:Hi(r,.02),colorBgLayout:Ui(n,4),colorBgContainer:Ui(n,0),colorBgElevated:Ui(n,0),colorBgSpotlight:Hi(r,.85),colorBgBlur:"transparent",colorBorder:Ui(n,15),colorBorderSecondary:Ui(n,6)}},Gi=to((function(e){const t=Object.keys(Di).map((t=>{const n=Ri(e[t]);return new Array(10).fill(1).reduce(((e,r,o)=>(e[`${t}-${o+1}`]=n[o],e[`${t}${o+1}`]=n[o],e)),{})})).reduce(((e,t)=>Object.assign(Object.assign({},e),t)),{});return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},e),t),function(e,t){let{generateColorPalettes:n,generateNeutralColorPalettes:r}=t;const{colorSuccess:o,colorWarning:a,colorError:i,colorInfo:l,colorPrimary:s,colorBgBase:c,colorTextBase:u}=e,f=n(s),d=n(o),p=n(a),m=n(i),h=n(l),g=r(c,u),y=n(e.colorLink||e.colorInfo);return Object.assign(Object.assign({},g),{colorPrimaryBg:f[1],colorPrimaryBgHover:f[2],colorPrimaryBorder:f[3],colorPrimaryBorderHover:f[4],colorPrimaryHover:f[5],colorPrimary:f[6],colorPrimaryActive:f[7],colorPrimaryTextHover:f[8],colorPrimaryText:f[9],colorPrimaryTextActive:f[10],colorSuccessBg:d[1],colorSuccessBgHover:d[2],colorSuccessBorder:d[3],colorSuccessBorderHover:d[4],colorSuccessHover:d[4],colorSuccess:d[6],colorSuccessActive:d[7],colorSuccessTextHover:d[8],colorSuccessText:d[9],colorSuccessTextActive:d[10],colorErrorBg:m[1],colorErrorBgHover:m[2],colorErrorBorder:m[3],colorErrorBorderHover:m[4],colorErrorHover:m[5],colorError:m[6],colorErrorActive:m[7],colorErrorTextHover:m[8],colorErrorText:m[9],colorErrorTextActive:m[10],colorWarningBg:p[1],colorWarningBgHover:p[2],colorWarningBorder:p[3],colorWarningBorderHover:p[4],colorWarningHover:p[4],colorWarning:p[6],colorWarningActive:p[7],colorWarningTextHover:p[8],colorWarningText:p[9],colorWarningTextActive:p[10],colorInfoBg:h[1],colorInfoBgHover:h[2],colorInfoBorder:h[3],colorInfoBorderHover:h[4],colorInfoHover:h[4],colorInfo:h[6],colorInfoActive:h[7],colorInfoTextHover:h[8],colorInfoText:h[9],colorInfoTextActive:h[10],colorLinkHover:y[4],colorLink:y[6],colorLinkActive:y[7],colorBgMask:new Bi("#000").setAlpha(.45).toRgbString(),colorWhite:"#fff"})}(e,{generateColorPalettes:Wi,generateNeutralColorPalettes:Vi})),(e=>{const t=function(e){const t=new Array(10).fill(null).map(((t,n)=>{const r=n-1,o=e*Math.pow(2.71828,r/5),a=n>1?Math.floor(o):Math.ceil(o);return 2*Math.floor(a/2)}));return t[1]=e,t.map((e=>{return{size:e,lineHeight:(t=e,(t+8)/t)};var t}))}(e),n=t.map((e=>e.size)),r=t.map((e=>e.lineHeight)),o=n[1],a=n[0],i=n[2],l=r[1],s=r[0],c=r[2];return{fontSizeSM:a,fontSize:o,fontSizeLG:i,fontSizeXL:n[3],fontSizeHeading1:n[6],fontSizeHeading2:n[5],fontSizeHeading3:n[4],fontSizeHeading4:n[3],fontSizeHeading5:n[2],lineHeight:l,lineHeightLG:c,lineHeightSM:s,fontHeight:Math.round(l*o),fontHeightLG:Math.round(c*i),fontHeightSM:Math.round(s*a),lineHeightHeading1:r[6],lineHeightHeading2:r[5],lineHeightHeading3:r[4],lineHeightHeading4:r[3],lineHeightHeading5:r[2]}})(e.fontSize)),function(e){const{sizeUnit:t,sizeStep:n}=e;return{sizeXXL:t*(n+8),sizeXL:t*(n+4),sizeLG:t*(n+2),sizeMD:t*(n+1),sizeMS:t*n,size:t*n,sizeSM:t*(n-1),sizeXS:t*(n-2),sizeXXS:t*(n-3)}}(e)),(e=>{const{controlHeight:t}=e;return{controlHeightSM:.75*t,controlHeightXS:.5*t,controlHeightLG:1.25*t}})(e)),function(e){const{motionUnit:t,motionBase:n,borderRadius:r,lineWidth:o}=e;return Object.assign({motionDurationFast:`${(n+t).toFixed(1)}s`,motionDurationMid:`${(n+2*t).toFixed(1)}s`,motionDurationSlow:`${(n+3*t).toFixed(1)}s`,lineWidthBold:o+1},(e=>{let t=e,n=e,r=e,o=e;return e<6&&e>=5?t=e+1:e<16&&e>=6?t=e+2:e>=16&&(t=16),e<7&&e>=5?n=4:e<8&&e>=7?n=5:e<14&&e>=8?n=6:e<16&&e>=14?n=7:e>=16&&(n=8),e<6&&e>=2?r=1:e>=6&&(r=2),e>4&&e<8?o=4:e>=8&&(o=6),{borderRadius:e,borderRadiusXS:r,borderRadiusSM:n,borderRadiusLG:t,borderRadiusOuter:o}})(r))}(e))})),qi={token:$i,override:{override:$i},hashed:!0},Ki=qn.createContext(qi),Xi=`-ant-${Date.now()}-${Math.random()}`;const Qi=qn.createContext(!1),Yi=e=>{let{children:t,disabled:n}=e;const r=qn.useContext(Qi);return qn.createElement(Qi.Provider,{value:null!=n?n:r},t)},Ji=Qi,Zi=qn.createContext(void 0),el=e=>{let{children:t,size:n}=e;const r=qn.useContext(Zi);return qn.createElement(Zi.Provider,{value:n||r},t)},tl=Zi,nl=Object.assign({},Kn),{useId:rl}=nl,ol=void 0===rl?()=>"":rl;var al=o(6942),il=o.n(al);var ll=o(8492);function sl(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function cl(e,t){if(null==e)return{};var n,r,o=sl(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var ul=["children"],fl=qn.createContext({});function dl(e){var t=e.children,n=cl(e,ul);return qn.createElement(fl.Provider,{value:n},t)}function pl(e,t){return pl=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},pl(e,t)}function ml(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&pl(e,t)}function hl(e){return hl=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},hl(e)}function gl(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(gl=function(){return!!e})()}function yl(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function vl(e,t){if(t&&("object"===Xn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return yl(e)}function bl(e){var t=gl();return function(){var n,r=hl(e);if(t){var o=hl(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return vl(this,n)}}const xl=function(e){ml(n,e);var t=bl(n);function n(){return Dr(this,n),t.apply(this,arguments)}return Br(n,[{key:"render",value:function(){return this.props.children}}]),n}(qn.Component);function wl(e){var t=qn.useRef(!1),n=hr(qn.useState(e),2),r=n[0],o=n[1];return qn.useEffect((function(){return t.current=!1,function(){t.current=!0}}),[]),[r,function(e,n){n&&t.current||o(e)}]}var Sl="none",_l="appear",El="enter",kl="leave",Tl="none",Cl="prepare",Ol="start",Pl="active",Nl="end",Ml="prepared";function Il(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit".concat(e)]="webkit".concat(t),n["Moz".concat(e)]="moz".concat(t),n["ms".concat(e)]="MS".concat(t),n["O".concat(e)]="o".concat(t.toLowerCase()),n}var Al,Rl,jl,zl=(Al=br(),Rl="undefined"!=typeof window?window:{},jl={animationend:Il("Animation","AnimationEnd"),transitionend:Il("Transition","TransitionEnd")},Al&&("AnimationEvent"in Rl||delete jl.animationend.animation,"TransitionEvent"in Rl||delete jl.transitionend.transition),jl),Fl={};if(br()){var Ll=document.createElement("div");Fl=Ll.style}var Dl={};function $l(e){if(Dl[e])return Dl[e];var t=zl[e];if(t)for(var n=Object.keys(t),r=n.length,o=0;o<r;o+=1){var a=n[o];if(Object.prototype.hasOwnProperty.call(t,a)&&a in Fl)return Dl[e]=t[a],Dl[e]}return""}var Bl=$l("animationend"),Hl=$l("transitionend"),Ul=!(!Bl||!Hl),Wl=Bl||"animationend",Vl=Hl||"transitionend";function Gl(e,t){return e?"object"===Xn(e)?e[t.replace(/-\w/g,(function(e){return e[1].toUpperCase()}))]:"".concat(e,"-").concat(t):null}const ql=br()?qn.useLayoutEffect:qn.useEffect;var Kl=function(e){return+setTimeout(e,16)},Xl=function(e){return clearTimeout(e)};"undefined"!=typeof window&&"requestAnimationFrame"in window&&(Kl=function(e){return window.requestAnimationFrame(e)},Xl=function(e){return window.cancelAnimationFrame(e)});var Ql=0,Yl=new Map;function Jl(e){Yl.delete(e)}var Zl=function(e){var t=Ql+=1;return function n(r){if(0===r)Jl(t),e();else{var o=Kl((function(){n(r-1)}));Yl.set(t,o)}}(arguments.length>1&&void 0!==arguments[1]?arguments[1]:1),t};Zl.cancel=function(e){var t=Yl.get(e);return Jl(e),Xl(t)};const es=Zl;var ts=[Cl,Ol,Pl,Nl],ns=[Cl,Ml];function rs(e){return e===Pl||e===Nl}const os=function(e){var t=e;"object"===Xn(e)&&(t=e.transitionSupport);var n=qn.forwardRef((function(e,n){var r=e.visible,o=void 0===r||r,a=e.removeOnLeave,i=void 0===a||a,l=e.forceRender,s=e.children,c=e.motionName,u=e.leavedClassName,f=e.eventProps,d=function(e,n){return!(!e.motionName||!t||!1===n)}(e,qn.useContext(fl).motion),p=(0,qn.useRef)(),m=(0,qn.useRef)(),h=function(e,t,n,r){var o=r.motionEnter,a=void 0===o||o,i=r.motionAppear,l=void 0===i||i,s=r.motionLeave,c=void 0===s||s,u=r.motionDeadline,f=r.motionLeaveImmediately,d=r.onAppearPrepare,p=r.onEnterPrepare,m=r.onLeavePrepare,h=r.onAppearStart,g=r.onEnterStart,y=r.onLeaveStart,v=r.onAppearActive,b=r.onEnterActive,x=r.onLeaveActive,w=r.onAppearEnd,S=r.onEnterEnd,_=r.onLeaveEnd,E=r.onVisibleChanged,k=hr(wl(),2),T=k[0],C=k[1],O=hr(wl(Sl),2),P=O[0],N=O[1],M=hr(wl(null),2),I=M[0],A=M[1],R=(0,qn.useRef)(!1),j=(0,qn.useRef)(null);function z(){return n()}var F=(0,qn.useRef)(!1);function L(){N(Sl,!0),A(null,!0)}function D(e){var t=z();if(!e||e.deadline||e.target===t){var n,r=F.current;P===_l&&r?n=null==w?void 0:w(t,e):P===El&&r?n=null==S?void 0:S(t,e):P===kl&&r&&(n=null==_?void 0:_(t,e)),P!==Sl&&r&&!1!==n&&L()}}var $=hr(function(e){var t=(0,qn.useRef)(),n=(0,qn.useRef)(e);n.current=e;var r=qn.useCallback((function(e){n.current(e)}),[]);function o(e){e&&(e.removeEventListener(Vl,r),e.removeEventListener(Wl,r))}return qn.useEffect((function(){return function(){o(t.current)}}),[]),[function(e){t.current&&t.current!==e&&o(t.current),e&&e!==t.current&&(e.addEventListener(Vl,r),e.addEventListener(Wl,r),t.current=e)},o]}(D),1)[0],B=function(e){var t,n,r;switch(e){case _l:return Yn(t={},Cl,d),Yn(t,Ol,h),Yn(t,Pl,v),t;case El:return Yn(n={},Cl,p),Yn(n,Ol,g),Yn(n,Pl,b),n;case kl:return Yn(r={},Cl,m),Yn(r,Ol,y),Yn(r,Pl,x),r;default:return{}}},H=qn.useMemo((function(){return B(P)}),[P]),U=hr(function(e,t,n){var r=hr(wl(Tl),2),o=r[0],a=r[1],i=function(){var e=qn.useRef(null);function t(){es.cancel(e.current)}return qn.useEffect((function(){return function(){t()}}),[]),[function n(r){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;t();var a=es((function(){o<=1?r({isCanceled:function(){return a!==e.current}}):n(r,o-1)}));e.current=a},t]}(),l=hr(i,2),s=l[0],c=l[1],u=t?ns:ts;return ql((function(){if(o!==Tl&&o!==Nl){var e=u.indexOf(o),t=u[e+1],r=n(o);!1===r?a(t,!0):t&&s((function(e){function n(){e.isCanceled()||a(t,!0)}!0===r?n():Promise.resolve(r).then(n)}))}}),[e,o]),qn.useEffect((function(){return function(){c()}}),[]),[function(){a(Cl,!0)},o]}(P,!e,(function(e){if(e===Cl){var t=H[Cl];return!!t&&t(z())}var n;return V in H&&A((null===(n=H[V])||void 0===n?void 0:n.call(H,z(),null))||null),V===Pl&&($(z()),u>0&&(clearTimeout(j.current),j.current=setTimeout((function(){D({deadline:!0})}),u))),V===Ml&&L(),true})),2),W=U[0],V=U[1],G=rs(V);F.current=G,ql((function(){C(t);var n,r=R.current;R.current=!0,!r&&t&&l&&(n=_l),r&&t&&a&&(n=El),(r&&!t&&c||!r&&f&&!t&&c)&&(n=kl);var o=B(n);n&&(e||o[Cl])?(N(n),W()):N(Sl)}),[t]),(0,qn.useEffect)((function(){(P===_l&&!l||P===El&&!a||P===kl&&!c)&&N(Sl)}),[l,a,c]),(0,qn.useEffect)((function(){return function(){R.current=!1,clearTimeout(j.current)}}),[]);var q=qn.useRef(!1);(0,qn.useEffect)((function(){T&&(q.current=!0),void 0!==T&&P===Sl&&((q.current||T)&&(null==E||E(T)),q.current=!0)}),[T,P]);var K=I;return H[Cl]&&V===Ol&&(K=Zn({transition:"none"},K)),[P,V,K,null!=T?T:t]}(d,o,(function(){try{return p.current instanceof HTMLElement?p.current:function(e){return function(e){return e instanceof HTMLElement||e instanceof SVGElement}(e)?e:e instanceof qn.Component?tr.findDOMNode(e):null}(m.current)}catch(e){return null}}),e),g=hr(h,4),y=g[0],v=g[1],b=g[2],x=g[3],w=qn.useRef(x);x&&(w.current=!0);var S,_,E,k,T,C=qn.useCallback((function(e){p.current=e,function(e,t){"function"==typeof e?e(t):"object"===Xn(e)&&e&&"current"in e&&(e.current=t)}(n,e)}),[n]),O=Zn(Zn({},f),{},{visible:o});if(s)if(y===Sl)S=x?s(Zn({},O),C):!i&&w.current&&u?s(Zn(Zn({},O),{},{className:u}),C):l||!i&&!u?s(Zn(Zn({},O),{},{style:{display:"none"}}),C):null;else{var P,N;v===Cl?N="prepare":rs(v)?N="active":v===Ol&&(N="start");var M=Gl(c,"".concat(y,"-").concat(N));S=s(Zn(Zn({},O),{},{className:il()(Gl(c,y),(P={},Yn(P,M,M&&N),Yn(P,c,"string"==typeof c),P)),style:b}),C)}else S=null;return qn.isValidElement(S)&&(_=S,("function"!=typeof(T=(0,ll.isMemo)(_)?_.type.type:_.type)||null!==(E=T.prototype)&&void 0!==E&&E.render)&&("function"!=typeof _||null!==(k=_.prototype)&&void 0!==k&&k.render))&&(S.ref||(S=qn.cloneElement(S,{ref:C}))),qn.createElement(xl,{ref:m},S)}));return n.displayName="CSSMotion",n}(Ul);var as="add",is="keep",ls="remove",ss="removed";function cs(e){var t;return Zn(Zn({},t=e&&"object"===Xn(e)&&"key"in e?e:{key:e}),{},{key:String(t.key)})}function us(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).map(cs)}var fs=["component","children","onVisibleChanged","onAllRemoved"],ds=["status"],ps=["eventProps","visible","children","motionName","motionAppear","motionEnter","motionLeave","motionLeaveImmediately","motionDeadline","removeOnLeave","leavedClassName","onAppearPrepare","onAppearStart","onAppearActive","onAppearEnd","onEnterStart","onEnterActive","onEnterEnd","onLeaveStart","onLeaveActive","onLeaveEnd"];const ms=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:os,n=function(e){ml(r,e);var n=bl(r);function r(){var e;Dr(this,r);for(var t=arguments.length,o=new Array(t),a=0;a<t;a++)o[a]=arguments[a];return Yn(yl(e=n.call.apply(n,[this].concat(o))),"state",{keyEntities:[]}),Yn(yl(e),"removeKey",(function(t){var n=e.state.keyEntities.map((function(e){return e.key!==t?e:Zn(Zn({},e),{},{status:ss})}));return e.setState({keyEntities:n}),n.filter((function(e){return e.status!==ss})).length})),e}return Br(r,[{key:"render",value:function(){var e=this,n=this.state.keyEntities,r=this.props,o=r.component,a=r.children,i=r.onVisibleChanged,l=r.onAllRemoved,s=cl(r,fs),c=o||qn.Fragment,u={};return ps.forEach((function(e){u[e]=s[e],delete s[e]})),delete s.keys,qn.createElement(c,s,n.map((function(n,r){var o=n.status,s=cl(n,ds),c=o===as||o===is;return qn.createElement(t,Io({},u,{key:s.key,visible:c,eventProps:s,onVisibleChanged:function(t){null==i||i(t,{key:s.key}),t||0===e.removeKey(s.key)&&l&&l()}}),(function(e,t){return a(Zn(Zn({},e),{},{index:r}),t)}))})))}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=e.keys,r=t.keyEntities,o=us(n),a=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=[],r=0,o=t.length,a=us(e),i=us(t);a.forEach((function(e){for(var t=!1,a=r;a<o;a+=1){var l=i[a];if(l.key===e.key){r<a&&(n=n.concat(i.slice(r,a).map((function(e){return Zn(Zn({},e),{},{status:as})}))),r=a),n.push(Zn(Zn({},l),{},{status:is})),r+=1,t=!0;break}}t||n.push(Zn(Zn({},e),{},{status:ls}))})),r<o&&(n=n.concat(i.slice(r).map((function(e){return Zn(Zn({},e),{},{status:as})}))));var l={};return n.forEach((function(e){var t=e.key;l[t]=(l[t]||0)+1})),Object.keys(l).filter((function(e){return l[e]>1})).forEach((function(e){(n=n.filter((function(t){var n=t.key,r=t.status;return n!==e||r!==ls}))).forEach((function(t){t.key===e&&(t.status=is)}))})),n}(r,o);return{keyEntities:a.filter((function(e){var t=r.find((function(t){var n=t.key;return e.key===n}));return!t||t.status!==ss||e.status!==ls}))}}}]),r}(qn.Component);return Yn(n,"defaultProps",{component:"div"}),n}(Ul),hs="5.13.3";function gs(e){return e>=0&&e<=255}const ys=function(e,t){const{r:n,g:r,b:o,a}=new Bi(e).toRgb();if(a<1)return e;const{r:i,g:l,b:s}=new Bi(t).toRgb();for(let e=.01;e<=1;e+=.01){const t=Math.round((n-i*(1-e))/e),a=Math.round((r-l*(1-e))/e),c=Math.round((o-s*(1-e))/e);if(gs(t)&&gs(a)&&gs(c))return new Bi({r:t,g:a,b:c,a:Math.round(100*e)/100}).toRgbString()}return new Bi({r:n,g:r,b:o,a:1}).toRgbString()};var vs=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};function bs(e){const{override:t}=e,n=vs(e,["override"]),r=Object.assign({},t);Object.keys($i).forEach((e=>{delete r[e]}));const o=Object.assign(Object.assign({},n),r);if(!1===o.motion){const e="0s";o.motionDurationFast=e,o.motionDurationMid=e,o.motionDurationSlow=e}return Object.assign(Object.assign(Object.assign({},o),{colorFillContent:o.colorFillSecondary,colorFillContentHover:o.colorFill,colorFillAlter:o.colorFillQuaternary,colorBgContainerDisabled:o.colorFillTertiary,colorBorderBg:o.colorBgContainer,colorSplit:ys(o.colorBorderSecondary,o.colorBgContainer),colorTextPlaceholder:o.colorTextQuaternary,colorTextDisabled:o.colorTextQuaternary,colorTextHeading:o.colorText,colorTextLabel:o.colorTextSecondary,colorTextDescription:o.colorTextTertiary,colorTextLightSolid:o.colorWhite,colorHighlight:o.colorError,colorBgTextHover:o.colorFillSecondary,colorBgTextActive:o.colorFill,colorIcon:o.colorTextTertiary,colorIconHover:o.colorText,colorErrorOutline:ys(o.colorErrorBg,o.colorBgContainer),colorWarningOutline:ys(o.colorWarningBg,o.colorBgContainer),fontSizeIcon:o.fontSizeSM,lineWidthFocus:4*o.lineWidth,lineWidth:o.lineWidth,controlOutlineWidth:2*o.lineWidth,controlInteractiveSize:o.controlHeight/2,controlItemBgHover:o.colorFillTertiary,controlItemBgActive:o.colorPrimaryBg,controlItemBgActiveHover:o.colorPrimaryBgHover,controlItemBgActiveDisabled:o.colorFill,controlTmpOutline:o.colorFillQuaternary,controlOutline:ys(o.colorPrimaryBg,o.colorBgContainer),lineType:o.lineType,borderRadius:o.borderRadius,borderRadiusXS:o.borderRadiusXS,borderRadiusSM:o.borderRadiusSM,borderRadiusLG:o.borderRadiusLG,fontWeightStrong:600,opacityLoading:.65,linkDecoration:"none",linkHoverDecoration:"none",linkFocusDecoration:"none",controlPaddingHorizontal:12,controlPaddingHorizontalSM:8,paddingXXS:o.sizeXXS,paddingXS:o.sizeXS,paddingSM:o.sizeSM,padding:o.size,paddingMD:o.sizeMD,paddingLG:o.sizeLG,paddingXL:o.sizeXL,paddingContentHorizontalLG:o.sizeLG,paddingContentVerticalLG:o.sizeMS,paddingContentHorizontal:o.sizeMS,paddingContentVertical:o.sizeSM,paddingContentHorizontalSM:o.size,paddingContentVerticalSM:o.sizeXS,marginXXS:o.sizeXXS,marginXS:o.sizeXS,marginSM:o.sizeSM,margin:o.size,marginMD:o.sizeMD,marginLG:o.sizeLG,marginXL:o.sizeXL,marginXXL:o.sizeXXL,boxShadow:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowSecondary:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowTertiary:"\n      0 1px 2px 0 rgba(0, 0, 0, 0.03),\n      0 1px 6px -1px rgba(0, 0, 0, 0.02),\n      0 2px 4px 0 rgba(0, 0, 0, 0.02)\n    ",screenXS:480,screenXSMin:480,screenXSMax:575,screenSM:576,screenSMMin:576,screenSMMax:767,screenMD:768,screenMDMin:768,screenMDMax:991,screenLG:992,screenLGMin:992,screenLGMax:1199,screenXL:1200,screenXLMin:1200,screenXLMax:1599,screenXXL:1600,screenXXLMin:1600,boxShadowPopoverArrow:"2px 2px 5px rgba(0, 0, 0, 0.05)",boxShadowCard:`\n      0 1px 2px -2px ${new Bi("rgba(0, 0, 0, 0.16)").toRgbString()},\n      0 3px 6px 0 ${new Bi("rgba(0, 0, 0, 0.12)").toRgbString()},\n      0 5px 12px 4px ${new Bi("rgba(0, 0, 0, 0.09)").toRgbString()}\n    `,boxShadowDrawerRight:"\n      -6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      -3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      -9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerLeft:"\n      6px 0 16px 0 rgba(0, 0, 0, 0.08),\n      3px 0 6px -4px rgba(0, 0, 0, 0.12),\n      9px 0 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerUp:"\n      0 6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowDrawerDown:"\n      0 -6px 16px 0 rgba(0, 0, 0, 0.08),\n      0 -3px 6px -4px rgba(0, 0, 0, 0.12),\n      0 -9px 28px 8px rgba(0, 0, 0, 0.05)\n    ",boxShadowTabsOverflowLeft:"inset 10px 0 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowRight:"inset -10px 0 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowTop:"inset 0 10px 8px -8px rgba(0, 0, 0, 0.08)",boxShadowTabsOverflowBottom:"inset 0 -10px 8px -8px rgba(0, 0, 0, 0.08)"}),r)}var xs=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n};const ws={lineHeight:!0,lineHeightSM:!0,lineHeightLG:!0,lineHeightHeading1:!0,lineHeightHeading2:!0,lineHeightHeading3:!0,lineHeightHeading4:!0,lineHeightHeading5:!0,opacityLoading:!0,fontWeightStrong:!0,zIndexPopupBase:!0,zIndexBase:!0},Ss={size:!0,sizeSM:!0,sizeLG:!0,sizeMD:!0,sizeXS:!0,sizeXXS:!0,sizeMS:!0,sizeXL:!0,sizeXXL:!0,sizeUnit:!0,sizeStep:!0,motionBase:!0,motionUnit:!0},_s={screenXS:!0,screenXSMin:!0,screenXSMax:!0,screenSM:!0,screenSMMin:!0,screenSMMax:!0,screenMD:!0,screenMDMin:!0,screenMDMax:!0,screenLG:!0,screenLGMin:!0,screenLGMax:!0,screenXL:!0,screenXLMin:!0,screenXLMax:!0,screenXXL:!0,screenXXLMin:!0},Es=(e,t,n)=>{const r=n.getDerivativeToken(e),{override:o}=t,a=xs(t,["override"]);let i=Object.assign(Object.assign({},r),{override:o});return i=bs(i),a&&Object.entries(a).forEach((e=>{let[t,n]=e;const{theme:r}=n,o=xs(n,["theme"]);let a=o;r&&(a=Es(Object.assign(Object.assign({},i),o),{override:o},r)),i[t]=a})),i};function ks(){const{token:e,hashed:t,theme:n,override:r,cssVar:o}=qn.useContext(Ki),a=`${hs}-${t||""}`,i=n||Gi,[l,s,c]=Mo(i,[$i,e],{salt:a,override:r,getComputedToken:Es,formatToken:bs,cssVar:o&&{prefix:o.prefix,key:o.key,unitless:ws,ignore:Ss,preserve:_s}});return[i,c,t?s:"",l,o]}function Ts(e){const{children:t}=e,[,n]=ks(),{motion:r}=n,o=qn.useRef(!1);return o.current=o.current||!1===r,o.current?qn.createElement(dl,{motion:r},t):t}const Cs=()=>null,Os=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return{boxSizing:"border-box",margin:0,padding:0,color:e.colorText,fontSize:e.fontSize,lineHeight:e.lineHeight,listStyle:"none",fontFamily:t?"inherit":e.fontFamily}},Ps=e=>({a:{color:e.colorLink,textDecoration:e.linkDecoration,backgroundColor:"transparent",outline:"none",cursor:"pointer",transition:`color ${e.motionDurationSlow}`,"-webkit-text-decoration-skip":"objects","&:hover":{color:e.colorLinkHover},"&:active":{color:e.colorLinkActive},"&:active,\n  &:hover":{textDecoration:e.linkHoverDecoration,outline:0},"&:focus":{textDecoration:e.linkFocusDecoration,outline:0},"&[disabled]":{color:e.colorTextDisabled,cursor:"not-allowed"}}}),Ns=(e,t)=>{const{fontFamily:n,fontSize:r}=e,o=`[class^="${t}"], [class*=" ${t}"]`;return{[o]:{fontFamily:n,fontSize:r,boxSizing:"border-box","&::before, &::after":{boxSizing:"border-box"},[o]:{boxSizing:"border-box","&::before, &::after":{boxSizing:"border-box"}}}}},Ms=(e,t)=>{const[n,r]=ks();return Ma({theme:n,token:r,hashId:"",path:["ant-design-icons",e],nonce:()=>null==t?void 0:t.nonce},(()=>[{[`.${e}`]:Object.assign(Object.assign({},{display:"inline-flex",alignItems:"center",color:"inherit",fontStyle:"normal",lineHeight:0,textAlign:"center",textTransform:"none",verticalAlign:"-0.125em",textRendering:"optimizeLegibility","-webkit-font-smoothing":"antialiased","-moz-osx-font-smoothing":"grayscale","> *":{lineHeight:1},svg:{display:"inline-block"}}),{[`.${e} .${e}-icon`]:{display:"block"}})}]))};const Is=["getTargetContainer","getPopupContainer","renderEmpty","input","pagination","form","select","button"];let As,Rs,js,zs;function Fs(){return As||"ant"}function Ls(){return Rs||sr}const Ds=()=>({getPrefixCls:(e,t)=>t||(e?`${Fs()}-${e}`:Fs()),getIconPrefixCls:Ls,getRootPrefixCls:()=>As||Fs(),getTheme:()=>js,holderRender:zs}),$s=e=>{const{children:t,csp:n,autoInsertSpaceInButton:r,alert:o,anchor:a,form:i,locale:l,componentSize:s,direction:c,space:u,virtual:f,dropdownMatchSelectWidth:d,popupMatchSelectWidth:p,popupOverflow:m,legacyLocale:h,parentContext:g,iconPrefixCls:y,theme:v,componentDisabled:b,segmented:x,statistic:w,spin:S,calendar:_,carousel:E,cascader:k,collapse:T,typography:C,checkbox:O,descriptions:P,divider:N,drawer:M,skeleton:I,steps:A,image:R,layout:j,list:z,mentions:F,modal:L,progress:D,result:$,slider:B,breadcrumb:H,menu:U,pagination:W,input:V,empty:G,badge:q,radio:K,rate:X,switch:Q,transfer:Y,avatar:J,message:Z,tag:ee,table:te,card:ne,tabs:re,timeline:oe,timePicker:ae,upload:ie,notification:le,tree:se,colorPicker:ce,datePicker:ue,rangePicker:fe,flex:de,wave:pe,dropdown:me,warning:he}=e,ge=qn.useCallback(((t,n)=>{const{prefixCls:r}=e;if(n)return n;const o=r||g.getPrefixCls("");return t?`${o}-${t}`:o}),[g.getPrefixCls,e.prefixCls]),ye=y||g.iconPrefixCls||sr,ve=n||g.csp;Ms(ye,ve);const be=function(e,t){Va();const n=e||{},r=!1!==n.inherit&&t?t:qi,o=ol();return Mr((()=>{var a,i;if(!e)return t;const l=Object.assign({},r.components);Object.keys(e.components||{}).forEach((t=>{l[t]=Object.assign(Object.assign({},l[t]),e.components[t])}));const s=`css-var-${o.replace(/:/g,"")}`,c=(null!==(a=n.cssVar)&&void 0!==a?a:r.cssVar)&&Object.assign(Object.assign(Object.assign({prefix:"ant"},"object"==typeof r.cssVar?r.cssVar:{}),"object"==typeof n.cssVar?n.cssVar:{}),{key:"object"==typeof n.cssVar&&(null===(i=n.cssVar)||void 0===i?void 0:i.key)||s});return Object.assign(Object.assign(Object.assign({},r),n),{token:Object.assign(Object.assign({},r.token),n.token),components:l,cssVar:c})}),[n,r],((e,t)=>e.some(((e,n)=>!function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=new Set;return function e(t,o){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,i=r.has(t);if(Lr(!i,"Warning: There may be circular references"),i)return!1;if(t===o)return!0;if(n&&a>1)return!1;r.add(t);var l=a+1;if(Array.isArray(t)){if(!Array.isArray(o)||t.length!==o.length)return!1;for(var s=0;s<t.length;s++)if(!e(t[s],o[s],l))return!1;return!0}if(t&&o&&"object"===Xn(t)&&"object"===Xn(o)){var c=Object.keys(t);return c.length===Object.keys(o).length&&c.every((function(n){return e(t[n],o[n],l)}))}return!1}(e,t)}(e,t[n],!0)))))}(v,g.theme),xe={csp:ve,autoInsertSpaceInButton:r,alert:o,anchor:a,locale:l||h,direction:c,space:u,virtual:f,popupMatchSelectWidth:null!=p?p:d,popupOverflow:m,getPrefixCls:ge,iconPrefixCls:ye,theme:be,segmented:x,statistic:w,spin:S,calendar:_,carousel:E,cascader:k,collapse:T,typography:C,checkbox:O,descriptions:P,divider:N,drawer:M,skeleton:I,steps:A,image:R,input:V,layout:j,list:z,mentions:F,modal:L,progress:D,result:$,slider:B,breadcrumb:H,menu:U,pagination:W,empty:G,badge:q,radio:K,rate:X,switch:Q,transfer:Y,avatar:J,message:Z,tag:ee,table:te,card:ne,tabs:re,timeline:oe,timePicker:ae,upload:ie,notification:le,tree:se,colorPicker:ce,datePicker:ue,rangePicker:fe,flex:de,wave:pe,dropdown:me,warning:he},we=Object.assign({},g);Object.keys(xe).forEach((e=>{void 0!==xe[e]&&(we[e]=xe[e])})),Is.forEach((t=>{const n=e[t];n&&(we[t]=n)}));const Se=Mr((()=>we),we,((e,t)=>{const n=Object.keys(e),r=Object.keys(t);return n.length!==r.length||n.some((n=>e[n]!==t[n]))})),_e=qn.useMemo((()=>({prefixCls:ye,csp:ve})),[ye,ve]);let Ee=qn.createElement(qn.Fragment,null,qn.createElement(Cs,{dropdownMatchSelectWidth:d}),t);const ke=qn.useMemo((()=>{var e,t,n,r;return function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=Ba(t[0]);return t.forEach((function(e){!function t(n,o){var a,i=new Set(o),l=La(e,n),s=Array.isArray(l);if(s||"object"===Xn(a=l)&&null!==a&&Object.getPrototypeOf(a)===Object.prototype){if(!i.has(l)){i.add(l);var c=La(r,n);s?r=$a(r,n,[]):c&&"object"===Xn(c)||(r=$a(r,n,Ba(l))),Ha(l).forEach((function(e){t([].concat(yr(n),[e]),i)}))}}else r=$a(r,n,l)}([])})),r}((null===(e=Qa.Form)||void 0===e?void 0:e.defaultValidateMessages)||{},(null===(n=null===(t=Se.locale)||void 0===t?void 0:t.Form)||void 0===n?void 0:n.defaultValidateMessages)||{},(null===(r=Se.form)||void 0===r?void 0:r.validateMessages)||{},(null==i?void 0:i.validateMessages)||{})}),[Se,null==i?void 0:i.validateMessages]);Object.keys(ke).length>0&&(Ee=qn.createElement(Ga.Provider,{value:ke},Ee)),l&&(Ee=qn.createElement(ti,{locale:l,_ANT_MARK__:"internalMark"},Ee)),(ye||ve)&&(Ee=qn.createElement(Fa.Provider,{value:_e},Ee)),s&&(Ee=qn.createElement(el,{size:s},Ee)),Ee=qn.createElement(Ts,null,Ee);const Te=qn.useMemo((()=>{const e=be||{},{algorithm:t,token:n,components:r,cssVar:o}=e,a=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["algorithm","token","components","cssVar"]),i=t&&(!Array.isArray(t)||t.length>0)?to(t):Gi,l={};Object.entries(r||{}).forEach((e=>{let[t,n]=e;const r=Object.assign({},n);"algorithm"in r&&(!0===r.algorithm?r.theme=i:(Array.isArray(r.algorithm)||"function"==typeof r.algorithm)&&(r.theme=to(r.algorithm)),delete r.algorithm),l[t]=r}));const s=Object.assign(Object.assign({},$i),n);return Object.assign(Object.assign({},a),{theme:i,token:s,components:l,override:Object.assign({override:s},l),cssVar:o})}),[be]);return v&&(Ee=qn.createElement(Ki.Provider,{value:Te},Ee)),Se.warning&&(Ee=qn.createElement(Wa.Provider,{value:Se.warning},Ee)),void 0!==b&&(Ee=qn.createElement(Yi,{disabled:b},Ee)),qn.createElement(cr.Provider,{value:Se},Ee)},Bs=e=>{const t=qn.useContext(cr),n=qn.useContext(ei);return qn.createElement($s,Object.assign({parentContext:t,legacyLocale:n},e))};Bs.ConfigContext=cr,Bs.SizeContext=tl,Bs.config=e=>{const{prefixCls:t,iconPrefixCls:n,theme:r,holderRender:o}=e;void 0!==t&&(As=t),void 0!==n&&(Rs=n),"holderRender"in e&&(zs=o),r&&(function(e){return Object.keys(e).some((e=>e.endsWith("Color")))}(r)?function(e,t){const n=function(e,t){const n={},r=(e,t)=>{let n=e.clone();return n=(null==t?void 0:t(n))||n,n.toRgbString()},o=(e,t)=>{const o=new Bi(e),a=Ri(o.toRgbString());n[`${t}-color`]=r(o),n[`${t}-color-disabled`]=a[1],n[`${t}-color-hover`]=a[4],n[`${t}-color-active`]=a[6],n[`${t}-color-outline`]=o.clone().setAlpha(.2).toRgbString(),n[`${t}-color-deprecated-bg`]=a[0],n[`${t}-color-deprecated-border`]=a[2]};if(t.primaryColor){o(t.primaryColor,"primary");const e=new Bi(t.primaryColor),a=Ri(e.toRgbString());a.forEach(((e,t)=>{n[`primary-${t+1}`]=e})),n["primary-color-deprecated-l-35"]=r(e,(e=>e.lighten(35))),n["primary-color-deprecated-l-20"]=r(e,(e=>e.lighten(20))),n["primary-color-deprecated-t-20"]=r(e,(e=>e.tint(20))),n["primary-color-deprecated-t-50"]=r(e,(e=>e.tint(50))),n["primary-color-deprecated-f-12"]=r(e,(e=>e.setAlpha(.12*e.getAlpha())));const i=new Bi(a[0]);n["primary-color-active-deprecated-f-30"]=r(i,(e=>e.setAlpha(.3*e.getAlpha()))),n["primary-color-active-deprecated-d-02"]=r(i,(e=>e.darken(2)))}return t.successColor&&o(t.successColor,"success"),t.warningColor&&o(t.warningColor,"warning"),t.errorColor&&o(t.errorColor,"error"),t.infoColor&&o(t.infoColor,"info"),`\n  :root {\n    ${Object.keys(n).map((t=>`--${e}-${t}: ${n[t]};`)).join("\n")}\n  }\n  `.trim()}(e,t);br()&&Nr(n,`${Xi}-dynamic-theme`)}(Fs(),r):js=r)},Bs.useConfig=function(){return{componentDisabled:(0,qn.useContext)(Ji),componentSize:(0,qn.useContext)(tl)}},Object.defineProperty(Bs,"SizeContext",{get:()=>tl});const Hs=Bs,Us={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"}}]},name:"check-circle",theme:"filled"};function Ws(e){var t;return null==e||null===(t=e.getRootNode)||void 0===t?void 0:t.call(e)}function Vs(e){return"object"===Xn(e)&&"string"==typeof e.name&&"string"==typeof e.theme&&("object"===Xn(e.icon)||"function"==typeof e.icon)}function Gs(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return Object.keys(e).reduce((function(t,n){var r,o=e[n];return"class"===n?(t.className=o,delete t.class):(delete t[n],t[(r=n,r.replace(/-(.)/g,(function(e,t){return t.toUpperCase()})))]=o),t}),{})}function qs(e,t,n){return n?qn.createElement(e.tag,Zn(Zn({key:t},Gs(e.attrs)),n),(e.children||[]).map((function(n,r){return qs(n,"".concat(t,"-").concat(e.tag,"-").concat(r))}))):qn.createElement(e.tag,Zn({key:t},Gs(e.attrs)),(e.children||[]).map((function(n,r){return qs(n,"".concat(t,"-").concat(e.tag,"-").concat(r))})))}function Ks(e){return Ri(e)[0]}function Xs(e){return e?Array.isArray(e)?e:[e]:[]}var Qs=["icon","className","onClick","style","primaryColor","secondaryColor"],Ys={primaryColor:"#333",secondaryColor:"#E6E6E6",calculated:!1},Js=function(e){var t,n,r,o,a,i,l,s=e.icon,c=e.className,u=e.onClick,f=e.style,d=e.primaryColor,p=e.secondaryColor,m=cl(e,Qs),h=qn.useRef(),g=Ys;if(d&&(g={primaryColor:d,secondaryColor:p||Ks(d)}),t=h,n=(0,qn.useContext)(Fa),r=n.csp,o=n.prefixCls,a="\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n",o&&(a=a.replace(/anticon/g,o)),(0,qn.useEffect)((function(){var e,n=function(e){return Ws(e)instanceof ShadowRoot}(e=t.current)?Ws(e):null;Nr(a,"@ant-design-icons",{prepend:!0,csp:r,attachTo:n})}),[]),i=Vs(s),l="icon should be icon definiton, but got ".concat(s),Lr(i,"[@ant-design/icons] ".concat(l)),!Vs(s))return null;var y=s;return y&&"function"==typeof y.icon&&(y=Zn(Zn({},y),{},{icon:y.icon(g.primaryColor,g.secondaryColor)})),qs(y.icon,"svg-".concat(y.name),Zn(Zn({className:c,onClick:u,style:f,"data-icon":y.name,width:"1em",height:"1em",fill:"currentColor","aria-hidden":"true"},m),{},{ref:h}))};Js.displayName="IconReact",Js.getTwoToneColors=function(){return Zn({},Ys)},Js.setTwoToneColors=function(e){var t=e.primaryColor,n=e.secondaryColor;Ys.primaryColor=t,Ys.secondaryColor=n||Ks(t),Ys.calculated=!!n};const Zs=Js;function ec(e){var t=hr(Xs(e),2),n=t[0],r=t[1];return Zs.setTwoToneColors({primaryColor:n,secondaryColor:r})}var tc=["className","icon","spin","rotate","tabIndex","onClick","twoToneColor"];ec(Li.primary);var nc=qn.forwardRef((function(e,t){var n,r=e.className,o=e.icon,a=e.spin,i=e.rotate,l=e.tabIndex,s=e.onClick,c=e.twoToneColor,u=cl(e,tc),f=qn.useContext(Fa),d=f.prefixCls,p=void 0===d?"anticon":d,m=f.rootClassName,h=il()(m,p,(Yn(n={},"".concat(p,"-").concat(o.name),!!o.name),Yn(n,"".concat(p,"-spin"),!!a||"loading"===o.name),n),r),g=l;void 0===g&&s&&(g=-1);var y=i?{msTransform:"rotate(".concat(i,"deg)"),transform:"rotate(".concat(i,"deg)")}:void 0,v=hr(Xs(c),2),b=v[0],x=v[1];return qn.createElement("span",Io({role:"img","aria-label":o.name},u,{ref:t,tabIndex:g,onClick:s,className:h}),qn.createElement(Zs,{icon:o,primaryColor:b,secondaryColor:x,style:y}))}));nc.displayName="AntdIcon",nc.getTwoToneColor=function(){var e=Zs.getTwoToneColors();return e.calculated?[e.primaryColor,e.secondaryColor]:e.primaryColor},nc.setTwoToneColor=ec;const rc=nc;var oc=function(e,t){return qn.createElement(rc,Io({},e,{ref:t,icon:Us}))};const ac=qn.forwardRef(oc),ic={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64c247.4 0 448 200.6 448 448S759.4 960 512 960 64 759.4 64 512 264.6 64 512 64zm127.98 274.82h-.04l-.08.06L512 466.75 384.14 338.88c-.04-.05-.06-.06-.08-.06a.12.12 0 00-.07 0c-.03 0-.05.01-.09.05l-45.02 45.02a.2.2 0 00-.05.09.12.12 0 000 .07v.02a.27.27 0 00.06.06L466.75 512 338.88 639.86c-.05.04-.06.06-.06.08a.12.12 0 000 .07c0 .03.01.05.05.09l45.02 45.02a.2.2 0 00.09.05.12.12 0 00.07 0c.02 0 .04-.01.08-.05L512 557.25l127.86 127.87c.04.04.06.05.08.05a.12.12 0 00.07 0c.03 0 .05-.01.09-.05l45.02-45.02a.2.2 0 00.05-.09.12.12 0 000-.07v-.02a.27.27 0 00-.05-.06L557.25 512l127.87-127.86c.04-.04.05-.06.05-.08a.12.12 0 000-.07c0-.03-.01-.05-.05-.09l-45.02-45.02a.2.2 0 00-.09-.05.12.12 0 00-.07 0z"}}]},name:"close-circle",theme:"filled"};var lc=function(e,t){return qn.createElement(rc,Io({},e,{ref:t,icon:ic}))};const sc=qn.forwardRef(lc),cc={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M799.86 166.31c.02 0 .04.02.08.06l57.69 57.7c.04.03.05.05.06.08a.12.12 0 010 .06c0 .03-.02.05-.06.09L569.93 512l287.7 287.7c.04.04.05.06.06.09a.12.12 0 010 .07c0 .02-.02.04-.06.08l-57.7 57.69c-.03.04-.05.05-.07.06a.12.12 0 01-.07 0c-.03 0-.05-.02-.09-.06L512 569.93l-287.7 287.7c-.04.04-.06.05-.09.06a.12.12 0 01-.07 0c-.02 0-.04-.02-.08-.06l-57.69-57.7c-.04-.03-.05-.05-.06-.07a.12.12 0 010-.07c0-.03.02-.05.06-.09L454.07 512l-287.7-287.7c-.04-.04-.05-.06-.06-.09a.12.12 0 010-.07c0-.02.02-.04.06-.08l57.7-57.69c.03-.04.05-.05.07-.06a.12.12 0 01.07 0c.03 0 .05.02.09.06L512 454.07l287.7-287.7c.04-.04.06-.05.09-.06a.12.12 0 01.07 0z"}}]},name:"close",theme:"outlined"};var uc=function(e,t){return qn.createElement(rc,Io({},e,{ref:t,icon:cc}))};const fc=qn.forwardRef(uc),dc={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm-32 232c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V296zm32 440a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"exclamation-circle",theme:"filled"};var pc=function(e,t){return qn.createElement(rc,Io({},e,{ref:t,icon:dc}))};const mc=qn.forwardRef(pc),hc={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm32 664c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V456c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v272zm-32-344a48.01 48.01 0 010-96 48.01 48.01 0 010 96z"}}]},name:"info-circle",theme:"filled"};var gc=function(e,t){return qn.createElement(rc,Io({},e,{ref:t,icon:hc}))};const yc=qn.forwardRef(gc);var vc={MAC_ENTER:3,BACKSPACE:8,TAB:9,NUM_CENTER:12,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:44,INSERT:45,DELETE:46,ZERO:48,ONE:49,TWO:50,THREE:51,FOUR:52,FIVE:53,SIX:54,SEVEN:55,EIGHT:56,NINE:57,QUESTION_MARK:63,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,META:91,WIN_KEY_RIGHT:92,CONTEXT_MENU:93,NUM_ZERO:96,NUM_ONE:97,NUM_TWO:98,NUM_THREE:99,NUM_FOUR:100,NUM_FIVE:101,NUM_SIX:102,NUM_SEVEN:103,NUM_EIGHT:104,NUM_NINE:105,NUM_MULTIPLY:106,NUM_PLUS:107,NUM_MINUS:109,NUM_PERIOD:110,NUM_DIVISION:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUMLOCK:144,SEMICOLON:186,DASH:189,EQUALS:187,COMMA:188,PERIOD:190,SLASH:191,APOSTROPHE:192,SINGLE_QUOTE:222,OPEN_SQUARE_BRACKET:219,BACKSLASH:220,CLOSE_SQUARE_BRACKET:221,WIN_KEY:224,MAC_FF_META:224,WIN_IME:229,isTextModifyingKeyEvent:function(e){var t=e.keyCode;if(e.altKey&&!e.ctrlKey||e.metaKey||t>=vc.F1&&t<=vc.F12)return!1;switch(t){case vc.ALT:case vc.CAPS_LOCK:case vc.CONTEXT_MENU:case vc.CTRL:case vc.DOWN:case vc.END:case vc.ESC:case vc.HOME:case vc.INSERT:case vc.LEFT:case vc.MAC_FF_META:case vc.META:case vc.NUMLOCK:case vc.NUM_CENTER:case vc.PAGE_DOWN:case vc.PAGE_UP:case vc.PAUSE:case vc.PRINT_SCREEN:case vc.RIGHT:case vc.SHIFT:case vc.UP:case vc.WIN_KEY:case vc.WIN_KEY_RIGHT:return!1;default:return!0}},isCharacterKey:function(e){if(e>=vc.ZERO&&e<=vc.NINE)return!0;if(e>=vc.NUM_ZERO&&e<=vc.NUM_MULTIPLY)return!0;if(e>=vc.A&&e<=vc.Z)return!0;if(-1!==window.navigator.userAgent.indexOf("WebKit")&&0===e)return!0;switch(e){case vc.SPACE:case vc.QUESTION_MARK:case vc.NUM_PLUS:case vc.NUM_MINUS:case vc.NUM_PERIOD:case vc.NUM_DIVISION:case vc.SEMICOLON:case vc.DASH:case vc.EQUALS:case vc.COMMA:case vc.PERIOD:case vc.SLASH:case vc.APOSTROPHE:case vc.SINGLE_QUOTE:case vc.OPEN_SQUARE_BRACKET:case vc.BACKSLASH:case vc.CLOSE_SQUARE_BRACKET:return!0;default:return!1}}};const bc=vc;var xc=qn.forwardRef((function(e,t){var n=e.prefixCls,r=e.style,o=e.className,a=e.duration,i=void 0===a?4.5:a,l=e.eventKey,s=e.content,c=e.closable,u=e.closeIcon,f=void 0===u?"x":u,d=e.props,p=e.onClick,m=e.onNoticeClose,h=e.times,g=e.hovering,y=hr(qn.useState(!1),2),v=y[0],b=y[1],x=g||v,w=function(){m(l)};qn.useEffect((function(){if(!x&&i>0){var e=setTimeout((function(){w()}),1e3*i);return function(){clearTimeout(e)}}}),[i,x,h]);var S="".concat(n,"-notice");return qn.createElement("div",Io({},d,{ref:t,className:il()(S,o,Yn({},"".concat(S,"-closable"),c)),style:r,onMouseEnter:function(e){var t;b(!0),null==d||null===(t=d.onMouseEnter)||void 0===t||t.call(d,e)},onMouseLeave:function(e){var t;b(!1),null==d||null===(t=d.onMouseLeave)||void 0===t||t.call(d,e)},onClick:p}),qn.createElement("div",{className:"".concat(S,"-content")},s),c&&qn.createElement("a",{tabIndex:0,className:"".concat(S,"-close"),onKeyDown:function(e){"Enter"!==e.key&&"Enter"!==e.code&&e.keyCode!==bc.ENTER||w()},onClick:function(e){e.preventDefault(),e.stopPropagation(),w()}},f))}));const wc=xc;var Sc=qn.createContext({});const _c=function(e){var t=e.children,n=e.classNames;return qn.createElement(Sc.Provider,{value:{classNames:n}},t)};var Ec=["className","style","classNames","styles"];const kc=function(e){var t,n,r,o,a,i,l=e.configList,s=e.placement,c=e.prefixCls,u=e.className,f=e.style,d=e.motion,p=e.onAllNoticeRemoved,m=e.onNoticeClose,h=e.stack,g=(0,qn.useContext)(Sc).classNames,y=(0,qn.useRef)({}),v=hr((0,qn.useState)(null),2),b=v[0],x=v[1],w=hr((0,qn.useState)([]),2),S=w[0],_=w[1],E=l.map((function(e){return{config:e,key:String(e.key)}})),k=hr((i={offset:8,threshold:3,gap:16},(n=h)&&"object"===Xn(n)&&(i.offset=null!==(r=n.offset)&&void 0!==r?r:8,i.threshold=null!==(o=n.threshold)&&void 0!==o?o:3,i.gap=null!==(a=n.gap)&&void 0!==a?a:16),[!!n,i]),2),T=k[0],C=k[1],O=C.offset,P=C.threshold,N=C.gap,M=T&&(S.length>0||E.length<=P),I="function"==typeof d?d(s):d;return(0,qn.useEffect)((function(){T&&S.length>1&&_((function(e){return e.filter((function(e){return E.some((function(t){var n=t.key;return e===n}))}))}))}),[S,E,T]),(0,qn.useEffect)((function(){var e,t;T&&y.current[null===(e=E[E.length-1])||void 0===e?void 0:e.key]&&x(y.current[null===(t=E[E.length-1])||void 0===t?void 0:t.key])}),[E,T]),qn.createElement(ms,Io({key:s,className:il()(c,"".concat(c,"-").concat(s),null==g?void 0:g.list,u,(t={},Yn(t,"".concat(c,"-stack"),!!T),Yn(t,"".concat(c,"-stack-expanded"),M),t)),style:f,keys:E,motionAppear:!0},I,{onAllRemoved:function(){p(s)}}),(function(e,t){var n=e.config,r=e.className,o=e.style,a=e.index,i=n,l=i.key,u=i.times,f=String(l),d=n,p=d.className,h=d.style,v=d.classNames,x=d.styles,w=cl(d,Ec),k=E.findIndex((function(e){return e.key===f})),C={};if(T){var P=E.length-1-(k>-1?k:a-1),I="top"===s||"bottom"===s?"-50%":"0";if(P>0){var A,R,j;C.height=M?null===(A=y.current[f])||void 0===A?void 0:A.offsetHeight:null==b?void 0:b.offsetHeight;for(var z=0,F=0;F<P;F++){var L;z+=(null===(L=y.current[E[E.length-1-F].key])||void 0===L?void 0:L.offsetHeight)+N}var D=(M?z:P*O)*(s.startsWith("top")?1:-1),$=!M&&null!=b&&b.offsetWidth&&null!==(R=y.current[f])&&void 0!==R&&R.offsetWidth?((null==b?void 0:b.offsetWidth)-2*O*(P<3?P:3))/(null===(j=y.current[f])||void 0===j?void 0:j.offsetWidth):1;C.transform="translate3d(".concat(I,", ").concat(D,"px, 0) scaleX(").concat($,")")}else C.transform="translate3d(".concat(I,", 0, 0)")}return qn.createElement("div",{ref:t,className:il()("".concat(c,"-notice-wrapper"),r,null==v?void 0:v.wrapper),style:Zn(Zn(Zn({},o),C),null==x?void 0:x.wrapper),onMouseEnter:function(){return _((function(e){return e.includes(f)?e:[].concat(yr(e),[f])}))},onMouseLeave:function(){return _((function(e){return e.filter((function(e){return e!==f}))}))}},qn.createElement(wc,Io({},w,{ref:function(e){k>-1?y.current[f]=e:delete y.current[f]},prefixCls:c,classNames:v,styles:x,className:il()(p,null==g?void 0:g.notice),style:h,times:u,key:l,eventKey:l,onNoticeClose:m,hovering:T&&S.length>0})))}))};var Tc=qn.forwardRef((function(e,t){var n=e.prefixCls,r=void 0===n?"rc-notification":n,o=e.container,a=e.motion,i=e.maxCount,l=e.className,s=e.style,c=e.onAllRemoved,u=e.stack,f=e.renderNotifications,d=hr(qn.useState([]),2),p=d[0],m=d[1],h=function(e){var t,n=p.find((function(t){return t.key===e}));null==n||null===(t=n.onClose)||void 0===t||t.call(n),m((function(t){return t.filter((function(t){return t.key!==e}))}))};qn.useImperativeHandle(t,(function(){return{open:function(e){m((function(t){var n,r=yr(t),o=r.findIndex((function(t){return t.key===e.key})),a=Zn({},e);return o>=0?(a.times=((null===(n=t[o])||void 0===n?void 0:n.times)||0)+1,r[o]=a):(a.times=0,r.push(a)),i>0&&r.length>i&&(r=r.slice(-i)),r}))},close:function(e){h(e)},destroy:function(){m([])}}}));var g=hr(qn.useState({}),2),y=g[0],v=g[1];qn.useEffect((function(){var e={};p.forEach((function(t){var n=t.placement,r=void 0===n?"topRight":n;r&&(e[r]=e[r]||[],e[r].push(t))})),Object.keys(y).forEach((function(t){e[t]=e[t]||[]})),v(e)}),[p]);var b=function(e){v((function(t){var n=Zn({},t);return(n[e]||[]).length||delete n[e],n}))},x=qn.useRef(!1);if(qn.useEffect((function(){Object.keys(y).length>0?x.current=!0:x.current&&(null==c||c(),x.current=!1)}),[y]),!o)return null;var w=Object.keys(y);return(0,tr.createPortal)(qn.createElement(qn.Fragment,null,w.map((function(e){var t=y[e],n=qn.createElement(kc,{key:e,configList:t,placement:e,prefixCls:r,className:null==l?void 0:l(e),style:null==s?void 0:s(e),motion:a,onNoticeClose:h,onAllNoticeRemoved:b,stack:u});return f?f(n,{prefixCls:r,key:e}):n}))),o)}));const Cc=Tc;var Oc=["getContainer","motion","prefixCls","maxCount","className","style","onAllRemoved","stack","renderNotifications"],Pc=function(){return document.body},Nc=0;const Mc=e=>{const[,,,,t]=ks();return t?`${e}-css-var`:""},Ic="undefined"!=typeof CSSINJS_STATISTIC;let Ac=!0;function Rc(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];if(!Ic)return Object.assign.apply(Object,[{}].concat(t));Ac=!1;const r={};return t.forEach((e=>{Object.keys(e).forEach((t=>{Object.defineProperty(r,t,{configurable:!0,enumerable:!0,get:()=>e[t]})}))})),Ac=!0,r}const jc={};function zc(){}const Fc=Br((function e(){Dr(this,e)}));let Lc=function(e){function t(e){var n;return Dr(this,t),n=function(e,t,n){return t=hl(t),vl(e,gl()?Reflect.construct(t,[],hl(e).constructor):t.apply(e,n))}(this,t),n.result=0,e instanceof t?n.result=e.result:"number"==typeof e&&(n.result=e),n}return ml(t,e),Br(t,[{key:"add",value:function(e){return e instanceof t?this.result+=e.result:"number"==typeof e&&(this.result+=e),this}},{key:"sub",value:function(e){return e instanceof t?this.result-=e.result:"number"==typeof e&&(this.result-=e),this}},{key:"mul",value:function(e){return e instanceof t?this.result*=e.result:"number"==typeof e&&(this.result*=e),this}},{key:"div",value:function(e){return e instanceof t?this.result/=e.result:"number"==typeof e&&(this.result/=e),this}},{key:"equal",value:function(){return this.result}}]),t}(Fc);const Dc="CALC_UNIT";function $c(e){return"number"==typeof e?`${e}${Dc}`:e}let Bc=function(e){function t(e){var n;return Dr(this,t),n=function(e,t,n){return t=hl(t),vl(e,gl()?Reflect.construct(t,[],hl(e).constructor):t.apply(e,n))}(this,t),n.result="",e instanceof t?n.result=`(${e.result})`:"number"==typeof e?n.result=$c(e):"string"==typeof e&&(n.result=e),n}return ml(t,e),Br(t,[{key:"add",value:function(e){return e instanceof t?this.result=`${this.result} + ${e.getResult()}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} + ${$c(e)}`),this.lowPriority=!0,this}},{key:"sub",value:function(e){return e instanceof t?this.result=`${this.result} - ${e.getResult()}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} - ${$c(e)}`),this.lowPriority=!0,this}},{key:"mul",value:function(e){return this.lowPriority&&(this.result=`(${this.result})`),e instanceof t?this.result=`${this.result} * ${e.getResult(!0)}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} * ${e}`),this.lowPriority=!1,this}},{key:"div",value:function(e){return this.lowPriority&&(this.result=`(${this.result})`),e instanceof t?this.result=`${this.result} / ${e.getResult(!0)}`:"number"!=typeof e&&"string"!=typeof e||(this.result=`${this.result} / ${e}`),this.lowPriority=!1,this}},{key:"getResult",value:function(e){return this.lowPriority||e?`(${this.result})`:this.result}},{key:"equal",value:function(e){const{unit:t=!0}=e||{},n=new RegExp(`${Dc}`,"g");return this.result=this.result.replace(n,t?"px":""),void 0!==this.lowPriority?`calc(${this.result})`:this.result}}]),t}(Fc);const Hc=(e,t,n)=>{var r;return"function"==typeof n?n(Rc(t,null!==(r=t[e])&&void 0!==r?r:{})):null!=n?n:{}},Uc=(e,t,n,r)=>{const o=Object.assign({},t[e]);if(null==r?void 0:r.deprecatedTokens){const{deprecatedTokens:e}=r;e.forEach((e=>{let[t,n]=e;var r;((null==o?void 0:o[t])||(null==o?void 0:o[n]))&&(null!==(r=o[n])&&void 0!==r||(o[n]=null==o?void 0:o[t]))}))}const a=Object.assign(Object.assign({},n),o);return Object.keys(a).forEach((e=>{a[e]===t[e]&&delete a[e]})),a};function Wc(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const o=Array.isArray(e)?e:[e,e],[a]=o,i=o.join("-");return e=>{const[o,l,s,c,u]=ks(),{getPrefixCls:f,iconPrefixCls:d,csp:p}=(0,qn.useContext)(cr),m=f(),h=u?"css":"js",g=(e=>{const t="css"===e?Bc:Lc;return e=>new t(e)})(h),{max:y,min:v}=function(e){return"js"===e?{max:Math.max,min:Math.min}:{max:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return`max(${t.map((e=>fo(e))).join(",")})`},min:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return`min(${t.map((e=>fo(e))).join(",")})`}}}(h),b={theme:o,token:c,hashId:s,nonce:()=>null==p?void 0:p.nonce,clientOnly:r.clientOnly,order:r.order||-999};Ma(Object.assign(Object.assign({},b),{clientOnly:!1,path:["Shared",m]}),(()=>[{"&":Ps(c)}])),Ms(d,p);const x=Ma(Object.assign(Object.assign({},b),{path:[i,e,d]}),(()=>{if(!1===r.injectStyle)return[];const{token:o,flush:i}=(e=>{let t,n=e,r=zc;return Ic&&"undefined"!=typeof Proxy&&(t=new Set,n=new Proxy(e,{get:(e,n)=>(Ac&&t.add(n),e[n])}),r=(e,n)=>{var r;jc[e]={global:Array.from(t),component:Object.assign(Object.assign({},null===(r=jc[e])||void 0===r?void 0:r.component),n)}}),{token:n,keys:t,flush:r}})(c),f=Hc(a,l,n),p=`.${e}`,h=Uc(a,l,f,{deprecatedTokens:r.deprecatedTokens});u&&Object.keys(f).forEach((e=>{f[e]=`var(${mo(e,((e,t)=>`${[t,e.replace(/([A-Z]+)([A-Z][a-z]+)/g,"$1-$2").replace(/([a-z])([A-Z])/g,"$1-$2")].filter(Boolean).join("-")}`)(a,u.prefix))})`}));const b=Rc(o,{componentCls:p,prefixCls:e,iconCls:`.${d}`,antCls:`.${m}`,calc:g,max:y,min:v},u?f:h),x=t(b,{hashId:s,prefixCls:e,rootPrefixCls:m,iconPrefixCls:d});return i(a,h),[!1===r.resetStyle?null:Ns(b,e),x]}));return[x,s]}}const Vc=e=>{const{componentCls:t,notificationMarginEdge:n,animationMaxHeight:r}=e,o=`${t}-notice`,a=new ja("antNotificationFadeIn",{"0%":{transform:"translate3d(100%, 0, 0)",opacity:0},"100%":{transform:"translate3d(0, 0, 0)",opacity:1}});return{[t]:{[`&${t}-top, &${t}-bottom`]:{marginInline:0,[o]:{marginInline:"auto auto"}},[`&${t}-top`]:{[`${t}-fade-enter${t}-fade-enter-active, ${t}-fade-appear${t}-fade-appear-active`]:{animationName:new ja("antNotificationTopFadeIn",{"0%":{top:-r,opacity:0},"100%":{top:0,opacity:1}})}},[`&${t}-bottom`]:{[`${t}-fade-enter${t}-fade-enter-active, ${t}-fade-appear${t}-fade-appear-active`]:{animationName:new ja("antNotificationBottomFadeIn",{"0%":{bottom:e.calc(r).mul(-1).equal(),opacity:0},"100%":{bottom:0,opacity:1}})}},[`&${t}-topRight, &${t}-bottomRight`]:{[`${t}-fade-enter${t}-fade-enter-active, ${t}-fade-appear${t}-fade-appear-active`]:{animationName:a}},[`&${t}-topLeft, &${t}-bottomLeft`]:{marginRight:{value:0,_skip_check_:!0},marginLeft:{value:n,_skip_check_:!0},[o]:{marginInlineEnd:"auto",marginInlineStart:0},[`${t}-fade-enter${t}-fade-enter-active, ${t}-fade-appear${t}-fade-appear-active`]:{animationName:new ja("antNotificationLeftFadeIn",{"0%":{transform:"translate3d(-100%, 0, 0)",opacity:0},"100%":{transform:"translate3d(0, 0, 0)",opacity:1}})}}}}},Gc=["top","topLeft","topRight","bottom","bottomLeft","bottomRight"],qc={topLeft:"left",topRight:"right",bottomLeft:"left",bottomRight:"right",top:"left",bottom:"left"},Kc=e=>{const t={};for(let n=1;n<e.notificationStackLayer;n++)t[`&:nth-last-child(${n+1})`]={overflow:"hidden",[`& > ${e.componentCls}-notice`]:{opacity:0,transition:`opacity ${e.motionDurationMid}`}};return Object.assign({[`&:not(:nth-last-child(-n+${e.notificationStackLayer}))`]:{opacity:0,overflow:"hidden",color:"transparent",pointerEvents:"none"}},t)},Xc=e=>{const t={};for(let n=1;n<e.notificationStackLayer;n++)t[`&:nth-last-child(${n+1})`]={background:e.colorBgBlur,backdropFilter:"blur(10px)","-webkit-backdrop-filter":"blur(10px)"};return Object.assign({},t)},Qc=e=>{const{componentCls:t}=e;return Object.assign({[`${t}-stack`]:{[`& > ${t}-notice-wrapper`]:Object.assign({transition:`all ${e.motionDurationSlow}, backdrop-filter 0s`,position:"absolute"},Kc(e))},[`${t}-stack:not(${t}-stack-expanded)`]:{[`& > ${t}-notice-wrapper`]:Object.assign({},Xc(e))},[`${t}-stack${t}-stack-expanded`]:{[`& > ${t}-notice-wrapper`]:{"&:not(:nth-last-child(-n + 1))":{opacity:1,overflow:"unset",color:"inherit",pointerEvents:"auto",[`& > ${e.componentCls}-notice`]:{opacity:1}},"&:after":{content:'""',position:"absolute",height:e.margin,width:"100%",insetInline:0,bottom:e.calc(e.margin).mul(-1).equal(),background:"transparent",pointerEvents:"auto"}}}},Gc.map((t=>((e,t)=>{const{componentCls:n}=e;return{[`${n}-${t}`]:{[`&${n}-stack > ${n}-notice-wrapper`]:{[t.startsWith("top")?"top":"bottom"]:0,[qc[t]]:{value:0,_skip_check_:!0}}}}})(e,t))).reduce(((e,t)=>Object.assign(Object.assign({},e),t)),{}))},Yc=e=>{const{iconCls:t,componentCls:n,boxShadow:r,fontSizeLG:o,notificationMarginBottom:a,borderRadiusLG:i,colorSuccess:l,colorInfo:s,colorWarning:c,colorError:u,colorTextHeading:f,notificationBg:d,notificationPadding:p,notificationMarginEdge:m,fontSize:h,lineHeight:g,width:y,notificationIconSize:v,colorText:b}=e,x=`${n}-notice`;return{position:"relative",marginBottom:a,marginInlineStart:"auto",background:d,borderRadius:i,boxShadow:r,[x]:{padding:p,width:y,maxWidth:`calc(100vw - ${fo(e.calc(m).mul(2).equal())})`,overflow:"hidden",lineHeight:g,wordWrap:"break-word"},[`${n}-close-icon`]:{fontSize:h,cursor:"pointer"},[`${x}-message`]:{marginBottom:e.marginXS,color:f,fontSize:o,lineHeight:e.lineHeightLG},[`${x}-description`]:{fontSize:h,color:b},[`${x}-closable ${x}-message`]:{paddingInlineEnd:e.paddingLG},[`${x}-with-icon ${x}-message`]:{marginBottom:e.marginXS,marginInlineStart:e.calc(e.marginSM).add(v).equal(),fontSize:o},[`${x}-with-icon ${x}-description`]:{marginInlineStart:e.calc(e.marginSM).add(v).equal(),fontSize:h},[`${x}-icon`]:{position:"absolute",fontSize:v,lineHeight:1,[`&-success${t}`]:{color:l},[`&-info${t}`]:{color:s},[`&-warning${t}`]:{color:c},[`&-error${t}`]:{color:u}},[`${x}-close`]:{position:"absolute",top:e.notificationPaddingVertical,insetInlineEnd:e.notificationPaddingHorizontal,color:e.colorIcon,outline:"none",width:e.notificationCloseButtonSize,height:e.notificationCloseButtonSize,borderRadius:e.borderRadiusSM,transition:`background-color ${e.motionDurationMid}, color ${e.motionDurationMid}`,display:"flex",alignItems:"center",justifyContent:"center","&:hover":{color:e.colorIconHover,backgroundColor:e.closeBtnHoverBg}},[`${x}-btn`]:{float:"right",marginTop:e.marginSM}}},Jc=e=>{const{componentCls:t,notificationMarginBottom:n,notificationMarginEdge:r,motionDurationMid:o,motionEaseInOut:a}=e,i=`${t}-notice`,l=new ja("antNotificationFadeOut",{"0%":{maxHeight:e.animationMaxHeight,marginBottom:n},"100%":{maxHeight:0,marginBottom:0,paddingTop:0,paddingBottom:0,opacity:0}});return[{[t]:Object.assign(Object.assign({},Os(e)),{position:"fixed",zIndex:e.zIndexPopup,marginRight:{value:r,_skip_check_:!0},[`${t}-hook-holder`]:{position:"relative"},[`${t}-fade-appear-prepare`]:{opacity:"0 !important"},[`${t}-fade-enter, ${t}-fade-appear`]:{animationDuration:e.motionDurationMid,animationTimingFunction:a,animationFillMode:"both",opacity:0,animationPlayState:"paused"},[`${t}-fade-leave`]:{animationTimingFunction:a,animationFillMode:"both",animationDuration:o,animationPlayState:"paused"},[`${t}-fade-enter${t}-fade-enter-active, ${t}-fade-appear${t}-fade-appear-active`]:{animationPlayState:"running"},[`${t}-fade-leave${t}-fade-leave-active`]:{animationName:l,animationPlayState:"running"},"&-rtl":{direction:"rtl",[`${i}-btn`]:{float:"left"}}})},{[t]:{[`${i}-wrapper`]:Object.assign({},Yc(e))}}]},Zc=e=>({zIndexPopup:e.zIndexPopupBase+1e3+50,width:384,closeBtnHoverBg:e.wireframe?"transparent":e.colorFillContent}),eu=e=>{const t=e.paddingMD,n=e.paddingLG;return Rc(e,{notificationBg:e.colorBgElevated,notificationPaddingVertical:t,notificationPaddingHorizontal:n,notificationIconSize:e.calc(e.fontSizeLG).mul(e.lineHeightLG).equal(),notificationCloseButtonSize:e.calc(e.controlHeightLG).mul(.55).equal(),notificationMarginBottom:e.margin,notificationPadding:`${fo(e.paddingMD)} ${fo(e.paddingContentHorizontalLG)}`,notificationMarginEdge:e.marginLG,animationMaxHeight:150,notificationStackLayer:3})},tu=((e,t,n,r)=>{const o=Wc(e,(e=>{const t=eu(e);return[Jc(t),Vc(t),Qc(t)]}),n,r),a=((e,t,n)=>{function r(t){return`${e}${t.slice(0,1).toUpperCase()}${t.slice(1)}`}const{unitless:o={},injectStyle:a=!0}={},i={[r("zIndexPopup")]:!0};Object.keys(o).forEach((e=>{i[r(e)]=o[e]}));const l=n=>{let{rootCls:o,cssVar:a}=n;const[,l]=ks();return function(e,t){var n=e.key,r=e.prefix,o=e.unitless,a=e.ignore,i=e.token,l=e.scope,s=void 0===l?"":l,c=(0,qn.useContext)(Qr),u=c.cache.instanceId,f=c.container,d=i._tokenKey,p=[].concat(yr(e.path),[n,s,d]),m=Eo(Ia,p,(function(){var e=t(),i=hr(go(e,n,{prefix:r,unitless:o,ignore:a,scope:s}),2),l=i[0],c=i[1];return[l,c,Oa(p,c),n]}),(function(e){var t=hr(e,3)[2];uo&&Pr(t,{mark:qr})}),(function(e){var t=hr(e,3),r=t[1],o=t[2];if(r){var a=Nr(r,o,{mark:qr,prepend:"queue",attachTo:f,priority:-999});a[Kr]=u,a.setAttribute(Gr,n)}}))}({path:[e],prefix:a.prefix,key:null==a?void 0:a.key,unitless:Object.assign(Object.assign({},ws),i),ignore:Ss,token:l,scope:o},(()=>{const n=Hc(e,l,t),o=Uc(e,l,n,{deprecatedTokens:void 0});return Object.keys(n).forEach((e=>{o[r(e)]=o[e],delete o[e]})),o})),null};return t=>{const[,,,,n]=ks();return[r=>a&&n?qn.createElement(qn.Fragment,null,qn.createElement(l,{rootCls:t,cssVar:n,component:e}),r):r,null==n?void 0:n.key]}})(Array.isArray(e)?e[0]:e,n);return function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;const[,n]=o(e),[r,i]=a(t);return[r,n,i]}})("Notification",0,Zc),nu=((e,t,n,r)=>{const o=Wc(["Notification","PurePanel"],(e=>{const t=`${e.componentCls}-notice`,n=eu(e);return{[`${t}-pure-panel`]:Object.assign(Object.assign({},Yc(n)),{width:n.width,maxWidth:`calc(100vw - ${fo(e.calc(n.notificationMarginEdge).mul(2).equal())})`,margin:0})}}),n,Object.assign({resetStyle:!1,order:-998},void 0));return e=>{let{prefixCls:t}=e;return o(t),null}})(0,0,Zc);function ru(e,t){return null===t||!1===t?null:t||qn.createElement("span",{className:`${e}-close-x`},qn.createElement(fc,{className:`${e}-close-icon`}))}const ou={success:ac,info:yc,error:sc,warning:mc},au=e=>{const{prefixCls:t,icon:n,type:r,message:o,description:a,btn:i,role:l="alert"}=e;let s=null;return n?s=qn.createElement("span",{className:`${t}-icon`},n):r&&(s=qn.createElement(ou[r]||null,{className:il()(`${t}-icon`,`${t}-icon-${r}`)})),qn.createElement("div",{className:il()({[`${t}-with-icon`]:s}),role:l},s,qn.createElement("div",{className:`${t}-message`},o),qn.createElement("div",{className:`${t}-description`},a),i&&qn.createElement("div",{className:`${t}-btn`},i))};const iu=e=>{let{children:t,prefixCls:n}=e;const r=Mc(n),[o,a,i]=tu(n,r);return o(qn.createElement(_c,{classNames:{list:il()(a,i,r)}},t))},lu=(e,t)=>{let{prefixCls:n,key:r}=t;return qn.createElement(iu,{prefixCls:n,key:r},e)},su=qn.forwardRef(((e,t)=>{const{top:n,bottom:r,prefixCls:o,getContainer:a,maxCount:i,rtl:l,onAllRemoved:s,stack:c}=e,{getPrefixCls:u,getPopupContainer:f,notification:d,direction:p}=(0,qn.useContext)(cr),[,m]=ks(),h=o||u("notification"),[g,y]=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getContainer,n=void 0===t?Pc:t,r=e.motion,o=e.prefixCls,a=e.maxCount,i=e.className,l=e.style,s=e.onAllRemoved,c=e.stack,u=e.renderNotifications,f=cl(e,Oc),d=hr(qn.useState(),2),p=d[0],m=d[1],h=qn.useRef(),g=qn.createElement(Cc,{container:p,ref:h,prefixCls:o,motion:r,maxCount:a,className:i,style:l,onAllRemoved:s,stack:c,renderNotifications:u}),y=hr(qn.useState([]),2),v=y[0],b=y[1],x=qn.useMemo((function(){return{open:function(e){var t=function(){for(var e={},t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){t&&Object.keys(t).forEach((function(n){var r=t[n];void 0!==r&&(e[n]=r)}))})),e}(f,e);null!==t.key&&void 0!==t.key||(t.key="rc-notification-".concat(Nc),Nc+=1),b((function(e){return[].concat(yr(e),[{type:"open",config:t}])}))},close:function(e){b((function(t){return[].concat(yr(t),[{type:"close",key:e}])}))},destroy:function(){b((function(e){return[].concat(yr(e),[{type:"destroy"}])}))}}}),[]);return qn.useEffect((function(){m(n())})),qn.useEffect((function(){h.current&&v.length&&(v.forEach((function(e){switch(e.type){case"open":h.current.open(e.config);break;case"close":h.current.close(e.key);break;case"destroy":h.current.destroy()}})),b((function(e){return e.filter((function(e){return!v.includes(e)}))})))}),[v]),[x,g]}({prefixCls:h,style:e=>function(e,t,n){let r;switch(e){case"top":r={left:"50%",transform:"translateX(-50%)",right:"auto",top:t,bottom:"auto"};break;case"topLeft":r={left:0,top:t,bottom:"auto"};break;case"topRight":r={right:0,top:t,bottom:"auto"};break;case"bottom":r={left:"50%",transform:"translateX(-50%)",right:"auto",top:"auto",bottom:n};break;case"bottomLeft":r={left:0,top:"auto",bottom:n};break;default:r={right:0,top:"auto",bottom:n}}return r}(e,null!=n?n:24,null!=r?r:24),className:()=>il()({[`${h}-rtl`]:null!=l?l:"rtl"===p}),motion:()=>function(e){return{motionName:`${e}-fade`}}(h),closable:!0,closeIcon:ru(h),duration:4.5,getContainer:()=>(null==a?void 0:a())||(null==f?void 0:f())||document.body,maxCount:i,onAllRemoved:s,renderNotifications:lu,stack:!1!==c&&{threshold:"object"==typeof c?null==c?void 0:c.threshold:void 0,offset:8,gap:m.margin}});return qn.useImperativeHandle(t,(()=>Object.assign(Object.assign({},g),{prefixCls:h,notification:d}))),y}));function cu(e){const t=qn.useRef(null),n=(Va(),qn.useMemo((()=>{const n=n=>{var r;if(!t.current)return;const{open:o,prefixCls:a,notification:i}=t.current,l=`${a}-notice`,{message:s,description:c,icon:u,type:f,btn:d,className:p,style:m,role:h="alert",closeIcon:g}=n,y=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(n,["message","description","icon","type","btn","className","style","role","closeIcon"]),v=ru(l,g);return o(Object.assign(Object.assign({placement:null!==(r=null==e?void 0:e.placement)&&void 0!==r?r:"topRight"},y),{content:qn.createElement(au,{prefixCls:l,icon:u,type:f,message:s,description:c,btn:d,role:h}),className:il()(f&&`${l}-${f}`,p,null==i?void 0:i.className),style:Object.assign(Object.assign({},null==i?void 0:i.style),m),closeIcon:v,closable:!!v}))},r={open:n,destroy:e=>{var n,r;void 0!==e?null===(n=t.current)||void 0===n||n.close(e):null===(r=t.current)||void 0===r||r.destroy()}};return["success","info","warning","error"].forEach((e=>{r[e]=t=>n(Object.assign(Object.assign({},t),{type:e}))})),r}),[]));return[n,qn.createElement(su,Object.assign({key:"notification-holder"},e,{ref:t}))]}let uu=null,fu=e=>e(),du=[],pu={};function mu(){const{getContainer:e,rtl:t,maxCount:n,top:r,bottom:o}=pu,a=(null==e?void 0:e())||document.body;return{getContainer:()=>a,rtl:t,maxCount:n,top:r,bottom:o}}const hu=qn.forwardRef(((e,t)=>{const{notificationConfig:n,sync:r}=e,{getPrefixCls:o}=(0,qn.useContext)(cr),a=pu.prefixCls||o("notification"),i=(0,qn.useContext)(lr),[l,s]=cu(Object.assign(Object.assign(Object.assign({},n),{prefixCls:a}),i.notification));return qn.useEffect(r,[]),qn.useImperativeHandle(t,(()=>{const e=Object.assign({},l);return Object.keys(e).forEach((t=>{e[t]=function(){return r(),l[t].apply(l,arguments)}})),{instance:e,sync:r}})),s})),gu=qn.forwardRef(((e,t)=>{const[n,r]=qn.useState(mu),o=()=>{r(mu)};qn.useEffect(o,[]);const a=Ds(),i=a.getRootPrefixCls(),l=a.getIconPrefixCls(),s=a.getTheme(),c=qn.createElement(hu,{ref:t,sync:o,notificationConfig:n});return qn.createElement(Hs,{prefixCls:i,iconPrefixCls:l,theme:s},a.holderRender?a.holderRender(c):c)}));function yu(){if(!uu){const e=document.createDocumentFragment(),t={fragment:e};return uu=t,void fu((()=>{!function(e,t){er?function(e,t){ar(!0);var n=t[ir]||er(t);ar(!1),n.render(e),t[ir]=n}(e,t):function(e,t){or(e,t)}(e,t)}(qn.createElement(gu,{ref:e=>{const{instance:n,sync:r}=e||{};Promise.resolve().then((()=>{!t.instance&&n&&(t.instance=n,t.sync=r,yu())}))}}),e)}))}uu.instance&&(du.forEach((e=>{switch(e.type){case"open":fu((()=>{uu.instance.open(Object.assign(Object.assign({},pu),e.config))}));break;case"destroy":fu((()=>{null==uu||uu.instance.destroy(e.key)}))}})),du=[])}function vu(e){Ds(),du.push({type:"open",config:e}),yu()}const bu={open:vu,destroy:function(e){du.push({type:"destroy",key:e}),yu()},config:function(e){pu=Object.assign(Object.assign({},pu),e),fu((()=>{var e;null===(e=null==uu?void 0:uu.sync)||void 0===e||e.call(uu)}))},useNotification:function(e){return cu(e)},_InternalPanelDoNotUseOrYouWillBeFired:e=>{const{prefixCls:t,className:n,icon:r,type:o,message:a,description:i,btn:l,closable:s=!0,closeIcon:c,className:u}=e,f=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["prefixCls","className","icon","type","message","description","btn","closable","closeIcon","className"]),{getPrefixCls:d}=qn.useContext(cr),p=t||d("notification"),m=`${p}-notice`,h=Mc(p),[g,y,v]=tu(p,h);return g(qn.createElement("div",{className:il()(`${m}-pure-panel`,y,n,v,h)},qn.createElement(nu,{prefixCls:p}),qn.createElement(wc,Object.assign({},f,{prefixCls:p,eventKey:"pure",duration:null,closable:s,className:il()({notificationClassName:u}),closeIcon:ru(p,c),content:qn.createElement(au,{prefixCls:m,icon:r,type:o,message:a,description:i,btn:l})}))))}},xu=bu;["success","info","warning","error"].forEach((e=>{xu[e]=t=>vu(Object.assign(Object.assign({},t),{type:e}))}));const wu=xu;Gn.interceptors.response.use((e=>0!==e.data.success?(wu.error({message:"警告",description:e.data.message}),Promise.reject(e)):e),(e=>Promise.reject(e)));const Su="http://127.0.0.1:8080/",_u=e=>Gn.post(Su+"save",e),Eu=e=>Gn.post(Su+"remove",e),ku=e=>Gn.post(Su+"update",e),Tu=()=>Gn.get(Su+"remove_all"),Cu=e=>Gn.get(Su+"set_session_userId?userId="+e),Ou=()=>({transform:new Map,weapon:new Map,entity:new Map,icon:new Map,dirData:new Map}),Pu=(e,t)=>{let n=[];return e.entity.forEach(((e,r)=>{t(e)&&n.push(r)})),n},Nu=(e,t,n)=>{const r=Object.keys(e);let o=e;return r.forEach((r=>{try{let a=((e,t,n)=>{switch(t){case"transform":return(e=>{try{return nt(e.payload.location)}catch(e){return null}})(n);case"weapon":return((e,t)=>"Weapon"===t.payload.entityType?((e,t)=>({weaponType:"standardMortar",isActive:t,heightOverGround:0}))(0,0===e.weapon.size):null)(e,n);case"entity":return(e=>({entityType:e.payload.entityType,entityId:e.payload.entityId,selected:!1}))(n);default:return null}})(e,r,n);null!==a&&o[r].set(t,a)}catch(e){console.log("出错了"),console.log(r),console.log(n)}})),o},Mu=(e,t)=>{Object.keys(e).forEach((n=>{e[n].delete(t)}))},Iu=f({transform:(e,t)=>{if(void 0===e)return new Map;switch(t.type){case He.moveBy:return pe(e,(e=>{const n=t.payload.entityId,r=e.get(n);return r&&(r.transform=Ge(t.payload.vector)(r.transform),e.set(n,r)),e}));case He.moveTo:return pe(e,(e=>{const n=t.payload.entityId,r=e.get(n);var o;return r&&(r.transform=(o=t.payload.location,e=>{const t=De(ye(),e),n=be(ye(),o,t);return Ge(n)(e)})(r.transform),e.set(n,r)),e}));default:return e}},weapon:(e,t)=>{if(void 0===e)return new Map;switch(t.type){case Ue.setActive:return pe(e,(e=>{let n=e.get(t.payload.entityId);n&&(n.isActive=t.payload.newState)}));case Ue.toggleActive:return pe(e,(e=>{let n=e.get(t.payload.entityId);n&&(n.isActive=!n.isActive)}));case Ue.pickActive:return pe(e,(e=>{e.forEach(((e,n)=>{e.isActive=n===t.payload.entityId}))}));case Ue.setHeightOverGround:return pe(e,(e=>{e.forEach(((e,n)=>{e.heightOverGround=t.payload.newHeight}))}));default:return e}},entity:(e,t)=>void 0===e?new Map:e,icon:(e,t)=>null==e?new Map:e,dirData:(e,t)=>null==e?new Map:e}),Au=e=>{const t=e.components;let n={};return Object.keys(t).forEach((e=>{let r=[];t[e].forEach(((e,t)=>{r.push([t,e])})),n[e]=r})),n},Ru=(e,t,n)=>{let r=n,o=[];return Fu(e,(e=>"Weapon"===e.entityType||"Target"===e.entityType)).forEach((e=>{const n=De(ye(),e.transform),a=Se(t,n);a<r&&(r=a,o.push(e))})),o},ju=(e,t)=>{let n=[];return Object.keys(e.components).forEach((r=>{const o=e.components[r].get(t);o&&n.push(o)})),Object.assign({},...n)},zu=(e,t)=>{const n=Pu(e.components,(e=>e.entityType===t));let r=[];return n.forEach((t=>{const n=ju(e,t);n&&r.push(n)})),r},Fu=(e,t)=>{const n=Pu(e.components,(e=>t(e)));let r=[];return n.forEach((t=>{const n=ju(e,t);n&&r.push(n)})),r},Lu=(e,t,n)=>e.components[n].get(t)||null,Du=e=>{e.sort(((e,t)=>e.entityId-t.entityId))};let $u=null;const Bu=(e,t)=>{try{const n=((e,t)=>{let n=ye();const r=function(e,t,n){var r=t[0],o=t[1],a=t[2],i=t[3],l=t[4],s=t[5],c=t[6],u=t[7],f=t[8],d=t[9],p=t[10],m=t[11],h=t[12],g=t[13],y=t[14],v=t[15],b=n[0],x=n[1],w=n[2],S=n[3];return e[0]=b*r+x*l+w*f+S*h,e[1]=b*o+x*s+w*d+S*g,e[2]=b*a+x*c+w*p+S*y,e[3]=b*i+x*u+w*m+S*v,b=n[4],x=n[5],w=n[6],S=n[7],e[4]=b*r+x*l+w*f+S*h,e[5]=b*o+x*s+w*d+S*g,e[6]=b*a+x*c+w*p+S*y,e[7]=b*i+x*u+w*m+S*v,b=n[8],x=n[9],w=n[10],S=n[11],e[8]=b*r+x*l+w*f+S*h,e[9]=b*o+x*s+w*d+S*g,e[10]=b*a+x*c+w*p+S*y,e[11]=b*i+x*u+w*m+S*v,b=n[12],x=n[13],w=n[14],S=n[15],e[12]=b*r+x*l+w*f+S*h,e[13]=b*o+x*s+w*d+S*g,e[14]=b*a+x*c+w*p+S*y,e[15]=b*i+x*u+w*m+S*v,e}(Me(),e.transform,e.texture.transform);return Ee(n,t,Ae(Me(),r)),n})(e,t).map(Math.floor),r=4*(n[1]*e.size[0]+n[0]);if($u){const t=($u.data[r]<<8)+$u.data[r+1];return $e(ye(),e.texture.transform)[2]/100*t*.7808988764}return 0}catch(e){return 0}},Hu=.01,Uu=1018.59,Wu=50/60*Math.PI/180/2,Vu=600,Gu=1200,qu=100/60*Math.PI/180/2,Ku=1e3,Xu=4e3,Qu=5*Math.PI/180/2,Yu=200/60*Math.PI/180/2;document.getElementById("dbg");const Ju=document.getElementById("map-name"),Zu=document.getElementById("canvas"),ef=document.getElementById("contourmap_canvas"),tf=document.getElementById("s5canvas"),nf=document.getElementById("s5image"),rf=(document.getElementById("bm21canvas"),document.getElementById("bm21image"),new class{constructor(e,t,n,r,o,a,i,l){this.ready=!1,this.image=t,this.image.onload=()=>this.onload(),this.image.src=e,this.canvas=n,this.scale_y=300,this.scale_x=100,this.scale_time=20/255,this.scale_angle=Math.PI/65535,this.angle_offset=Math.PI/2,this.image_y_offset=l||127,this.deviation=r,this.velocity=o,this.acceleration=a,this.acceleration_time=i}is_ready(){return this.ready}onload(){this.canvas.width=this.image.width,this.canvas.height=this.image.height,this.canvas.getContext("2d").drawImage(this.image,0,0),console.log("s5table ready",this.image.width,this.image.height),this.context=this.canvas.getContext("2d"),this.ready=!0}checkImageCoordinates(e,t){return 0<=e&&e<=this.canvas.width&&0<=t&&t<=this.canvas.height}pixel2rad(e){return this.values2rad(e[0],e[1])}values2rad(e,t){return(256*e+t)*this.scale_angle-this.angle_offset}value2time(e){return e*this.scale_time}getAngles(e){const t=Math.floor(-e/this.scale_y)+this.image_y_offset;if(this.checkImageCoordinates(0,t)){const e=this.context.getImageData(0,t,this.image.width,1).data;let n,r=[];for(n=0;n<Math.floor(e.length/4);n++){let t=4*n;r.push(this.values2rad(e[t],e[t+1]))}return r}return[]}getTimes(e){const t=Math.floor(-e/this.scale_y)+this.image_y_offset;if(this.checkImageCoordinates(0,t)){const e=this.context.getImageData(0,t,this.image.width,1).data;let n,r=[];for(n=0;n<Math.floor(e.length/4);n++){let t=4*n;r.push(this.value2time(e[t]+2))}return r}return NaN}getAngle(e,t){const n=Math.floor(e/this.scale_x),r=Math.floor(-t/this.scale_y)+this.image_y_offset;if(this.checkImageCoordinates(n,r)){const e=this.context.getImageData(n,r,1,1).data;return this.pixel2rad(e)}return NaN}getTime(e,t){const n=Math.floor(e/this.scale_x),r=Math.floor(-t/this.scale_y)+this.image_y_offset;if(this.checkImageCoordinates(n,r)){const e=this.context.getImageData(n,r,1,1).data[2];return this.value2time(e)}return NaN}calcSpreadHorizontal(e,t){const n=this.getTime(e,t);return Math.sin(this.deviation)*(this.velocity+.5*Math.min(this.acceleration_time,n)*-this.acceleration)*n}calcSpreadVertical(e,t){const n=this.getAngle(e,t),r=this.getAngles(t);if(n&&r){const t=this.linearDistSearch(r,n-this.deviation),o=this.linearDistSearch(r,n+this.deviation);return[Math.max(e-t,0),Math.max(o-e,0)]}return[NaN,NaN]}angle2groundDistance(e,t,n){const r=Math.floor(-t/this.scale_y)+this.image_y_offset;if(this.checkImageCoordinates(this.image.width-1,t)){const t=this.context.getImageData(0,r,this.image.width,1).data,o=this.searchAngleIndex(t,e,n);return-1===o?0:o*this.scale_x}return 0}linearDistSearch(e,t){let n,r=0,o=e[0];for(n=0;n<e.length;n++){let a=e[n];Math.abs(o-t)>Math.abs(a-o)&&(o=a,r=n)}return r*this.scale_x}searchAngleIndex(e,t,n){let r=0,o=e.length/4-1;for(;r<=o;){let a=Math.floor((r+o)/2),i=this.values2rad(e[4*a],e[4*a+1]);if(Math.abs(i-t)<n)return a;i<=t?r=a+1:o=a-1}return-1}searchClosestAngleIndex(e,t,n){let r=0,o=e.length/4-1,a=0,i=-1;for(;r<=o;){let l=Math.floor((r+o)/2),s=this.values2rad(e[4*l],e[4*l+1]);Math.abs(s-t)<n?-1==i&&Math.abs(s-t)<Math.abs(a-t)&&(a=s,i=e[s]):s<=t?r=l+1:o=l-1}return i}}("s5_low.png",nf,tf,Qu,3e4,-5e3,2)),of=new class{constructor(e,t){this.ready=!1,this.image=new Image,this.image.onload=()=>this.onload(),this.image.src=e,this.canvas=t,this.resolution_scale=1,this.transform=je(Me(),Me(),ve(1/this.resolution_scale,1/this.resolution_scale,1/this.resolution_scale)),this.context=this.canvas.getContext("2d")}is_ready(){return this.ready}onload(){this.draw(),this.ready=!0}draw(){this.canvas.width=this.image.width*this.resolution_scale,this.canvas.height=this.image.height*this.resolution_scale,this.context.drawImage(this.image,0,0,this.image.width*this.resolution_scale,this.image.height*this.resolution_scale)}set_image_source(e){this.ready=!1,this.image.src=e}get_canvas(){return this.canvas}set_zoom(e){this.resolution_scale=50*e,this.transform=je(Me(),Me(),ve(1/this.resolution_scale,1/this.resolution_scale,1/this.resolution_scale)),this.draw()}}("",ef);function af(e,t,n,r){const o=-t,a=Math.sqrt(Math.pow(n,4)-r*(r*Math.pow(e,2)+2*o*Math.pow(n,2)));return Math.atan((Math.pow(n,2)+a)/(r*e))}function lf(e,t,n,r){const o=-t,a=Math.sqrt(Math.pow(n,4)-r*(r*Math.pow(e,2)+2*o*Math.pow(n,2)));return Math.atan((Math.pow(n,2)-a)/(r*e))}function sf(e,t,n,r){const o=Math.sqrt(Math.pow(n,2)*Math.pow(Math.sin(e),2)+2*r*t);return isNaN(o)?0:n*Math.cos(e)*(n*Math.sin(e)+o)/r}function cf(e,t,n,r){const o=Math.sqrt(Math.pow(n*Math.sin(e),2)+2*r*t);return(n*Math.sin(e)+o)/r}const uf=Object.freeze({pathSolver:function(e,t,n,r,o,a,i,l){const s=r-e,c=o-t,u=Math.round(Math.hypot(s,c)),f=Math.round((180*Math.atan2(s,-c)/Math.PI+360)%360*100)/100;return[lf(u,n-a,i,l),f,u]},spreadSolver:function(e,t,n,r,o){const a=lf(e,t,n,r),i=sf(a-o,t,n,r),l=sf(a+o,t,n,r);return[Math.sin(o)*n*cf(a,t,n,r),Math.max(0,e-i),Math.max(0,l-e)]}}),ff=Object.freeze({pathSolver:function(e,t,n,r,o,a,i,l){const s=r-e,c=o-t,u=Math.round(Math.hypot(s,c)),f=Math.round((180*Math.atan2(s,-c)/Math.PI+360)%360*100)/100;return[af(u,n-a,i,l),f,u]},spreadSolver:function(e,t,n,r,o){const a=af(e,t,n,r),i=sf(a+o,t,n,r),l=sf(a-o,t,n,r);return[Math.sin(o)*n*cf(a,t,n,r),Math.max(0,e-i),Math.max(0,l-e)]}}),df=(e,t,n,r,o,a)=>{const i=e[2]-t[2],l=be(ye(),t,e),[s,c,u]=a.pathSolver(e[0],e[1],e[2],t[0],t[1],t[2],n,r),[f,d,p]=a.spreadSolver(u,i,n,r,o),m=cf(s,i,n,r);return Object.freeze({weaponTranslation:e,targetTranslation:t,weaponToTargetVec:l,angle:s,dir:c,dist:u,startHeightOffset:i,time:m,horizontalSpread:f,closeSpread:d,farSpread:p})},pf=(e,t,n,r,o)=>Object.freeze({lowArc:df(e,t,n,r,o,uf),highArc:df(e,t,n,r,o,ff)}),mf=(e,t)=>pf(e,t,10989,980,Wu),hf={albasrah:{reference:"AAS_v1",minimap_image_src:"maps/albasrah_minimap.jpg",heightmap_image_src:"maps/albasrah_heightmap.png",landscape:{loc_x:-152406.40625,loc_y:-152400,scale_x:100,scale_y:100,scale_z:10,resolution_x:3049,resolution_y:3049},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-152e3,loc_y:-152e3},mapTextureCorner1:{loc_x:152e3,loc_y:152e3},compression:{z_translate:0}},anvil:{reference:"AAS_v1",minimap_image_src:"maps/anvil_minimap.jpg",heightmap_image_src:"maps/anvil_heightmap.png",landscape:{loc_x:-204e3,loc_y:-204e3,scale_x:75,scale_y:75,scale_z:45,resolution_x:4081,resolution_y:4081},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-204e3,loc_y:-204e3},mapTextureCorner1:{loc_x:102e3,loc_y:102e3},compression:{z_translate:0}},belaya:{reference:"AAS_v1",minimap_image_src:"maps/belaya_minimap.jpg",heightmap_image_src:"maps/belaya_heightmap.png",landscape:{loc_x:-201600,loc_y:-214200,scale_x:100,scale_y:100,scale_z:120,resolution_x:4033,resolution_y:4033},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-195400,loc_y:182500},mapTextureCorner1:{loc_x:195e3,loc_y:-208e3},compression:{z_translate:0}},blackcoast:{reference:"AAS_v1",minimap_image_src:"maps/blackcoast_minimap.jpg",heightmap_image_src:"maps/blackcoast_heightmap.png",landscape:{loc_x:-204000.578125,loc_y:-214250.390625,scale_x:100.3937,scale_y:100.3937,scale_z:80,resolution_x:4033,resolution_y:4033},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-229999.515625,loc_y:-212746.78125},mapTextureCorner1:{loc_x:229998.46875,loc_y:247251.0625},compression:{z_translate:0}},chora:{reference:"AAS_v1",minimap_image_src:"maps/chora_minimap.jpg",heightmap_image_src:"maps/chora_heightmap.png",landscape:{loc_x:-246400,loc_y:-190200,scale_x:50,scale_y:50,scale_z:400,resolution_x:8129,resolution_y:4827},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-246400,loc_y:-266400},mapTextureCorner1:{loc_x:159990,loc_y:14e4},compression:{z_translate:0}},fallujah:{reference:"AAS_v1",minimap_image_src:"maps/fallujah_minimap.jpg",heightmap_image_src:"maps/fallujah_heightmap.png",landscape:{loc_x:-204e3,loc_y:-204e3,scale_x:100,scale_y:100,scale_z:100,resolution_x:4081,resolution_y:4081},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-131500,loc_y:-154500},mapTextureCorner1:{loc_x:169e3,loc_y:146e3},compression:{z_translate:0}},foolsroad:{reference:"AAS_v1",minimap_image_src:"maps/foolsroad_minimap.jpg",heightmap_image_src:"maps/foolsroad_heightmap.png",landscape:{loc_x:-159809.515625,loc_y:-186630,scale_x:100,scale_y:100,scale_z:320,resolution_x:2806,resolution_y:2806},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:44805.078125,loc_y:44805.078125},mapTextureCorner1:{loc_x:-132576.921875,loc_y:-132576.921875},compression:{z_translate:0}},goosebay:{reference:"AAS_v1",minimap_image_src:"maps/goosebay_minimap.jpg",heightmap_image_src:"maps/goosebay_heightmap.png",contourmap_image_src:"maps/goosebay_contourmap.svg",landscape:{loc_x:-203256.890625,loc_y:-203274.84375,scale_x:100,scale_y:100,scale_z:40,resolution_x:4065,resolution_y:4065},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-201657.890625,loc_y:-201674.84375},mapTextureCorner1:{loc_x:201523.078125,loc_y:201503.078125},compression:{z_translate:0}},gorodok:{reference:"AAS_v1",minimap_image_src:"maps/gorodok_minimap.jpg",heightmap_image_src:"maps/gorodok_heightmap.png",landscape:{loc_x:-203199.203125,loc_y:-203200,scale_x:100,scale_y:100,scale_z:1e3,resolution_x:4065,resolution_y:4065},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-203199,loc_y:203200},mapTextureCorner1:{loc_x:203201,loc_y:-203200},compression:{z_translate:0}},harju:{reference:"AAS_v1",minimap_image_src:"maps/harju_minimap.jpg",heightmap_image_src:"maps/harju_heightmap.png",landscape:{loc_x:-201599.359375,loc_y:-201600.765625,scale_x:100,scale_y:100,scale_z:100,resolution_x:4033,resolution_y:4033},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-201600,loc_y:-201600},mapTextureCorner1:{loc_x:201600,loc_y:201600},compression:{z_translate:0}},jensensrange:{reference:"v2",minimap_image_src:"maps/jensensrange_minimap.jpg",heightmap_image_src:"maps/jensensrange_heightmap.png",landscape:{loc_x:-204051.40625,loc_y:-204014.078125,scale_x:100,scale_y:100,scale_z:100,resolution_x:4081,resolution_y:4081},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:200400,loc_y:-200400},mapTextureCorner1:{loc_x:-200400,loc_y:200400},compression:{z_translate:0}},kamdesh:{reference:"AAS_v1",minimap_image_src:"maps/kamdesh_minimap.jpg",heightmap_image_src:"maps/kamdesh_heightmap.png",landscape:{loc_x:-201600,loc_y:-201600,scale_x:100,scale_y:100,scale_z:135,resolution_x:4033,resolution_y:4033},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-201600,loc_y:-201600},mapTextureCorner1:{loc_x:201600,loc_y:201600},compression:{z_translate:0}},kohat:{reference:"AAS_v1",minimap_image_src:"maps/kohat_minimap.jpg",heightmap_image_src:"maps/kohat_heightmap.png",landscape:{loc_x:-201602.3125,loc_y:-201600,scale_x:100,scale_y:100,scale_z:75,resolution_x:4065,resolution_y:4065},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-23e4,loc_y:-23e4},mapTextureCorner1:{loc_x:231700,loc_y:231700},compression:{z_translate:0}},kokan:{reference:"AAS_v1",minimap_image_src:"maps/kokan_minimap.jpg",heightmap_image_src:"maps/kokan_heightmap.png",contourmap_image_src:"maps/kokan_contourmap.svg",landscape:{loc_x:-133299.648438,loc_y:-171400,scale_x:50,scale_y:50,scale_z:100,resolution_x:6097,resolution_y:7367},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:142013.671875,loc_y:142013.671875},mapTextureCorner1:{loc_x:-107634.9375,loc_y:-107566.75},compression:{z_translate:0}},lashkar:{reference:"AAS_v1",minimap_image_src:"maps/lashkar_minimap.jpg",heightmap_image_src:"maps/lashkar_heightmap.png",landscape:{loc_x:-216700,loc_y:-216700,scale_x:100,scale_y:100,scale_z:150,resolution_x:4336,resolution_y:4336},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:216700,loc_y:216700},mapTextureCorner1:{loc_x:-216700,loc_y:-216700},compression:{z_translate:0}},logar:{reference:"AAS_v1",minimap_image_src:"maps/logar_minimap.jpg",heightmap_image_src:"maps/logar_heightmap.png",landscape:{loc_x:-138604.3063,loc_y:-126005.56756,scale_x:99.98999,scale_y:99.98999,scale_z:49.98999,resolution_x:2773,resolution_y:1891},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:87978.328125,loc_y:62921.710938},mapTextureCorner1:{loc_x:-88145.140625,loc_y:-113238.757812},compression:{z_translate:0}},manic:{reference:"AAS_v1",minimap_image_src:"maps/manic_minimap.jpg",heightmap_image_src:"maps/manic_heightmap.png",landscape:{loc_x:-203222.328125,loc_y:-203210.015625,scale_x:100,scale_y:100,scale_z:300,resolution_x:4065,resolution_y:4065},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-201657.890625,loc_y:-201674.84375},mapTextureCorner1:{loc_x:201523.078125,loc_y:201503.078125},compression:{z_translate:0}},manicouagan:{reference:"AAS_v1",minimap_image_src:"maps/manicouagan_minimap.jpg",heightmap_image_src:"maps/manicouagan_heightmap.png",landscape:{loc_x:-203221.609375,loc_y:-203209.890625,scale_x:100,scale_y:100,scale_z:300,resolution_x:4065,resolution_y:4065},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-201657.890625,loc_y:-201674.84375},mapTextureCorner1:{loc_x:201523.078125,loc_y:201503.078125},compression:{z_translate:0}},mestia:{reference:"AAS_v1",minimap_image_src:"maps/mestia_minimap.jpg",heightmap_image_src:"maps/mestia_heightmap.png",landscape:{loc_x:-154500,loc_y:-116195.453125,scale_x:100,scale_y:100,scale_z:120,resolution_x:3061,resolution_y:2551},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:12e4,loc_y:13e4},mapTextureCorner1:{loc_x:-12e4,loc_y:-11e4},compression:{z_translate:0}},mutaha:{reference:"AAS_v1",minimap_image_src:"maps/mutaha_minimap.jpg",heightmap_image_src:"maps/mutaha_heightmap.png",landscape:{loc_x:-178502,loc_y:-178500,scale_x:100,scale_y:100,scale_z:30,resolution_x:4081,resolution_y:4081},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-93500,loc_y:161500},mapTextureCorner1:{loc_x:182e3,loc_y:-114e3},compression:{z_translate:0}},narva:{reference:"AAS_v1",minimap_image_src:"maps/narva_minimap.jpg",heightmap_image_src:"maps/narva_heightmap.png",landscape:{loc_x:-203200,loc_y:-203200,scale_x:100,scale_y:100,scale_z:100,resolution_x:4065,resolution_y:4065},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-138970.6875,loc_y:139792.515625},mapTextureCorner1:{loc_x:141029.375,loc_y:-140207.4375},compression:{z_translate:0}},skorpo:{reference:"AAS_v1",minimap_image_src:"maps/skorpo_minimap_aas_v1.jpg",heightmap_image_src:"maps/skorpo_heightmap.png",landscape:{loc_x:-481127.25,loc_y:-394791.78125,scale_x:120,scale_y:120,scale_z:350,slice_x:508,slice_y:1524,rot_z:-2.006195,resolution_x:7113,resolution_y:5081},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:34e4,loc_y:25e4},mapTextureCorner1:{loc_x:-13e4,loc_y:-22e4},compression:{z_translate:0}},skorpoFull:{reference:"Invasion_v1",minimap_image_src:"maps/skorpo_minimap_full.jpg",heightmap_image_src:"maps/skorpo_heightmap.png",landscape:{loc_x:-481127.25,loc_y:-394791.78125,scale_x:120,scale_y:120,scale_z:350,slice_x:508,slice_y:1524,rot_z:-2.006195,resolution_x:7113,resolution_y:5081},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:38e4,loc_y:38e4},mapTextureCorner1:{loc_x:-38e4,loc_y:-38e4},compression:{z_translate:0}},sumari:{reference:"AAS_v1",minimap_image_src:"maps/sumari_minimap.jpg",heightmap_image_src:"maps/sumari_heightmap.png",landscape:{loc_x:-68200.820312,loc_y:-37199.453125,scale_x:100,scale_y:100,scale_z:75,resolution_x:1427,resolution_y:1055},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-63973.925781,loc_y:-44728.078125},mapTextureCorner1:{loc_x:66033.578125,loc_y:85297.234375},compression:{z_translate:0}},tallil:{reference:"AAS_v1",minimap_image_src:"maps/tallil_minimap.jpg",heightmap_image_src:"maps/tallil_heightmap.png",landscape:{loc_x:-228598.625,loc_y:-228600.65625,scale_x:100,scale_y:100,scale_z:125,resolution_x:4573,resolution_y:4573},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-234000.015625,loc_y:-234e3},mapTextureCorner1:{loc_x:234e3,loc_y:234e3},compression:{z_translate:0}},yehorivka:{reference:"AAS_v1",minimap_image_src:"maps/yehorivka_minimap.jpg",heightmap_image_src:"maps/yehorivka_heightmap.png",landscape:{loc_x:-330197,loc_y:-330200,scale_x:100,scale_y:100,scale_z:400,resolution_x:6351,resolution_y:6351},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-330197.40625,loc_y:-330199.5},mapTextureCorner1:{loc_x:304803,loc_y:304800},compression:{z_translate:0}},yehorivka_skirmish_v1:{reference:"Skirmish_v1",minimap_image_src:"maps/yehorivka_skirmish_v1_minimap.jpg",heightmap_image_src:"maps/yehorivka_heightmap.png",landscape:{loc_x:-330197,loc_y:-330200,scale_x:100,scale_y:100,scale_z:400,resolution_x:6351,resolution_y:6351},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-12e4,loc_y:75e3},mapTextureCorner1:{loc_x:158e3,loc_y:-203e3},compression:{z_translate:0}},sanxianislands:{reference:"AAS_v1",minimap_image_src:"maps/sanxianislands_minimap.jpg",heightmap_image_src:"maps/sanxian_heightmap.png",landscape:{loc_x:-204e3,loc_y:-204e3,scale_x:100,scale_y:100,scale_z:100,resolution_x:4081,resolution_y:4081},mapTexture:{size_x:4096,size_y:4096},mapTextureCorner0:{loc_x:-23e4,loc_y:-205e3},mapTextureCorner1:{loc_x:23e4,loc_y:255e3},compression:{z_translate:0}}};var gf,yf;(yf=gf||(gf={})).changeZoom="CAMERA_CHANGE_ZOOM",yf.move="CAMERA_MOVE",yf.setTransform="CAMERA_SET_TRANSFORM";const vf=e=>$e(ye(),e.transform)[0];function bf(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var xf=bf();xf.withExtraArgument=bf;const wf=xf,Sf=(e,t)=>({type:He.moveTo,payload:{entityId:e,location:t}}),_f=(e,t,n)=>({type:Be.add,payload:{location:e,entityType:"Weapon",entityId:n}}),Ef=e=>({type:Tf.add,payload:e});var kf,Tf,Cf,Of,Pf,Nf,Mf;!function(e){e.add="ICON_ADD",e.remove="ICON_REMOVE",e.remove_all="ICON_REMOVE_ALL"}(kf||(kf={})),function(e){e.add="DIRDATA_ADD",e.remove="DIRDATA_REMOVE",e.update="DIRDATA_UPDATE",e.left="DIRDATA_LEFT"}(Tf||(Tf={})),(Pf=Cf||(Cf={})).creatingSession="REPLICATION_CREATING_SESSION",Pf.connectionReady="REPLICATION_CONNECTION_READY",Pf.connectionClosed="REPLICATION_CONNECTION_CLOSED",Pf.connectionError="REPLICATION_CONNECTION_ERROR",Pf.receiveMessage="REPLICATION_RECEIVE_MESSAGE",Pf.sendPing="REPLICATION_SEND_PING",Pf.noop="REPLICATION_NOOP",function(e){e.create="SESSION_CREATE",e.started="SESSION_STARTED",e.ended="SESSION_ENDED",e.join="SESSION_JOIN",e.leave="SESSION_LEAVE",e.addUser="SESSION_ADD_USER",e.removeUser="SESSION_REMOVE_USER",e.changeUserName="SESSION_CHANGE_USER_NAME",e.userNameChanged="SESSION_USER_NAME_CHANGED",e.sendMessage="REPLICATION_SEND_MESSAGE"}(Of||(Of={})),function(e){e.action="ACTION",e.joined="JOINED",e.userJoined="USER_JOINED",e.userLeft="USER_LEFT",e.userChangedName="USER_CHANGED_NAME",e.error="ERROR"}(Nf||(Nf={})),function(e){e.action="ACTION",e.create="CREATE",e.join="JOIN",e.ping="PING",e.changeName="CHANGE_NAME",e.leave="LEAVE"}(Mf||(Mf={}));const If=(e,t)=>({type:Of.create,payload:{serverAddress:e,serializableState:Au(t)}}),Af=(e,t)=>({type:Of.join,payload:{serverAddress:e,sessionId:t}}),Rf=(e,t)=>({type:Of.sendMessage,payload:{userId:e,message:t}}),jf=()=>({type:Of.leave,payload:{}}),zf=e=>({command:Nf.action,payload:e});var Ff;!function(e){e.set="MINIMAP_SET"}(Ff||(Ff={}));class Lf{constructor(e,t){this.sessionId=null,this.wsClosed=!1,this.dispatch=e,this.worker=new Worker(new URL(o.p+o.u(46),o.b)),this.worker.onmessage=e=>this.onWorkerMessage(e.data)}static create(e,t,n){let r=new Lf(e,t);return r.sendToWorker({func:"CREATE",payload:{serverAddress:t,serializableState:n}}),r}static join(e,t,n){let r=new Lf(e,t);return r.sendToWorker({func:"JOIN",payload:{serverAddress:t,sessionId:n}}),r}onWorkerMessage(e){switch(e.event){case"DISPATCH":return void this.dispatch(e.payload.action);case"SESSION_ID":return void(this.sessionId=e.payload.sessionId);case"CLOSE":case"ERROR":return this.dispatch({type:Of.ended,payload:{sessionId:this.sessionId}}),this.terminate(),null;default:return null}}changeName(e){null!==this.sessionId&&this.sendToWorker({func:"CHANGE_NAME",payload:{newName:e}})}terminate(){this.wsClosed=!0,this.sessionId=null,this.worker.terminate(),this.dispatch({type:Tf.left})}send(e){null!==this.sessionId&&this.sendToWorker({func:"SEND",payload:{message:e}})}sendToWorker(e){window.Worker&&this.worker.postMessage(e)}}let Df=null;const $f=e=>t=>n=>{const r=Bf(e,n);return t(r||n)},Bf=(e,t)=>{const r=e.dispatch;switch(t.type){case Of.create:return Gf(),Df&&Df.terminate(),Df=Lf.create(r,t.payload.serverAddress,t.payload.serializableState),null;case Of.join:return Gf(),Df&&Df.terminate(),Df=Lf.join(r,t.payload.serverAddress,t.payload.sessionId),null;case Of.leave:return Gf(),Df&&Df.terminate(),null;case Of.changeUserName:return Gf(),Df&&Df.changeName(t.payload.newName),null;case Cf.receiveMessage:return Hf(r,t.payload.message);case He.moveBy:case He.moveTo:return Df&&qf(Df,t.payload.entityId,e.getState,r),null;case Be.add:case kf.remove:case kf.add:case kf.remove_all:case Be.removeAllTargets:case Tf.add:case Tf.update:case Tf.remove:case Be.remove:return e.getState().session?(null==Df||Df.send(zf(t)),null):null;case Ff.set:case n.write:default:return null}},Hf=(e,t)=>{switch(t.command){case Nf.action:return t.payload;case Nf.joined:return Tu().then((()=>{var n,r,o,a;e((n=t.payload.state,{type:Be.setAll,payload:{components:n}})),e((r=t.payload.sessionId,o=t.payload.userId,a=t.payload.users,{type:Of.started,payload:{sessionId:r,userId:o,users:a}}))})),null;case Nf.userJoined:return e((o={id:t.payload.id,name:t.payload.name},{type:Of.addUser,payload:{user:o}})),null;case Nf.userChangedName:return e((n=t.payload.userId,r=t.payload.name,{type:Of.userNameChanged,payload:{userId:n,newName:r}})),null;case Nf.userLeft:return e((e=>({type:Of.removeUser,payload:{userId:e}}))(t.payload.userId)),null;case Nf.error:return wu.error({message:"警告",description:t.payload.msg}),null;default:return null}var n,r,o},Uf=(e,t,n)=>{var r;const o=t().world;for(const t of Vf.taintedEntityIds.values()){const n=null===(r=Lu(o,t,"transform"))||void 0===r?void 0:r.transform;if(n){let r=Sf(t,De(ye(),n));e.send(zf(r))}}},Wf=()=>({clearF:Uf,tainted:!1,updateTime:300,timer:null,taintedEntityIds:new Set});let Vf=Wf();const Gf=()=>{Vf.timer&&clearTimeout(Vf.timer),Vf=Wf()},qf=(e,t,n,r)=>{Vf.tainted||(Vf.tainted=!0,Vf.timer=setTimeout((()=>{Vf.clearF(e,n,r),Vf.tainted=!1}),Vf.updateTime)),Vf.taintedEntityIds.add(t)},Kf={world:(e,t)=>{if(void 0===e)return{nextId:0,components:Ou()};switch(t.type){case Tf.add:return pe(e,(e=>{_u(t.payload),e.components.dirData.set(t.payload.entityId,t.payload)}));case Tf.update:return pe(e,(e=>{let n=e.components.dirData.get(t.payload.entityId);ku(n),e.components.dirData.set(t.payload.entityId,n)}));case Tf.left:return pe(e,(e=>{for(let t of e.components.dirData.values())t.userIds=["0"],ku(t)}));case Tf.remove:return pe(e,(e=>{var n;let r=e.components.dirData.get(t.payload.entityId);0===(null===(n=t.payload.userIds)||void 0===n?void 0:n.length)?(Eu({entityId:t.payload.entityId}),e.components.dirData.delete(t.payload.entityId)):(r.userIds=t.payload.userIds,ku(r))}));case kf.add:return pe(e,(e=>{const n=e.nextId;e.nextId=e.nextId+1,e.components.transform.set(n,nt(t.payload.location));let r=(e=>({entityId:e.entityId,src:e.src}))({src:t.payload.src,entityId:n});e.components.icon.set(n,r)}));case kf.remove:return pe(e,(e=>{e.components.icon.delete(t.payload),e.components.transform.delete(t.payload)}));case kf.remove_all:return pe(e,(e=>{e.components.icon.forEach((t=>{e.components.transform.delete(t.entityId)})),e.components.icon.clear()}));case Be.add:return pe(e,(e=>{const n=t.payload.entityId;e.nextId=n+1;let r=pe(t,(e=>{e.type=Be.set,e.payload.entityId=n}));e.components=Nu(e.components,n,r)}));case Be.selectAdd:return pe(e,(e=>{e.components.entity.forEach((e=>{e.entityId===t.payload.entityId&&(e.selected=!0)}))}));case Be.selectRemove:return pe(e,(e=>{e.components.entity.forEach(((n,r)=>{Eu({entityId:t.payload.entityId}),n.entityId===t.payload.entityId&&(n.selected=!1,e.components.dirData.delete(n.entityId))}))}));case Be.set:return pe(e,(e=>{e.nextId=Math.max(t.payload.entityId+1,e.nextId),e.components=Nu(e.components,t.payload.entityId,t)}));case Be.setAll:return pe(e,(e=>{e.nextId=(e=>{let t=0;return Object.keys(e).forEach((n=>{t=Math.max(t,...e[n].map((e=>e[0])))})),t})(t.payload.components)+1,e.components=((e,t)=>(Object.keys(e).forEach((n=>{t[n].forEach((t=>{let[r,o]=t;e[n].set(r,o),"dirData"==n&&_u(o)}))})),e))(Ou(),t.payload.components)}));case Be.remove:return pe(e,(e=>{var n,r;Eu({entityId:t.payload.entityId}),e.components=(n=e.components,r=t.payload.entityId,pe(n,(e=>{Mu(n,r)}))),e.components.dirData.delete(t.payload.entityId)}));case Be.removeAllTargets:const n=Pu(e.components,(e=>"Target"===e.entityType));return pe(e,(e=>{Tu(),n.forEach((t=>{Mu(e.components,t)}))}));default:return pe(e,(e=>{e.components=Iu(e.components,t)}))}},userSettings:Oe,iconToolState:Ne,uiState:Pe,minimap:(e,t)=>void 0===e?{transform:Me(),texture:{transform:Me(),source:"1x1.jpg",size:ve(1,1,0),image:new Image},size:[1,1,0]}:t.type!==n.write||"mapId"!==t.payload.key?e:((e,t)=>{const n=hf[t],r=ve(Math.min(n.mapTextureCorner0.loc_x,n.mapTextureCorner1.loc_x),Math.min(n.mapTextureCorner0.loc_y,n.mapTextureCorner1.loc_y),0),o=ve(Math.max(n.mapTextureCorner0.loc_x,n.mapTextureCorner1.loc_x),Math.max(n.mapTextureCorner0.loc_y,n.mapTextureCorner1.loc_y),0),a=ve(n.mapTexture.size_x,n.mapTexture.size_y,1);let i=function(e){var t=new ge(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}(o);ke(i,i,r),Te(i,i,a),we(i,i,1);let l=Me();!function(e,t,n,r){var o,a,i,l,s,c,u,f,d,p,m,h,g,y,v,b,x,w,S,_,E,k,T,C,O=r[0],P=r[1],N=r[2],M=Math.hypot(O,P,N);M<1e-6||(O*=M=1/M,P*=M,N*=M,o=Math.sin(0),i=1-(a=Math.cos(0)),l=t[0],s=t[1],c=t[2],u=t[3],f=t[4],d=t[5],p=t[6],m=t[7],h=t[8],g=t[9],y=t[10],v=t[11],b=O*O*i+a,x=P*O*i+N*o,w=N*O*i-P*o,S=O*P*i-N*o,_=P*P*i+a,E=N*P*i+O*o,k=O*N*i+P*o,T=P*N*i-O*o,C=N*N*i+a,e[0]=l*b+f*x+h*w,e[1]=s*b+d*x+g*w,e[2]=c*b+p*x+y*w,e[3]=u*b+m*x+v*w,e[4]=l*S+f*_+h*E,e[5]=s*S+d*_+g*E,e[6]=c*S+p*_+y*E,e[7]=u*S+m*_+v*E,e[8]=l*k+f*T+h*C,e[9]=s*k+d*T+g*C,e[10]=c*k+p*T+y*C,e[11]=u*k+m*T+v*C,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]))}(l,l,0,ve(0,0,1)),Re(l,l,r);let s=Me();je(s,s,i);const c=Object.assign({},e.texture);return c.source=n.minimap_image_src,c.image.src=n.minimap_image_src,c.transform=s,{transform:l,texture:c,size:be(ye(),o,r)}})(e,t.payload.value),contourmap:(e,t)=>void 0===e?{transform:Me(),texture:{transform:Me(),source:"1x1.jpg",size:ve(1,1,0),image:new Image},size:[1,1,0]}:t.type!==n.write||"mapId"!==t.payload.key?e:((e,t)=>{const n=hf[t],r=ve(50,50,0),o=ve(n.landscape.loc_x,n.landscape.loc_y,0),a=ve(n.landscape.slice_x||0,n.landscape.slice_y||0,0),i=(n.landscape.rot_z||0)/180*Math.PI;let l=Me();Re(l,l,o),ze(l,l,i);let s=Me();je(s,s,r),Re(s,s,a);const c=Object.assign({},e.texture);return c.image.onload=()=>{},c.transform=s,{transform:l,texture:c,size:ve(n.landscape.resolution_x,n.landscape.resolution_y,0)}})(e,t.payload.value),camera:(e,t)=>{if(void 0===e)return{transform:Le(Me(),ve(.004,.004,1))};switch(t.type){case gf.move:let r=Ie(e.transform);return Re(r,r,t.payload),Object.assign(Object.assign({},e),{transform:r});case gf.changeZoom:return((e,t,n)=>{let r=Ie(e.transform);const o=t/$e(ye(),r)[0];let a=Ae(Me(),r),i=Ee(ye(),n,a);return Re(r,r,i),je(r,r,ve(o,o,1)),we(i,i,-1),Re(r,r,i),Object.assign(Object.assign({},e),{transform:r})})(e,t.payload.zoom,t.payload.location);case gf.setTransform:return Object.assign(Object.assign({},e),{transform:t.payload});case n.write:if("mapId"!==t.payload.key)return e;const o=hf[t.payload.value];return((e,t)=>{let n=(e=>{let t=De(ye(),e.transform);return xe(t,t,$e(ye(),e.transform)),we(t,t,-1),t})(e);return be(n,t,n),((e,t)=>{const n=we(ye(),t,-1),r=Ie(e.transform);return Re(r,r,n),Object.assign(Object.assign({},e),{transform:r})})(e,n)})(e,ve(Math.min(o.mapTextureCorner0.loc_x,o.mapTextureCorner1.loc_x),Math.min(o.mapTextureCorner0.loc_y,o.mapTextureCorner1.loc_y),0));default:return e}},counter:(e=0,t)=>"COUNTER_INCREMENT"===t.type?e+1:e,session:(e,t)=>{if(void 0===e)return null;switch(t.type){case Of.started:let r=new Map(t.payload.users.map((e=>[e.id,e])));return Cu(t.payload.userId),n=t.payload.sessionId,Gn.get(Su+"set_sessionId?sessionId="+n),{sessionId:t.payload.sessionId,userId:t.payload.userId,users:r};case Of.ended:return Cu("0"),null;case Of.addUser:return e?((e,t)=>pe(e,(e=>{e.users.set(t.id,t)})))(e,t.payload.user):e;case Of.userNameChanged:return e?((e,t,n)=>pe(e,(e=>{let r=e.users.get(t);r&&(r.name=n)})))(e,t.payload.userId,t.payload.newName):e;case Of.removeUser:return e?((e,t)=>pe(e,(e=>{e.users.delete(t)})))(e,t.payload.userId):e;case Of.leave:return null;default:return e}var n},heightmap:(e,t)=>void 0===e?{transform:Me(),texture:{transform:Me(),source:"1x1.jpg",size:ve(1,1,0),image:new Image},canvas:document.getElementById("hmCanvas"),size:[1,1,0]}:t.type!==n.write||"mapId"!==t.payload.key?e:((e,t)=>{const n=hf[t],r=ve(n.landscape.scale_x,n.landscape.scale_y,n.landscape.scale_z),o=ve(n.landscape.loc_x,n.landscape.loc_y,0),a=ve(n.landscape.slice_x||0,n.landscape.slice_y||0,0),i=(n.landscape.rot_z||0)/180*Math.PI;let l=Me();Re(l,l,o),ze(l,l,i);let s=Me();je(s,s,r),Re(s,s,a);const c=Object.assign({},e.texture);c.source=n.heightmap_image_src,c.image.onload=()=>{e.canvas.width=n.landscape.resolution_x,e.canvas.height=n.landscape.resolution_y,console.log("drawing hm: ",n.heightmap_image_src);const t=e.canvas.getContext("2d");null==t||t.drawImage(c.image,0,0),$u=null==t?void 0:t.getImageData(0,0,t.canvas.width,t.canvas.height)},c.image.src=n.heightmap_image_src,c.transform=s;const u=ve(n.landscape.resolution_x,n.landscape.resolution_y,0);return{transform:l,texture:c,size:u,canvas:e.canvas}})(e,t.payload.value),images:(e,t)=>e||(()=>{const e=new Map;return Ce.right.forEach((t=>{var n;let r=new Image;r.src=t.src,e.set(t.src,r),null===(n=t.list)||void 0===n||n.forEach((t=>{let n=new Image;n.src=t.src,e.set(t.src,n)}))})),e})()},Xf=(e,t)=>e.dispatch(t),Qf=f(Kf),Yf="USER_SETTINGS_LOCAL_STORAGE_KEY",Jf=(e,t)=>(r,o)=>(r({type:n.write,payload:{key:e,value:t}}),new Promise(((e,t)=>{(e=>{const t=JSON.stringify(e);window.localStorage.setItem(Yf,t)})(o().userSettings),e(null)}))),Zf=e=>(t,n)=>{n(),t({type:a.write,payload:{key:"mouseDown",value:e}})},ed=e=>({type:a.write,payload:{key:"dragEntityId",value:e}}),td=e=>({type:a.write,payload:{key:"dragStartPosition",value:e}}),nd=e=>(t,n)=>{const r=n().userSettings.contourmap;return t(Jf("mapId",e)).then((()=>{var t;return r?of.set_image_source((null===(t=hf[e])||void 0===t?void 0:t.contourmap_image_src)||""):null}))},rd=(e,t,n)=>({type:a.updateTouch,payload:{identifier:e,location:ve(t,n,0)}}),od="rgb(220, 10, 30)",ad="rgb(10, 220, 30)",id="rgb(30, 30, 30)",ld="rgb(255, 255, 255)",sd=(e,t,n,r)=>{const o=r.filter((e=>e.isActive));Du(r);r.forEach(((r,a)=>((e,r,a)=>{e.save();const i=Sd(n),l=$e(ye(),i)[0];Xe(e,r.transform),r.isActive&&(e.beginPath(),e.lineWidth=1*l,e.strokeStyle="#0f0",e.arc(0,0,5e3,0,2*Math.PI),e.stroke(),((e,t,n)=>{e.beginPath(),e.lineWidth=1*n,e.strokeStyle="#0f0","hellCannon"==t?e.arc(0,0,92400,0,2*Math.PI):"standardMortar"!=t&&"technicalMortar"!=t||e.arc(0,0,123096.963,0,2*Math.PI),e.stroke()})(e,t.weaponType,l),o.length>1&&(e.save(),Xe(e,Sd(n)),Xe(e,qe(10,.5,0)),Ed(e,(a+1).toString(),"middle",ad,id,t.fontSize,!0),e.restore())),Xe(e,i),e.beginPath(),e.lineWidth=3,e.strokeStyle="black",e.arc(0,0,5,0,2*Math.PI),e.stroke(),e.beginPath(),e.lineWidth=1,e.strokeStyle=r.isActive?"#0f0":"grey",e.arc(0,0,5,0,2*Math.PI),e.stroke(),e.restore()})(e,r,a)))},cd=(e,t,n,r)=>{e.lineWidth=1*n,e.strokeStyle="#00f",xd(e,t.weaponToTargetVec,t.horizontalSpread,t.closeSpread,t.closeSpread),r&&(e.strokeStyle="#f00",xd(e,t.weaponToTargetVec,t.horizontalSpread+Ku,t.closeSpread+Ku,t.closeSpread+Ku),xd(e,t.weaponToTargetVec,t.horizontalSpread+Xu,t.closeSpread+Xu,t.closeSpread+Xu))},ud=(e,t,n)=>{e.save(),Xe(e,n),Xe(e,Sd(t)),e.beginPath(),e.lineWidth=3,e.strokeStyle="black",e.arc(0,0,4,0,2*Math.PI),e.stroke(),e.beginPath(),e.lineWidth=1,e.strokeStyle="red",e.arc(0,0,4,0,2*Math.PI),e.stroke(),e.restore()},fd=(e,t,n,r,o,a)=>{const i=r.camera,l=r.userSettings,s=r.heightmap;"standardMortar"===l.weaponType||"technicalMortar"===l.weaponType?n.forEach((n=>{dd(e,i,l,s,t,n,o,a)})):"ub32"===l.weaponType?n.forEach((n=>function(e,t,n,r,o,a){const i=$e(ye(),Sd(t))[0];Du(o);const l=o.filter((e=>e.isActive)),s={};o.forEach(((e,t)=>{e.isActive&&(s[e.entityId]=t)})),l.forEach(((o,c)=>{const u=Ke(o.transform),f=Bu(r,u);u[2]=f+o.heightOverGround;const d=Ke(a.transform),p=Bu(r,d);d[2]=p;const m=((e,t)=>((e,t,n)=>{const r=t[2]-n[2],[o,a]=function(e,t){const n=t[0]-e[0],r=t[1]-e[1];return[Math.round(Math.hypot(n,r)),Math.round((180*Math.atan2(n,-r)/Math.PI+360)%360*100)/100]}(t,n),i=be(ye(),t,n),l=e.getAngle(o,r),s=e.getTime(o,r),c=l*Uu,u=c<800?0:c,f=Math.floor(10*u)/10,d=e.calcSpreadHorizontal(o,r);let p=e.calcSpreadVertical(o,r),m=p[0],h=p[1];return m=0!=m?m:o,Object.freeze({weaponTranslation:t,targetTranslation:n,weaponToTargetVec:i,startHeightOffset:r,angle:l,angleLow:0,dir:a,dist:o,time:s,timeLow:0,mil:c,milCapped:u,milRounded:f,horizontalSpread:d,closeSpread:m,farSpread:h})})(rf,e,t))(u,d),h=1.7*n.fontSize;e.save(),Xe(e,a.transform),n.targetSpread&&m.angle&&m.time&&(e.strokeStyle="#00f",e.lineWidth=1*i,xd(e,m.weaponToTargetVec,m.horizontalSpread,m.closeSpread,m.farSpread)),Xe(e,Sd(t)),Xe(e,qe(10,c*h,0));const g=m.angle*Uu,y=180*m.angle/Math.PI,v=g<800?0:g;Math.round(10*v),m.angle&&m.time?Ed(e,`${l.length>1?(s[o.entityId]+1).toString()+": ":""}${y.toFixed(1)}°  ${m.time.toFixed(1)}s`,"bottom",od,ld,n.fontSize,!0):Ed(e,"No firing solution","bottom",od,ld,2*n.fontSize/3,!0);const b=n.targetDistance?`${m.dir.toFixed(1)}° ${(m.dist*Hu).toFixed(0)}m`:`${m.dir.toFixed(1)}°`;Ed(e,b,"top",od,ld,2*n.fontSize/3,!0),e.restore(),ud(e,t,a.transform)}))}(e,i,l,s,t,n))):"hellCannon"===l.weaponType?n.forEach((n=>md(e,i,l,s,t,n))):"bm21"===l.weaponType&&n.forEach((n=>pd(e,i,l,s,t,n)))},dd=(e,t,n,r,o,a,i,l)=>{const s=$e(ye(),Sd(t))[0];Du(o);const c=o.filter((e=>e.isActive)),u={};o.forEach(((e,t)=>{e.isActive&&(u[e.entityId]=t)})),c.forEach(((o,f)=>{var d,p,m,h,g,y;const v=Ke(o.transform),b=Bu(r,v);v[2]=b+o.heightOverGround;const x=Ke(a.transform),w=Bu(r,x);x[2]=w;const S=mf(v,x).highArc,_=n.fontSize*(n.targetCompactMode?1:1.7);n.targetGrid&&((e,t,n,r)=>{e.save(),Xe(e,n);const o=Math.floor(r.dir),a=5*Math.floor(r.angle*Uu/5);e.strokeStyle="#0f0",e.lineWidth=1*t;const i=[-10,-5,0,5,10,15].map((e=>sf((a+e)/Uu,r.startHeightOffset,10989,980))),[l,s,c,u,f,d]=i;[-2,-1,0,1,2,3].forEach((t=>function(e,t,n,r,o,a){let i=a*Math.PI/180,[l,s]=[Math.sin(i),-Math.cos(i)];vd(e,0+l*r,0+s*r,0+l*o,0+s*o)}(e,0,0,l,d,o+t))),i.forEach((t=>function(e,t,n,r,o){if(r>=0){let t=Math.PI/180,n=(o-90)*Math.PI/180;e.beginPath(),e.arc(0,0,r,n-2*t,n+3*t),e.stroke()}}(e,0,0,t,o))),e.restore()})(e,s,o.transform,S),e.save(),Xe(e,a.transform),n.targetSpread?(null!==(m=null===(p=null===(d=i.get(a.entityId))||void 0===d?void 0:d.userIds)||void 0===p?void 0:p.includes(l))&&void 0!==m&&m?(e.strokeStyle="#ff004d",e.fillStyle="rgba(231, 76, 60,0.5)"):null!==(y=!(null===(g=null===(h=i.get(a.entityId))||void 0===h?void 0:h.userIds)||void 0===g?void 0:g.includes(l)))&&void 0!==y&&y&&(e.strokeStyle="#AAB7B8",e.fillStyle="rgba(131, 145, 146,0.5)"),((e,t,n,r,o)=>{e.lineWidth=1*n,o||(e.strokeStyle="#00f"),xd(e,t.weaponToTargetVec,t.horizontalSpread,t.closeSpread,t.closeSpread,o),r&&(e.strokeStyle="#f00",xd(e,t.weaponToTargetVec,t.horizontalSpread+Vu,t.closeSpread+Vu,t.closeSpread+Vu),xd(e,t.weaponToTargetVec,t.horizontalSpread+Gu,t.closeSpread+Gu,t.closeSpread+Gu))})(e,S,s,n.targetSplash,i.has(a.entityId))):n.targetSplash&&((e,t)=>{e.lineWidth=1*t,e.strokeStyle="#f00",e.beginPath(),e.arc(0,0,Vu,0,2*Math.PI),e.stroke(),e.beginPath(),e.arc(0,0,Gu,0,2*Math.PI),e.stroke()})(e,s),Xe(e,Sd(t));const E="technicalMortar"===n.weaponType?S.angle/Math.PI*180:S.angle*Uu;if(Xe(e,qe(10,f*_,0)),n.targetCompactMode){let t="-----";const r="technicalMortar"===n.weaponType?1:0;S.angle&&E>=1e3?t=E.toFixed(r).toString().substr(1,4+r):S.angle&&(t=E.toFixed(r).toString().substr(0,3+r)),c.length>1&&(t=(u[o.entityId]+1).toString()+": "+t),Ed(e,t,"middle",od,ld,n.fontSize,!0)}else{let t=S.angle?`${E.toFixed(1)}`:"-----";c.length>1&&(t=(u[o.entityId]+1).toString()+": "+t),Ed(e,t,"bottom",od,ld,n.fontSize,!0);const r=n.targetDistance?`${S.dir.toFixed(1)}° ${(S.dist*Hu).toFixed(0)}m`:`${S.dir.toFixed(1)}°`;Ed(e,r,"top",od,ld,2*n.fontSize/3,!0)}e.restore()})),ud(e,t,a.transform)},pd=(e,t,n,r,o,a)=>{const i=$e(ye(),Sd(t))[0];Du(o);const l=o.filter((e=>e.isActive)),s={};o.forEach(((e,t)=>{e.isActive&&(s[e.entityId]=t)})),l.forEach(((o,c)=>{const u=Ke(o.transform),f=Bu(r,u);u[2]=f+o.heightOverGround;const d=Ke(a.transform),p=Bu(r,d);d[2]=p;const{highArc:m,lowArc:h}=((e,t)=>pf(e,t,2e4,1960,Yu))(u,d),g=n.fontSize*(n.targetCompactMode?1:1.7);e.save(),Xe(e,a.transform),n.targetSpread&&h.angle&&h.time&&(e.lineWidth=1*i,e.strokeStyle="#00f",xd(e,h.weaponToTargetVec,h.horizontalSpread,h.closeSpread,h.farSpread)),Xe(e,Sd(t));const y=m.angle/Math.PI*180,v=h.angle/Math.PI*180;if(Xe(e,qe(10,c*g,0)),n.targetCompactMode){let t="-----";const r=1;h.angle&&y>=1e3?t=v.toFixed(r).toString().substr(1,4+r):h.angle&&(t=v.toFixed(r).toString().substr(0,3+r)),l.length>1&&(t=(s[o.entityId]+1).toString()+": "+t),Ed(e,t,"middle",od,ld,n.fontSize,!0)}else{let t=m.angle?`${y.toFixed(1)} | ${v.toFixed(1)}`:"-----";l.length>1&&(t=(s[o.entityId]+1).toString()+": "+t),Ed(e,t,"bottom",od,ld,n.fontSize,!0);const r=[`${m.dir.toFixed(1)}°`,`${m.time?m.time.toFixed(1):"-"}s | ${h.time?h.time.toFixed(1):"-"}s`,n.targetDistance?`${(m.dist*Hu).toFixed(0)}m`:""].join(" ");Ed(e,r,"top",od,ld,2*n.fontSize/3,!0)}e.restore()})),ud(e,t,a.transform)},md=(e,t,n,r,o,a)=>{const i=$e(ye(),Sd(t))[0];Du(o);const l=o.filter((e=>e.isActive)),s={};o.forEach(((e,t)=>{e.isActive&&(s[e.entityId]=t)})),l.forEach(((o,c)=>{const u=Ke(o.transform),f=Bu(r,u);u[2]=f+o.heightOverGround;const d=Ke(a.transform),p=Bu(r,d);d[2]=p;const{highArc:m,lowArc:h}=((e,t)=>pf(e,t,9500,980,qu))(u,d),g=n.fontSize*(n.targetCompactMode?1:1.7);n.targetGrid,e.save(),Xe(e,a.transform),n.targetSpread?(cd(e,m,i,n.targetSplash),cd(e,h,i,n.targetSplash)):n.targetSplash&&((e,t)=>{e.lineWidth=1*t,e.strokeStyle="#f00",e.beginPath(),e.arc(0,0,Ku,0,2*Math.PI),e.stroke(),e.beginPath(),e.arc(0,0,Xu,0,2*Math.PI),e.stroke()})(e,i),Xe(e,Sd(t));const y=m.angle/Math.PI*180,v=h.angle/Math.PI*180;if(Xe(e,qe(10,c*g,0)),n.targetCompactMode){let t="-----";const r=1;m.angle&&y>=1e3?t=y.toFixed(r).toString().substr(1,4+r):m.angle&&(t=y.toFixed(r).toString().substr(0,3+r)),l.length>1&&(t=(s[o.entityId]+1).toString()+": "+t),Ed(e,t,"middle",od,ld,n.fontSize,!0)}else{let t=m.angle?`${y.toFixed(1)} | ${v.toFixed(1)}`:"-----";l.length>1&&(t=(s[o.entityId]+1).toString()+": "+t),Ed(e,t,"bottom",od,ld,n.fontSize,!0);const r=[`${m.dir.toFixed(1)}°`,`${m.time?m.time.toFixed(1):"-"}s | ${h.time?h.time.toFixed(1):"-"}s`,n.targetDistance?`${(m.dist*Hu).toFixed(0)}m`:""].join(" ");Ed(e,r,"top",od,ld,2*n.fontSize/3,!0)}e.restore()})),ud(e,t,a.transform)},hd=.006,gd=(e,t,n,r,o)=>{if(null===n)return;const a=tt(t,n);if(-1!==a[0]&&-1!==a[1]){const n=3e4*a[0],i=3e4*a[1];e.save(),Xe(e,t.transform),e.beginPath(),e.lineTo(n+3e4,i),e.lineTo(n+3e4,i+3e4),e.lineTo(n,i+3e4),e.lineTo(n,i),e.closePath(),e.lineWidth=3,e.strokeStyle=r,e.resetTransform(),e.stroke(),e.restore(),e.save(),Xe(e,t.transform),Xe(e,qe(n,i,0)),Xe(e,Sd(o)),Ed(e,`${String.fromCharCode(65+a[0])}${1+a[1]}`,"bottom",r,id,24,!0),e.restore();const l=vf(o),s=(e,t)=>7+e-3*t,c=!1;if(l>hd)for(let u=0;u<=2;u++)for(let f=0;f<=2;f++)if(s(u,f)!==a[2]&&(c||l>hd))e.save(),Xe(e,t.transform),Xe(e,qe(n+5e3+1e4*u,i+5e3+1e4*f,0)),Xe(e,Sd(o)),Xe(e,qe(-5,2,0)),Ed(e,`${s(u,f)}`,"middle",r,id,22,!0),e.restore();else if(l>.012)for(let l=0;l<=2;l++)for(let c=0;c<=2;c++)s(l,c)!==a[3]&&(e.save(),Xe(e,t.transform),Xe(e,qe(n+1e4*u,i+1e4*f,0)),Xe(e,qe(1e4/6+1e4*l/3,1e4/6+1e4*c/3,0)),Xe(e,Sd(o)),Xe(e,qe(-3,1,0)),Ed(e,`${s(l,c)}`,"middle",r,id,16,!0),e.restore())}},yd=(e,t,n,r,o,a)=>{if(null===n)return;const i=Ze(t,n);e.save(),Xe(e,qe(n[0],n[1],n[2])),Xe(e,Sd(o)),Xe(e,qe(-1.6*a,-1*a,0)),Ed(e,et(i),"bottom",r,id,a,!0),e.restore()},vd=(e,t,n,r,o)=>{e.beginPath(),e.moveTo(t,n),e.lineTo(r,o),e.stroke()},bd=(e,t,n,r,o)=>{e.save(),e.beginPath(),e.moveTo(Math.round(t)+.5,Math.round(n)+.5),e.lineTo(Math.round(r)+.5,Math.round(o)+.5),e.resetTransform(),e.stroke(),e.restore()};function xd(e,t,n,r,o,a=!1){let i=t[0],l=t[1],s=Math.atan2(l,i)+Math.PI/2;e.save(),e.beginPath(),e.ellipse(0,0,n,o,s,Math.PI,2*Math.PI),e.ellipse(0,0,n,r,s,0,Math.PI),e.stroke(),a&&e.fill(),e.restore()}const wd=(e,t,n,r)=>{e.save(),Xe(e,t.transform),((e,t,n)=>{n.image.complete&&0!==n.image.naturalWidth&&(e.save(),Xe(e,n.transform),e.drawImage(n.image,0,0),e.restore())})(e,t.transform,t.texture),r.mapGrid&&function(e,t,n){const r=n[0],o=n[1],a=(n,r,o,a,i)=>{for(let l=1;0+1e4*l/3<r;l++)l%9==0?(e.strokeStyle="black",e.lineWidth=t>hd?2:1,i(e,n+1e4*l/3,o,n+1e4*l/3,a)):t>hd&&l%3==0?(e.strokeStyle="black",e.lineWidth=1,i(e,n+1e4*l/3,o,n+1e4*l/3,a)):t>.012&&(e.strokeStyle="#bbb",e.lineWidth=1,i(e,n+1e4*l/3,o,n+1e4*l/3,a))};a(0,r,0,o,bd),a(0,o,0,r,((e,t,n,r,o)=>bd(e,n,t,o,r)))}(e,n,t.size),e.restore()},Sd=e=>{let t=$e(ye(),e.transform);return t=_e(t,t),Le(Me(),t)},_d=e=>{var t,n;const r=e.getState();if(Zu&&Zu.getContext("2d")){const e=function(e){const t=window.devicePixelRatio||1;let n=e.getContext("2d");const r=e.getBoundingClientRect();return e.width=r.width*t,e.height=r.height*t,n.scale(t,t),e.style.width="100%",e.style.height="100%",n}(Zu),o=vf(r.camera),a=zu(r.world,"Target"),i=zu(r.world,"Weapon"),l=Array.from(r.world.components.icon.values()).map((e=>Object.assign(Object.assign({},e),{transform:r.world.components.transform.get(e.entityId)}))),s=r.world.components.dirData;e.save(),(e=>{const t=e.canvas;e.fillStyle="#050505",e.fillRect(0,0,t.width,t.height)})(e),Xe(e,r.camera.transform),wd(e,r.minimap,o,r.userSettings),((e,t,n)=>{of.is_ready()&&(e.save(),Xe(e,t.transform),Xe(e,of.transform),Xe(e,t.texture.transform),e.drawImage(of.get_canvas(),0,0),e.restore())})(e,r.contourmap,r.userSettings),sd(e,r.userSettings,r.camera,i),fd(e,i,a,r,s,null!==(n=null===(t=r.session)||void 0===t?void 0:t.userId)&&void 0!==n?n:"0"),((e,t,n,r,o,a)=>{if(r.mouseDown&&-1!==r.dragEntityId&&null!==r.dragEntityId){const i=Lu(o,r.dragEntityId,"entity");if("Weapon"===(null==i?void 0:i.entityType)||"Target"===(null==i?void 0:i.entityType)){let l=Lu(o,r.dragEntityId,"transform");if(l){let r=De(ye(),l.transform);"Weapon"===(null==i?void 0:i.entityType)?(n.weaponPlacementHelper&&gd(e,a,r,ad,t),n.weaponPlacementLabel&&yd(e,a,r,ad,t,n.fontSize)):"Target"===(null==i?void 0:i.entityType)&&(n.targetPlacementHelper&&gd(e,a,r,od,t),n.targetPlacementLabel&&yd(e,a,r,od,t,n.fontSize))}}}})(e,r.camera,r.userSettings,r.uiState,r.world,r.minimap),((e,t,n,r)=>{n.forEach((n=>{let o=r.get(n.src);function a(){e.save(),Xe(e,n.transform.transform),Xe(e,Sd(t));let r=$e(ye(),of.transform),a=_e(r,r),i=Le(Me(),a);i[0]=Math.min(i[0],.65),i[5]=Math.min(i[5],.65),i[0]=Math.max(i[0],.3),i[5]=Math.max(i[5],.3),Xe(e,i),e.translate(-o.width/2*i[0],-o.height/2*i[0]),e.drawImage(o,0,0),e.restore()}(null==o?void 0:o.complete)?a():null==o||(o.onload=a)}))})(e,r.camera,l,r.images),e.restore()}},Ed=(e,t,n,r,o,a,i)=>{e.save(),e.font=`${i?"bold":""} ${a}px sans-serif`,e.lineWidth=3,e.lineJoin="miter",e.miterLimit=2,e.fillStyle=r,e.strokeStyle=o,e.textBaseline=n,e.strokeText(t,0,0),e.fillText(t,0,0),e.restore()},kd=(e,t)=>{const n=e.getState(),r=n.uiState.dragStartPosition,o=Ye(n.camera,Qe(t)),a=n.uiState.dragEntityId,i=ke(ye(),o,r);var l;-1===a?Xf(e,(l=i,{type:gf.move,payload:l})):null!=a&&(Xf(e,td(o)),Xf(e,Sf(a,o)))},Td=(e,t,n,r)=>{e.getState().camera;const o=Math.max(.002,Math.min(.08,r));of.set_zoom(o),Xf(e,((e,t)=>({type:gf.changeZoom,payload:{location:e,zoom:t}}))(Qe({target:t,clientX:n[0],clientY:n[1]}),o))},Cd=e=>t=>{const n=e.getState(),r=n.uiState.dragEntityId;n.world.components.entity.forEach((t=>{if(t.entityId===r&&t.selected){let r=zu(n.world,"Target").filter((e=>e.entityId===t.entityId))[0];Xf(e,(o={entityId:r.entityId},{type:Tf.update,payload:o}))}var o})),Xf(e,Zf(!1))},Od=e=>t=>{const n=e.getState(),r=Ye(n.camera,Qe(t)),o=Je(n.camera,ve(25,0,0))[0],a=Ru(n.world,r,o);return a.length>0?a[0].entityId:-1},Pd=e=>t=>{const n=Array(t.changedTouches.length).fill(0).map(((e,t)=>e+t));n.forEach((n=>{return e.dispatch((r=t.changedTouches[n].identifier,{type:a.removeTouch,payload:{identifier:r}}));var r}))},Nd=class{constructor(e,t={},n){this.websocket=null,this.status="disconnected",this.messageListeners=[],this.connect=()=>{"connected"!==this.status&&"connecting"!==this.status&&(this.setStatus("connecting"),this.websocket=new WebSocket(this.url),this.websocket.onopen=()=>{this.setStatus("connected"),console.log("WebSocket connected")},this.websocket.onmessage=e=>{let t=JSON.parse(e.data);if("compute"===t.command){const e=this.store.getState();let n=zu(e.world,"Target").filter((e=>e.entityId===parseInt(t.payload)))[0],{solution:r,angleValue:o}=((e,t)=>{const n=e.userSettings,r=zu(e.world,"Weapon").filter((e=>e.isActive))[0],o=Ke(r.transform),a=Bu(e.heightmap,o);o[2]=a+r.heightOverGround;const i=Ke(t.transform),l=Bu(e.heightmap,i);i[2]=l;const s=mf(o,i).highArc;return{solution:s,angleValue:"technicalMortar"===n.weaponType?s.angle/Math.PI*180:s.angle*Uu}})(e,n);this.sendMessage(JSON.stringify({command:"SET",payload:{entityId:n.entityId,dir:r.dir,angle:o>>0}}))}else"ERROR"===t.command&&(wu.error({message:"警告",description:t.payload}),this.options.autoReconnect=!1)},this.websocket.onclose=()=>{console.log("WebSocket disconnected"),this.options.autoReconnect?(this.setStatus("reconnecting"),setTimeout(this.connect,this.options.reconnectInterval||5e3)):this.setStatus("disconnected")},this.websocket.onerror=e=>{var t;console.error("WebSocket error",e),null===(t=this.websocket)||void 0===t||t.close()})},this.disconnect=()=>{this.websocket&&this.websocket.close()},this.sendMessage=e=>{"connected"===this.status&&this.websocket&&this.websocket.send(e)},this.addMessageListener=e=>{this.messageListeners.push(e)},this.removeMessageListener=e=>{this.messageListeners=this.messageListeners.filter((t=>t!==e))},this.setStatus=e=>{this.status=e},this.notifyMessageListeners=e=>{this.messageListeners.forEach((t=>t(e)))},this.url=e,this.options=t,this.store=n}};var Md=qn.createContext(null),Id=function(e){e()},Ad=function(){return Id},Rd={notify:function(){}},jd=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=Rd,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=Ad(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=Rd)},e}();const zd=function(e){var t=e.store,n=e.context,r=e.children,o=(0,qn.useMemo)((function(){var e=new jd(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),a=(0,qn.useMemo)((function(){return t.getState()}),[t]);(0,qn.useEffect)((function(){var e=o.subscription;return e.trySubscribe(),a!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[o,a]);var i=n||Md;return qn.createElement(i.Provider,{value:o},r)};var Fd=o(4146),Ld=o.n(Fd),Dd=o(4363),$d="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?qn.useLayoutEffect:qn.useEffect,Bd=[],Hd=[null,null];function Ud(e,t){var n=e[1];return[t.payload,n+1]}function Wd(e,t,n){$d((function(){return e.apply(void 0,t)}),n)}function Vd(e,t,n,r,o,a,i){e.current=r,t.current=o,n.current=!1,a.current&&(a.current=null,i())}function Gd(e,t,n,r,o,a,i,l,s,c){if(e){var u=!1,f=null,d=function(){if(!u){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===a.current?i.current||s():(a.current=e,l.current=e,i.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=d,n.trySubscribe(),d(),function(){if(u=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var qd=function(){return[null,0]};function Kd(e,t){void 0===t&&(t={});var n=t,r=n.getDisplayName,o=void 0===r?function(e){return"ConnectAdvanced("+e+")"}:r,a=n.methodName,i=void 0===a?"connectAdvanced":a,l=n.renderCountProp,s=void 0===l?void 0:l,c=n.shouldHandleStateChanges,u=void 0===c||c,f=n.storeKey,d=void 0===f?"store":f,p=(n.withRef,n.forwardRef),m=void 0!==p&&p,h=n.context,g=void 0===h?Md:h,y=sl(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),v=g;return function(t){var n=t.displayName||t.name||"Component",r=o(n),a=Io({},y,{getDisplayName:o,methodName:i,renderCountProp:s,shouldHandleStateChanges:u,storeKey:d,displayName:r,wrappedComponentName:n,WrappedComponent:t}),l=y.pure,c=l?qn.useMemo:function(e){return e()};function f(n){var r=(0,qn.useMemo)((function(){var e=n.reactReduxForwardedRef,t=sl(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),o=r[0],i=r[1],l=r[2],s=(0,qn.useMemo)((function(){return o&&o.Consumer&&(0,Dd.isContextConsumer)(qn.createElement(o.Consumer,null))?o:v}),[o,v]),f=(0,qn.useContext)(s),d=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(f)&&Boolean(f.store);var p=d?n.store:f.store,m=(0,qn.useMemo)((function(){return function(t){return e(t.dispatch,a)}(p)}),[p]),h=(0,qn.useMemo)((function(){if(!u)return Hd;var e=new jd(p,d?null:f.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[p,d,f]),g=h[0],y=h[1],b=(0,qn.useMemo)((function(){return d?f:Io({},f,{subscription:g})}),[d,f,g]),x=(0,qn.useReducer)(Ud,Bd,qd),w=x[0][0],S=x[1];if(w&&w.error)throw w.error;var _=(0,qn.useRef)(),E=(0,qn.useRef)(l),k=(0,qn.useRef)(),T=(0,qn.useRef)(!1),C=c((function(){return k.current&&l===E.current?k.current:m(p.getState(),l)}),[p,w,l]);Wd(Vd,[E,_,T,l,C,k,y]),Wd(Gd,[u,p,g,m,E,_,T,k,y,S],[p,g,m]);var O=(0,qn.useMemo)((function(){return qn.createElement(t,Io({},C,{ref:i}))}),[i,t,C]);return(0,qn.useMemo)((function(){return u?qn.createElement(s.Provider,{value:b},O):O}),[s,O,b])}var p=l?qn.memo(f):f;if(p.WrappedComponent=t,p.displayName=r,m){var h=qn.forwardRef((function(e,t){return qn.createElement(p,Io({},e,{reactReduxForwardedRef:t}))}));return h.displayName=r,h.WrappedComponent=t,Ld()(h,t)}return Ld()(p,t)}}function Xd(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function Qd(e,t){if(Xd(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!Xd(e[n[o]],t[n[o]]))return!1;return!0}function Yd(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function Jd(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function Zd(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=Jd(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=Jd(o),o=r(t,n)),o},r}}const ep=[function(e){return"function"==typeof e?Zd(e):void 0},function(e){return e?void 0:Yd((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?Yd((function(t){return function(e,t){if("function"==typeof e)return d(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=d(o,t))}return n}(e,t)})):void 0}],tp=[function(e){return"function"==typeof e?Zd(e):void 0},function(e){return e?void 0:Yd((function(){return{}}))}];function np(e,t,n){return Io({},n,{},e,{},t)}const rp=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,l){var s=e(t,n,l);return i?o&&a(s,r)||(r=s):(i=!0,r=s),r}}}(e):void 0},function(e){return e?void 0:function(){return np}}];function op(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function ap(e,t,n,r,o){var a,i,l,s,c,u=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;return function(o,m){return p?function(o,p){var m,h,g=!f(p,i),y=!u(o,a);return a=o,i=p,g&&y?(l=e(a,i),t.dependsOnOwnProps&&(s=t(r,i)),c=n(l,s,i)):g?(e.dependsOnOwnProps&&(l=e(a,i)),t.dependsOnOwnProps&&(s=t(r,i)),c=n(l,s,i)):y?(m=e(a,i),h=!d(m,l),l=m,h&&(c=n(l,s,i)),c):c}(o,m):(l=e(a=o,i=m),s=t(r,i),c=n(l,s,i),p=!0,c)}}function ip(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=sl(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),l=r(e,a),s=o(e,a);return(a.pure?ap:op)(i,l,s,e,a)}function lp(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function sp(e,t){return e===t}function cp(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?Kd:n,o=t.mapStateToPropsFactories,a=void 0===o?tp:o,i=t.mapDispatchToPropsFactories,l=void 0===i?ep:i,s=t.mergePropsFactories,c=void 0===s?rp:s,u=t.selectorFactory,f=void 0===u?ip:u;return function(e,t,n,o){void 0===o&&(o={});var i=o,s=i.pure,u=void 0===s||s,d=i.areStatesEqual,p=void 0===d?sp:d,m=i.areOwnPropsEqual,h=void 0===m?Qd:m,g=i.areStatePropsEqual,y=void 0===g?Qd:g,v=i.areMergedPropsEqual,b=void 0===v?Qd:v,x=sl(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),w=lp(e,a,"mapStateToProps"),S=lp(t,l,"mapDispatchToProps"),_=lp(n,c,"mergeProps");return r(f,Io({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:S,initMergeProps:_,pure:u,areStatesEqual:p,areOwnPropsEqual:h,areStatePropsEqual:y,areMergedPropsEqual:b},x))}}const up=cp();var fp;fp=tr.unstable_batchedUpdates,Id=fp;const dp=qn.createElement,pp=(e,t)=>dp("div",e,t),mp=(e,t)=>void 0!==e?e:t,hp=e=>e.value?dp("button",{title:mp(e.tooltip,""),className:"toggleButton "+mp(e.classNameTrue,e.className),style:e.styleTrue,onClick:()=>e.onChange({target:{value:!e.value}})},mp(e.label,e.labelFalse)):dp("button",{title:mp(e.tooltip,""),className:"toggleButton "+mp(e.classNameFalse,e.className),style:e.styleFalse,onClick:()=>e.onChange({target:{value:!e.value}})},mp(e.label,e.labelFalse)),gp=e=>e.value?pp({className:""+mp(e.classNameTrue,e.className),style:mp(e.styleTrue,e.style),onClick:()=>e.onChange({target:{value:!e.value}})},mp(e.label,e.labelFalse)):pp({className:""+mp(e.classNameFalse,e.className),style:mp(e.styleFalse,e.style),onClick:()=>e.onChange({target:{value:!e.value}})},mp(e.label,e.labelFalse)),yp=qn.createElement,vp=(e,t)=>yp("div",e,t),bp=(e,t)=>void 0!==e?e:t;class xp extends qn.Component{constructor(e){super(e),this.state={isOpen:!1}}setOpen(e){this.setState({isOpen:e})}render(){var e;const t=(e,t,n)=>vp({key:n,className:"dropdownChild "+bp(this.props.className,""),onClick:()=>{this.setOpen(!this.state.isOpen),this.props.onChange(t)}},e),n=vp({className:"dropdownChildren"},this.props.options.map(((e,n)=>t(e.elem,e.value,n)))),r=vp({key:-1,className:"dropdownSelected",onClick:()=>this.setOpen(!this.state.isOpen)},null===(e=this.props.options.find((e=>e.value===this.props.value)))||void 0===e?void 0:e.elem);return yp("div",{className:"dropdown",onBlur:()=>this.setOpen(!1),tabIndex:0},[r,this.state.isOpen?n:void 0])}}const wp=qn.createElement,Sp=(e,t)=>wp("div",e,t),_p=e=>e.trim(),Ep=_p,kp=e=>{const[t,n]=(0,qn.useState)(""),[r,o]=(0,qn.useState)("ws://110.40.183.13:1234"),[a,i]=(0,qn.useState)(!1);return wp(qn.Fragment,{},[Sp({className:"flexRow",style:{width:"100%"}},[Sp({style:{paddingTop:"3px"}},["Server(beta)"]),Sp({className:"v10"},[]),Sp({className:"divButton",title:"reset server to default",onClick:()=>o("ws://110.40.183.13:1234")},"R")]),Sp({className:"v2"}),Sp({className:"flexRow",style:{justifyContent:"space-between"}},[Sp({className:"flexItem",style:{height:"22px",width:"100%"}},wp("textarea",{className:"sessionTextInput",value:r,onChange:e=>o(_p(e.target.value))}))]),Sp({className:"v2"}),Sp({className:"flexRow",style:{}},[Sp({style:{paddingTop:"3px"}},["Session"])]),e.sessionId?wp(qn.Fragment,{},[Sp({className:"v2"}),Sp({className:"flexRow",style:{}},[wp("div",{className:"flexItemFill"},e.sessionId)])]):null,Sp({className:"v2"}),Sp({className:"flexRow"},[]),Sp({className:"v2"}),Sp({className:"flexRow",style:{justifyContent:"space-between",width:"100%"}},[Sp({className:"flexItem",style:{height:"22px",width:"100%"}},wp("textarea",{className:"sessionTextInput",value:t,onChange:e=>n(Ep(e.target.value))}))]),Sp({className:"v2"}),Sp({className:"flexRow",style:{justifyContent:"space-between"}},[wp("div",{className:"flexItem divButton",style:{width:"100%"},onClick:()=>e.newSession(r,e.world)},"Create"),Sp({className:"h2"}),wp("div",{className:"flexItemFill divButton ",onClick:()=>e.join(r,t)},"Join"),Sp({className:"h2"}),wp("div",{className:"flexItemFill divButton",onClick:()=>e.leave()},"Leave")]),e.sessionId?wp(qn.Fragment,{},[Sp({className:"v2"}),Sp({className:"flexRow",style:{}},"Users"),Tp(Object.assign({editingUserName:a,setEditingUserName:i},e))]):null])},Tp=e=>{var t;return Sp({className:"flexRow",style:{overflowX:"hidden",maxHeight:"100px"}},[Sp({className:"flexColumn",style:{width:"100%"}},null===(t=e.users)||void 0===t?void 0:t.map((t=>t.id===e.userId?Cp(Sp({className:"flexRow green bold",style:{cursor:"pointer"}},"> "+t.name),e.editingUserName,e.setEditingUserName,e.changeUserName):Sp({className:"flexRow green"},"| "+t.name))))])},Cp=(e,t,n,r)=>t?wp("textarea",{className:"sessionTextInput",style:{height:"22px",width:"100%"},onKeyDown:e=>{"Enter"===e.key&&e.target===document.activeElement&&(n(!1),r(e.target.value))},onBlur:()=>{n(!1)}}):Sp({onClick:()=>n(!0)},[e]),Op=(up((e=>{var t,n;return{userSettings:e.userSettings,sessionId:null===(t=e.session)||void 0===t?void 0:t.sessionId,users:null===(n=e.session)||void 0===n?void 0:n.users.values(),world:e.world}}),(e=>({newSession:(t,n)=>e(If(t,n)),join:(t,n)=>e(Af(t,n)),leave:()=>e(jf()),sendMessage:(t,n)=>e(Rf(t,n))})))((e=>wp("div",{className:"rightPanel flexItem"},[kp(e)]))),qn.createElement),Pp=(e,t)=>Op("div",e,t),Np=[["albasrah","Al Basrah","options/albasrah_option.png"],["anvil","Anvil","options/anvil_option.png"],["belaya","Belaya","options/belaya_option.png"],["blackcoast","Black Coast","options/blackcoast_option.png"],["chora","Chora","options/chora_option.png"],["fallujah","Fallujah City","options/fallujah_option.png"],["foolsroad","Fool's Road","options/foolsroad_option.png"],["goosebay","Goosebay","options/goosebay_option.png"],["gorodok","Gorodok","options/gorodok_option.png"],["harju","Harju","options/harju_option.png"],["jensensrange","Jensen's Range","options/jensensrange_option.png"],["kamdesh","Kamdesh","options/kamdesh_option.png"],["kohat","Kohat Toi","options/kohat_option.png"],["kokan","Kokan","options/kokan_option.png"],["logar","Logar Valley","options/logar_option.png"],["lashkar","Lashkar Valley","options/lashkar_option.png"],["manicouagan","Manicouagan","options/manic_option.png"],["mestia","Mestia","options/mestia_option.png"],["mutaha","Mutaha","options/mutaha_option.png"],["narva","Narva","options/narva_option.png"],["skorpo","Skorpo (Town)","options/skorpo_option.png"],["skorpoFull","Skorpo","options/skorpo_option.png"],["sumari","Sumari","options/sumari_option.png"],["tallil","Tallil Outskirts","options/tallil_option.png"],["yehorivka","Yehorivka","options/yehorivka_option.png"],["yehorivka_skirmish_v1","Yehorivka (Sk_v1)","options/yehorivka_option.png"],["sanxianislands","SanxianIslands","options/sanxianislands_option.png"]],Mp=[["standardMortar","Standard mortar","options/mortarRound10.png"],["technicalMortar","Technical mortar","options/mortarRound10.png"],["ub32","UB32/S5 rockets","options/s5rocket2.png"],["hellCannon","Hell Cannon","options/mortarRound10.png"],["bm21","BM-21 Grad","options/s5rocket2.png"]],Ip=(e,t)=>Pp({className:"flexRow mapOption"},[Pp({className:"mapOptionImage",style:{backgroundImage:`url(${t})`}}),Pp({className:"mapOptionLabel"},e)]),Ap=e=>[Pp({className:"flexColumn"},[Pp({className:"flexRow"},[Op(xp,{className:"flexItem fill",value:e.userSettings.mapId,onChange:e.onChangeMap,options:Np.map((e=>({value:e[0],elem:Ip(e[1],e[2])})))})]),Pp({className:"v2"},[]),Pp({className:"flexRow"},[hp({value:e.userSettings.mapGrid,onChange:e.onChangeMapGrid,label:"#",classNameTrue:"toggleButton black",classNameFalse:"toggleButton",styleFalse:{color:"grey"},tooltip:"Show map grid"})]),Pp({className:"flexRow"},[Pp({className:"separator"})]),...Rp(e),Pp({className:"flexRow"},[Pp({className:"separator"})]),...zp(e),Pp({className:"v2"},[]),Pp({className:"flexRow"},[Pp({className:"separator"})]),...Fp(e),Pp({className:"flexRow"},[Pp({className:"separator"})]),kp(e),Pp({className:"flexRow"},[Pp({className:"separator"})]),Pp({className:"flexRow hint"},["Check tooltips or the ReadMe on",Pp({className:"h5"},[]),Op("a",{className:"link",href:"https://gitlab.com/squadstrat/squadmortar"},["gitlab"])]),Pp({className:"v2"},[])])],Rp=e=>[Pp({className:"flexRow"},[Op(xp,{className:"flexItemFill",value:e.userSettings.weaponType,onChange:e.onChangeWeapon,options:Mp.map((e=>{return{value:e[0],elem:(t=e[1],n=e[2],Pp({className:"flexRow mapOption",key:t},[Pp({className:"weaponOptionImage",style:{backgroundImage:`url(${n})`}}),Pp({className:"weaponOptionLabel"},t)]))};var t,n}))})]),Pp({className:"v2"},[]),Pp({className:"flexRow"},[hp({value:e.userSettings.weaponPlacementHelper,onChange:e.onChangeWeaponPlacementHelper,tooltip:"Show keypads while moving weapon",label:"#?",className:"",classNameTrue:" green",styleFalse:{color:"grey"}}),Pp({className:"h2"},[]),hp({value:e.userSettings.weaponPlacementLabel,onChange:e.onChangeWeaponPlacementLabel,tooltip:"Show keypad label while moving weapon",label:"A1",className:"",classNameTrue:" green",styleFalse:{color:"grey"}})]),jp(e)],jp=e=>{let t=zu(e.world,"Weapon");return Du(t),Pp({className:"flexRow"},[Op("table",{className:"weaponTable"},[Op("colgroup",{},[Op("col",{className:"indexCol"}),Op("col",{className:"locationCol"}),Op("col",{className:""}),Op("col",{className:""}),Op("col",{className:""})]),Op("thead",{},[Op("tr",{},[Op("th",{},[""]),Op("th",{},[""]),Op("th",{},[""]),Op("th",{},[""]),Op("th",{},[""])])]),Op("tbody",{},[...t.map(((t,n)=>Op("tr",{key:n},[Op("td",{className:"indexCell"},[(n+1).toString()]),Op("td",{},[et(Ze(e.minimap,De(ye(),t.transform)))]),Op("td",{},[Op("input",{type:"number",className:"textInput numberInput",value:Math.floor(t.heightOverGround/100),onChange:e.onChangeWeaponHeightOverGround(t.entityId),title:"weapon height over ground (tall buildings, bridges, ...)"})]),Op("td",{},[Pp({className:"divButton ",title:"activate only this weapon",onClick:()=>e.pickActiveWeapon(t.entityId)},"^")]),Op("td",{},[hp({value:t.isActive,onChange:()=>e.setWeaponActive(t.entityId,!t.isActive),tooltip:"activate/deactivate this weapon",label:"o",className:"",classNameTrue:" green",styleFalse:{color:"grey"}})])])))])])])},zp=e=>[Pp({className:"flexRow"},[hp({value:e.userSettings.targetGrid,onChange:e.onChangeTargetGrid,tooltip:"Targeting grid: 5mil elevation arcs, 1° bearing lines",label:"#",className:"",classNameTrue:" green",styleFalse:{color:"grey"}}),Pp({className:"h2"}),hp({value:e.userSettings.targetSpread,onChange:e.onChangeTargetSpread,tooltip:"Projectile spread",label:"O",className:"",classNameTrue:" blue",styleFalse:{color:"grey"}}),Pp({className:"h2"}),hp({value:e.userSettings.targetSplash,onChange:e.onChangeTargetSplash,tooltip:"Splash radius for 100 and 25 damage",label:"(O)",className:"",classNameTrue:" red",styleFalse:{color:"grey"}}),Pp({className:"h2"}),hp({value:e.userSettings.targetDistance,onChange:e.onChangeTargetDistance,tooltip:"Weapon-target distance",label:"m",className:"",classNameTrue:" black",styleFalse:{color:"grey"}})]),Pp({className:"v2"},[]),Pp({className:"flexRow"},[hp({value:e.userSettings.targetCompactMode,onChange:e.onChangeTargetCompactMode,tooltip:"Compact target text: last three elevation digits",label:"c",className:"",classNameTrue:"pink",styleFalse:{color:"grey"}}),Pp({className:"h2"}),hp({value:e.userSettings.targetPlacementHelper,onChange:e.onChangeTargetPlacementHelper,tooltip:"Show keypads while moving target",label:"#?",className:"",classNameTrue:"red",styleFalse:{color:"grey"}}),Pp({className:"h2"}),hp({value:e.userSettings.targetPlacementLabel,onChange:e.onChangeTargetPlacementLabel,tooltip:"Show keypad label while moving target",label:"A1",className:"",classNameTrue:"red",styleFalse:{color:"grey"}}),Pp({className:"h2"}),Op("input",{type:"number",className:"textInput numberInput",value:e.userSettings.fontSize,onChange:e.onChangeFontSize,title:"font size"})])],Fp=e=>[Pp({className:"flexRow"},[hp({value:e.userSettings.extraButtonsAlwaysShown,onChange:e.onChangeExtraButtons,tooltip:"Show extra buttons in collapsed mode",label:"m.",className:"",classNameTrue:"yellow",styleFalse:{color:"grey"}}),Pp({className:"h2"},[]),hp({value:e.userSettings.deleteMode,onChange:e.onChangeDeleteMode,tooltip:"Delete items with single click/touch",label:"-I",className:"",classNameTrue:"red",styleFalse:{color:"grey"}}),Pp({className:"h2"}),hp({value:e.uiState.weaponCreationMode,onChange:e.onChangeWeaponCreationMode,tooltip:"Place target or weapon markers by default (shift + double click always places weapons)",label:[Op("span",{className:e.uiState.weaponCreationMode?"grey":"red"},["T "]),Op("span",{className:e.uiState.weaponCreationMode?"green":"grey"},["W"])]}),Pp({className:"h2"}),Pp({className:"v10"},[]),Pp({className:"divButton ",title:"Remove all targets",onClick:e.onClickRemoveAllTargets},"-∀T")])],Lp=up((e=>{var t,n,r;return{userSettings:e.userSettings,sessionId:null===(t=e.session)||void 0===t?void 0:t.sessionId,uiState:e.uiState,world:e.world,minimap:e.minimap,users:e.session?Array.from(null===(n=e.session)||void 0===n?void 0:n.users.values()):[],userId:null===(r=e.session)||void 0===r?void 0:r.userId}}),(e=>({onChangeMap:t=>e(nd(t)),onChangeContourmap:t=>e(Jf("contourmap",t.target.value)),onChangeWeapon:t=>e(Jf("weaponType",t)),onChangeWeaponPlacementHelper:t=>e(Jf("weaponPlacementHelper",t.target.value)),onChangeWeaponPlacementLabel:t=>e(Jf("weaponPlacementLabel",t.target.value)),onChangeMapGrid:t=>{e(Jf("mapGrid",t.target.value))},onChangeTargetSpread:t=>e(Jf("targetSpread",t.target.value)),onChangeTargetSplash:t=>e(Jf("targetSplash",t.target.value)),onChangeTargetDistance:t=>e(Jf("targetDistance",t.target.value)),onChangeTargetGrid:t=>e(Jf("targetGrid",t.target.value)),onChangeTargetCompactMode:t=>e(Jf("targetCompactMode",t.target.value)),onChangeTargetPlacementHelper:t=>e(Jf("targetPlacementHelper",t.target.value)),onChangeTargetPlacementLabel:t=>e(Jf("targetPlacementLabel",t.target.value)),onChangeFontSize:t=>e(Jf("fontSize",parseInt(t.target.value))),onChangeWeaponHeightOverGround:t=>n=>e(((e,t)=>({type:Ue.setHeightOverGround,payload:{entityId:e,newHeight:100*t}}))(t,parseInt(n.target.value))),onClickRemoveAllTargets:t=>{e({type:Be.removeAllTargets,payload:{}}),e({type:kf.remove_all})},onChangeDeleteMode:t=>e(Jf("deleteMode",t.target.value)),onChangeExtraButtons:t=>e(Jf("extraButtonsAlwaysShown",t.target.value)),onChangeWeaponCreationMode:t=>e(((e,t)=>({type:a.write,payload:{key:"weaponCreationMode",value:t}}))(0,t.target.value)),setWeaponActive:(t,n)=>e(((e,t)=>({type:Ue.setActive,payload:{entityId:e,newState:t}}))(t,n)),pickActiveWeapon:(t,n)=>e((e=>({type:Ue.pickActive,payload:{entityId:e}}))(t)),setCollapsed:t=>e(Jf("leftPanelCollapsed",t.target.value)),newSession:(t,n)=>e(If(t,n)),join:(t,n)=>e(Af(t,n)),leave:()=>e(jf()),sendMessage:(t,n)=>e(Rf(t,n)),changeUserName:t=>e((e=>({type:Of.changeUserName,payload:{newName:e}}))(t))})))((e=>Op("div",{className:"leftPanel flexItem"},[e.userSettings.leftPanelCollapsed?Pp({className:"flexColumn",style:{padding:"2px"}},[Pp({className:"flexRow"},[Op(xp,{className:"flexItem fill",value:e.userSettings.mapId,onChange:e.onChangeMap,options:Np.map((e=>({value:e[0],elem:Ip(e[1],e[2])})))})]),e.userSettings.extraButtonsAlwaysShown?Op(qn.Fragment,{},[Pp({className:"v2"},[]),...Fp(e)]):null]):Pp({style:{padding:"2px"}},Ap(e)),gp({value:e.userSettings.leftPanelCollapsed,onChange:e.setCollapsed,label:"",className:"collapseButton",style:{}})]))),Dp=qn.createElement,$p=up((e=>({uiState:e.uiState,minimap:e.minimap,heightmap:e.heightmap,camera:e.camera})),(e=>({})))((e=>{const t=Ye(e.camera,e.uiState.mousePosition),n=Ze(e.minimap,t),r=Bu(e.heightmap,t);return Dp("div",{className:""},[`${et(n)} |  ${(r/100).toFixed(1)}m`])})),Bp=qn.createElement,Hp=up((e=>({iconTool:e.iconToolState})),(e=>({onChangeIcon:t=>e({type:r.write,payload:{key:"c_name",value:t}}),onAddIcon:t=>{e({type:kf.add,payload:t}),e({type:r.write,payload:{key:"display",value:!1}}),e({type:r.write,payload:{key:"c_name",value:""}})}})))((e=>{let t={top:e.iconTool.y+"px",left:e.iconTool.x+"px"};return e.iconTool.display?qn.createElement("div",{className:"flex flex-col fixed  gap-3",id:"iconTool_s",style:t},qn.createElement("div",{className:"flex flex-row gap-2"},Ce.right.map((t=>{const n={backgroundImage:`url(${t.src})`};return qn.createElement("div",{onMouseEnter:()=>{e.onChangeIcon(t.name)},key:t.name,onMouseUp:()=>{e.onAddIcon({location:e.iconTool.location,src:t.src})},className:"flex flex-row justify-center items-center w-[40px] h-[40px] bg-black/50 hover:bg-black/70"},qn.createElement("div",{className:" bg-cover bg-center",style:n}),qn.createElement("img",{src:t.src}))}))),""!==e.iconTool.c_name?qn.createElement("div",{className:"flex flex-col bg-black/50 w-[370px]"},Ce.right.filter((t=>t.name===e.iconTool.c_name))[0].list.map((t=>(t.src,qn.createElement("div",{className:"flex flex-row p-2 hover:bg-black/70 items-center h-[30px]",onMouseUp:()=>{e.onAddIcon({location:e.iconTool.location,src:t.src})},key:t.name},qn.createElement("div",{className:"w-[60px] flex flex-row justify-center items-center "},qn.createElement("img",{src:t.src})),qn.createElement("div",{className:"text-white font-bold"},t.name)))))):""):qn.createElement(qn.Fragment,null)}));var Up;ge=Array,function(){function e(e,t){function n(){this.constructor=e}o(e,t),e.prototype=(n.prototype=t.prototype,new n)}function t(e){e.o||(e.R=new Map,e.o=new Map(e.t))}function n(e){e.o||(e.o=new Set,e.t.forEach((function(t){if(v(t)){var n=V(e.A.h,t,e);e.p.set(t,n),e.o.add(n)}else e.o.add(t)})))}function r(e){e.g&&g(3,JSON.stringify(k(e)))}var o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},a=function(){function n(e,t){return this[ne]={i:2,l:t,A:t?t.A:M(),P:!1,I:!1,o:void 0,R:void 0,t:e,k:this,C:!1,g:!1},this}e(n,Map);var o=n.prototype;return Object.defineProperty(o,"size",{get:function(){return k(this[ne]).size}}),o.has=function(e){return k(this[ne]).has(e)},o.set=function(e,n){var o=this[ne];return r(o),k(o).has(e)&&k(o).get(e)===n||(t(o),U(o),o.R.set(e,!0),o.o.set(e,n),o.R.set(e,!0)),this},o.delete=function(e){if(!this.has(e))return!1;var n=this[ne];return r(n),t(n),U(n),n.t.has(e)?n.R.set(e,!1):n.R.delete(e),n.o.delete(e),!0},o.clear=function(){var e=this[ne];r(e),k(e).size&&(t(e),U(e),e.R=new Map,b(e.t,(function(t){e.R.set(t,!1)})),e.o.clear())},o.forEach=function(e,t){var n=this;k(this[ne]).forEach((function(r,o){e.call(t,n.get(o),o,n)}))},o.get=function(e){var n=this[ne];r(n);var o=k(n).get(e);if(n.I||!v(o))return o;if(o!==n.t.get(e))return o;var a=V(n.A.h,o,n);return t(n),n.o.set(e,a),a},o.keys=function(){return k(this[ne]).keys()},o.values=function(){var e,t=this,n=this.keys();return(e={})[re]=function(){return t.values()},e.next=function(){var e=n.next();return e.done?e:{done:!1,value:t.get(e.value)}},e},o.entries=function(){var e,t=this,n=this.keys();return(e={})[re]=function(){return t.entries()},e.next=function(){var e=n.next();if(e.done)return e;var r=t.get(e.value);return{done:!1,value:[e.value,r]}},e},o[re]=function(){return this.entries()},n}(),i=function(){function t(e,t){return this[ne]={i:3,l:t,A:t?t.A:M(),P:!1,I:!1,o:void 0,t:e,k:this,p:new Map,g:!1,C:!1},this}e(t,Set);var o=t.prototype;return Object.defineProperty(o,"size",{get:function(){return k(this[ne]).size}}),o.has=function(e){var t=this[ne];return r(t),t.o?!!t.o.has(e)||!(!t.p.has(e)||!t.o.has(t.p.get(e))):t.t.has(e)},o.add=function(e){var t=this[ne];return r(t),this.has(e)||(n(t),U(t),t.o.add(e)),this},o.delete=function(e){if(!this.has(e))return!1;var t=this[ne];return r(t),n(t),U(t),t.o.delete(e)||!!t.p.has(e)&&t.o.delete(t.p.get(e))},o.clear=function(){var e=this[ne];r(e),k(e).size&&(n(e),U(e),e.o.clear())},o.values=function(){var e=this[ne];return r(e),n(e),e.o.values()},o.entries=function(){var e=this[ne];return r(e),n(e),e.o.entries()},o.keys=function(){return this.values()},o[re]=function(){return this.values()},o.forEach=function(e,t){for(var n=this.values(),r=n.next();!r.done;)e.call(t,r.value,r.value,this),r=n.next()},t}();!function(e,t){le[e]||(le[e]=t)}("MapSet",{F:function(e,t){return new a(e,t)},T:function(e,t){return new i(e,t)}})}();const Wp=(()=>{let e=[];return console.log(e),c(Qf,h(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(n,!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},n,{dispatch:r=h.apply(void 0,a)(n.dispatch)})}}}(wf,$f),...e))})(),Vp={t0:performance.now()};var Gp;Wp.dispatch(_f([0,0,0],0,0)),(Gp=(()=>{const e=window.localStorage.getItem(Yf);return null!=e?JSON.parse(e):{}})(),Object.entries(Gp).map((e=>({type:n.write,payload:{key:e[0],value:e[1]}})))).map(Wp.dispatch),Wp.dispatch(nd("kokan")),((e,t)=>{const n=()=>{Zu.width=window.innerWidth,Zu.height=window.innerHeight,_d(e)};window.addEventListener("resize",n,!1),n();const o=(e,n,r,o)=>{null==e||e.addEventListener(n,(e=>(t.t0=performance.now(),r(e))),o)},i=e.getState();o(Ju,"onchange",(t=>{Xf(e,Jf("mapId",t.target.value))})),o(i.minimap.texture.image,"load",(()=>_d(e))),o(Zu,"mousemove",(e=>t=>{if(e.getState().iconToolState.display)return;1==(1&t.buttons)&&kd(e,t);const n=Qe(t);Xf(e,((e,t)=>({type:a.write,payload:{key:"mousePosition",value:ve(e,t,0)}}))(n[0],n[1]))})(e)),o(Zu,"wheel",(e=>t=>{Xf(e,{type:r.write,payload:{key:"display",value:!1}}),Xf(e,{type:r.write,payload:{key:"c_name",value:""}}),e.getState().camera;const n=vf(e.getState().camera);let o=n<.01?.001:n<.02?.002:.005;const a=t.deltaY>0?Math.max(.002,n-o):Math.min(.08,n+o);Td(e,Zu,Qe(t),a)})(e)),o(Zu,"mousedown",(e=>t=>{if(e.getState().iconToolState.display)return;const n=Od(e)(t),r=Ye(e.getState().camera,Qe(t));Xf(e,td(r)),Xf(e,ed(n)),Xf(e,Zf(!0))})(e)),o(Zu,"mouseup",Cd(e)),o(Zu,"mouseleave",Cd(e)),o(Zu,"click",(e=>t=>{var n,o,a,i,l,s,c,u;Xf(e,{type:r.write,payload:{key:"display",value:!1}}),Xf(e,{type:r.write,payload:{key:"c_name",value:""}});const f=e.getState(),d=Ye(f.camera,Qe(t)),p=Je(f.camera,[25,0,0])[0],m=Ru(f.world,d,p),h=Je(f.camera,[15,0,0])[0],g=((e,t,n)=>{let r=n;const o=Array.from(e.components.icon.values()).map((t=>Object.assign(Object.assign({},t),{transform:e.components.transform.get(t.entityId)})));let a=[];return o.forEach((e=>{const n=De(ye(),e.transform.transform),o=Se(t,n);o<r&&(r=o,a.push(e))})),a})(f.world,d,h);if(t.shiftKey)m.length>0&&"Weapon"===m[0].entityType&&Xf(e,(v=m[0].entityId,{type:Ue.toggleActive,payload:{entityId:v}}));else if(t.ctrlKey||e.getState().userSettings.deleteMode)m.length>0&&Xf(e,(e=>({type:Be.remove,payload:{entityId:e}}))(m[0].entityId)),g.length>0&&Xf(e,{type:kf.remove,payload:g[0].entityId});else if(t.altKey&&m.length>0){console.log(f.world);let t=zu(f.world,"Target").filter((e=>e.entityId===m[0].entityId))[0],r=f.world.components.dirData.has(t.entityId)&&null!==(o=null===(n=f.world.components.dirData.get(t.entityId))||void 0===n?void 0:n.userIds)&&void 0!==o?o:[];f.world.components.dirData.has(t.entityId)?r.includes(null!==(i=null===(a=f.session)||void 0===a?void 0:a.userId)&&void 0!==i?i:"0")?Xf(e,(y={entityId:t.entityId,userIds:r.filter((e=>{var t,n;return null!==(n=e!==(null===(t=f.session)||void 0===t?void 0:t.userId))&&void 0!==n?n:"0"}))},{type:Tf.remove,payload:y})):Xf(e,Ef({entityId:t.entityId,userIds:[...r,null!==(s=null===(l=f.session)||void 0===l?void 0:l.userId)&&void 0!==s?s:"0"]})):Xf(e,Ef({entityId:t.entityId,userIds:[null!==(u=null===(c=f.session)||void 0===c?void 0:c.userId)&&void 0!==u?u:"0"]}))}var y,v})(e)),o(Zu,"dblclick",(e=>t=>{const n=Ye(e.getState().camera,Qe(t));if(t.altKey)return;let r=e.getState().world.nextId;var o,a;e.getState().uiState.weaponCreationMode||t.shiftKey?Xf(e,_f(n,0,r)):Xf(e,(o=n,a=r,{type:Be.add,payload:{location:o,entityType:"Target",entityId:a}}))})(e)),o(Zu,"touchstart",(e=>t=>{const n=Array(t.changedTouches.length).fill(0).map(((e,t)=>e+t));if(n.map((n=>{let r=t.changedTouches[n];e.dispatch(rd(r.identifier,r.clientX,r.clientY))})),1===t.changedTouches.length){let n=t.changedTouches[0];Xf(e,ed(Od(e)(n))),Xf(e,td(Ye(e.getState().camera,Qe(n))))}})(e),{passive:!1}),o(Zu,"touchend",Pd(e),{passive:!1}),o(Zu,"touchcancel",Pd(e),{passive:!1}),o(Zu,"touchmove",(e=>t=>{t.preventDefault(),t.stopImmediatePropagation();const n=Object.values(t.changedTouches);let r=Array.from(e.getState().uiState.touches.values()).sort(((e,t)=>e.identifier-t.identifier));r.length>=2?(e=>t=>{const n=Object.values(t.changedTouches);let r=Array.from(e.getState().uiState.touches.values()).sort(((e,t)=>e.identifier-t.identifier)),o=r.slice(0,2),a=Se(o[0].location,o[1].location),i=ye();!function(e,t,n){e[0]=t[0]+n[0],e[1]=t[1]+n[1],e[2]=t[2]+n[2]}(i,o[0].location,o[1].location),we(i,i,.5);let l=0,s=null;n.forEach((e=>{o.forEach((t=>{e.identifier===t.identifier&&(s=e.target,l=l+2*Se(ve(e.clientX,e.clientY,0),i)/a-1)}))}));let c=1+l;if(c>0&&null!==s){const t=vf(e.getState().camera);Td(e,Zu,i,t*c)}})(e)(t):n&&(e=>t=>{const n=Object.values(t.changedTouches);let r=Array.from(e.getState().uiState.touches.values()).sort(((e,t)=>e.identifier-t.identifier));if(1===r.length){const t=n[0];kd(e,t)}})(e)(t),n.forEach((t=>{e.dispatch(rd(t.identifier,t.clientX,t.clientY))}))})(e),{passive:!1}),o(Zu,"contextmenu",(e=>t=>{if(2===t.button){const n=Ye(e.getState().camera,Qe(t));t.preventDefault(),console.log("Right clicked!");const o=t.clientX,a=t.clientY;console.log(o,a),Xf(e,{type:r.write,payload:{key:"display",value:!0}}),Xf(e,{type:r.write,payload:{key:"x",value:o+15}}),Xf(e,{type:r.write,payload:{key:"y",value:a-15}}),Xf(e,{type:r.write,payload:{key:"location",value:n}})}})(e));const l=new Nd("ws:/127.0.0.1:1235",{reconnectInterval:500,autoReconnect:!0},e);Tu().then((e=>{Cu("0"),l.connect()}))})(Wp,Vp),Wp.subscribe((()=>_d(Wp)));var qp=new DocumentFragment;Np.forEach((e=>{const t=e[2];var n=document.createElement("link");n.rel="prefetch",n.as="image",n.href=t,qp.appendChild(n)})),null===(Up=document.getElementById("preloadContainer"))||void 0===Up||Up.append(qp);const Kp=document.getElementById("tooltip"),Xp=document.getElementById("leftPanel"),Qp=(document.getElementById("rightPanel"),document.getElementById("iconTool"));qn.createElement,tr.render((e=>Op(zd,{store:e},Op(Lp)))(Wp),Xp),tr.render((e=>Dp(zd,{store:e},Dp($p)))(Wp),Kp),tr.render((e=>Bp(zd,{store:e},Bp(Hp)))(Wp),Qp)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,